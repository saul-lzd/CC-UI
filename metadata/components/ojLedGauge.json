{
  "name": "oj-led-gauge",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Led Gauge",
  "type": "core",
  "description": "Displays information graphically, highlighting a specific metric value in relation to its thresholds.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojLedGauge.html",
  "properties": {
    "borderColor": {
      "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
      "type": "string",
      "displayName": "Border Color",
      "format": "color",
      "help": "borderColor"
    },
    "color": {
      "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
      "type": "string",
      "displayName": "Color",
      "format": "color",
      "help": "color"
    },
    "label": {
      "description": "An object defining the label.",
      "type": "object",
      "displayName": "Label",
      "help": "label",
      "properties": {
        "style": {
          "description": "The CSS style object defining the style of the label.",
          "type": "object",
          "displayName": "Style",
          "value": {},
          "help": "label.style"
        },
        "text": {
          "description": "The text for the label.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "translatable": true,
          "help": "label.text"
        }
      }
    },
    "max": {
      "description": "The maximum value of the gauge.",
      "type": "number",
      "displayName": "Max",
      "value": 100,
      "help": "max"
    },
    "metricLabel": {
      "description": "An object defining the value label.",
      "type": "object",
      "displayName": "Metric Label",
      "help": "metricLabel",
      "properties": {
        "converter": {
          "description": "The converter used to format the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
          "type": "object",
          "displayName": "Converter",
          "value": null,
          "help": "metricLabel.converter"
        },
        "rendered": {
          "description": "Defines if the label is rendered.",
          "type": "string",
          "displayName": "Rendered",
          "value": "off",
          "help": "metricLabel.rendered",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "scaling": {
          "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
          "type": "string",
          "displayName": "Scaling",
          "value": "auto",
          "help": "metricLabel.scaling",
          "enumValues": [
            "auto",
            "billion",
            "million",
            "none",
            "quadrillion",
            "thousand",
            "trillion"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "billion": {
              "displayName": "Billion"
            },
            "million": {
              "displayName": "Million"
            },
            "none": {
              "displayName": "None"
            },
            "quadrillion": {
              "displayName": "Quadrillion"
            },
            "thousand": {
              "displayName": "Thousand"
            },
            "trillion": {
              "displayName": "Trillion"
            }
          }
        },
        "style": {
          "description": "The CSS style object defining the style of the label.",
          "type": "object",
          "displayName": "Style",
          "value": {},
          "help": "metricLabel.style"
        },
        "text": {
          "description": "The text for the label. If specified, text will overwrite the numeric value that is displayed by default. The converter, scaling, and textType attributes are ignored when text is specified.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "translatable": true,
          "help": "metricLabel.text"
        },
        "textType": {
          "description": "Defines whether the label is a number or a percentage of the total value.",
          "type": "string",
          "displayName": "Text Type",
          "value": "number",
          "help": "metricLabel.textType",
          "enumValues": [
            "number",
            "percent"
          ],
          "propertyEditorValues": {
            "number": {
              "displayName": "Number"
            },
            "percent": {
              "displayName": "Percent"
            }
          }
        }
      }
    },
    "min": {
      "description": "The minimum value of the gauge.",
      "type": "number",
      "displayName": "Min",
      "value": 0,
      "help": "min"
    },
    "rotation": {
      "description": "The rotation angle for the gauge. Useful for changing the direction of triangle or arrow gauges.",
      "type": "number",
      "displayName": "Rotation",
      "value": 0,
      "units": "degrees",
      "help": "rotation",
      "enumValues": [
        "0",
        "180",
        "270",
        "90"
      ],
      "propertyEditorValues": {
        "0": {
          "displayName": "0"
        },
        "90": {
          "displayName": "90"
        },
        "180": {
          "displayName": "180"
        },
        "270": {
          "displayName": "270"
        }
      }
    },
    "size": {
      "description": "Fraction of area to use. Values range from 0 to 1.",
      "type": "number",
      "displayName": "Size",
      "value": 1,
      "maximum": 1,
      "minimum": 0,
      "help": "size"
    },
    "svgClassName": {
      "description": "The CSS style class to apply to the gauge. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute.",
      "type": "string",
      "displayName": "Svg Class Name",
      "value": "",
      "help": "svgClassName"
    },
    "svgStyle": {
      "description": "The inline style to apply to the gauge. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute.",
      "type": "object",
      "displayName": "Svg Style",
      "value": {},
      "help": "svgStyle"
    },
    "thresholds": {
      "description": "An array of objects with the following properties defining the thresholds for the gauge.",
      "type": "Array<Object>",
      "displayName": "Thresholds",
      "value": [],
      "help": "thresholds",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "borderColor": {
              "description": "The border color of the threshold.",
              "type": "string"
            },
            "color": {
              "description": "The color of the threshold.",
              "type": "string"
            },
            "max": {
              "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
              "type": "number"
            },
            "shortDesc": {
              "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string"
            }
          }
        }
      }
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "help": "tooltip",
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip. The function takes a tooltip context argument,\nprovided by the gauge, and should return an object that contains only one of the two properties: insert: HTMLElement | string - An HTML element, which will be appended to the tooltip, or a tooltip string. preventDefault: true - Indicates that the tooltip should not be displayed. It is not necessary to return {preventDefault:false} to display tooltip, since this is a default behavior. ",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "tooltip.renderer",
          "properties": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The LED gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        }
      }
    },
    "type": {
      "description": "The shape of the LED gauge. Can take the name of a built-in shape or the svg path commands for a custom shape.",
      "type": "string",
      "displayName": "Type",
      "value": "circle",
      "help": "type",
      "enumValues": [
        "arrow",
        "circle",
        "diamond",
        "human",
        "rectangle",
        "square",
        "star",
        "triangle"
      ],
      "propertyEditorValues": {
        "arrow": {
          "displayName": "Arrow"
        },
        "circle": {
          "displayName": "Circle"
        },
        "diamond": {
          "displayName": "Diamond"
        },
        "human": {
          "displayName": "Human"
        },
        "rectangle": {
          "displayName": "Rectangle"
        },
        "square": {
          "displayName": "Square"
        },
        "star": {
          "displayName": "Star"
        },
        "triangle": {
          "displayName": "Triangle"
        }
      }
    },
    "value": {
      "description": "The metric value.",
      "type": "number|null",
      "displayName": "Value",
      "writeback": true,
      "help": "value"
    },
    "visualEffects": {
      "description": "Defines whether visual effects such as overlays are applied to the gauge.",
      "type": "string",
      "displayName": "Visual Effects",
      "value": "auto",
      "help": "visualEffects",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    }
  },
  "methods": {
    "getMetricLabel": {
      "description": "Returns the gauge's formatted metric label.",
      "help": "getMetricLabel",
      "return": "string"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}