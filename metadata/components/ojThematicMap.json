{
  "name": "oj-thematic-map",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Thematic Map",
  "type": "core",
  "description": "An interactive data visualization that displays data corresponding to geographic locations or regions.\r             Applications are required to supply a mapProvider for a valid thematic map.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojThematicMap.html",
  "properties": {
    "animationDuration": {
      "description": "We recommend using the component CSS classes to set component wide styling. This API should be used only for styling a specific instance of the component. The default values come from the CSS classess and varies based on theme. The duration of the animations in milliseconds.",
      "type": "number",
      "displayName": "Animation Duration",
      "units": "\"milliseconds\"",
      "help": "animationDuration"
    },
    "animationOnDisplay": {
      "description": "The type of animation to apply when the element is initially displayed.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "help": "animationOnDisplay",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "areaData": {
      "description": "The oj.DataProvider for the areas of the thematic map. It should provide data rows where each row will map data for a single thematic map data area. The row key will be used as the id for thematic map areas. Note that when using this attribute, a template for the areaTemplate slot should be provided.",
      "type": "oj.DataProvider|null",
      "displayName": "Area Data",
      "value": null,
      "help": "areaData"
    },
    "areas": {
      "description": "An array of objects that define a row of data for an area data layer. Also accepts a Promise where no data will be rendered if the Promise is rejected. Regardless of the set value type, we will wrap and return a Promise when accessing the areas property.",
      "type": "Array<Object>|Promise|null",
      "displayName": "Areas",
      "value": null,
      "help": "areas",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "categories": {
              "description": "An array of category strings corresponding to this area. This allows highlighting and filtering of areas.",
              "type": "Array<string>"
            },
            "color": {
              "description": "The area color.",
              "type": "string"
            },
            "id": {
              "description": "The identifier for this area. The id should be set by the application if the oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
              "type": "any"
            },
            "label": {
              "description": "Text used for the area's label.",
              "type": "string"
            },
            "labelStyle": {
              "description": "The CSS style defining the label style for this area.",
              "type": "object"
            },
            "location": {
              "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this area is associated with.",
              "type": "string"
            },
            "opacity": {
              "description": "The area opacity.",
              "type": "number"
            },
            "selectable": {
              "description": "Specifies whether or not the area will be selectable.",
              "type": "\"auto\"|\"off\"",
              "value": "\"auto\""
            },
            "shortDesc": {
              "description": "The text that displays in the area's tooltip.",
              "type": "string"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of the area.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the area.",
              "type": "object"
            }
          }
        }
      }
    },
    "as": {
      "description": "An alias for the $current context variable passed to slot content for the areaTemplate, markerTemplate, or linkTemplate slots.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "focusRenderer": {
      "description": "An optional callback function to update the data item in response to changes in keyboard focus state.",
      "type": "function|null",
      "displayName": "Focus Renderer",
      "value": null,
      "help": "focusRenderer",
      "properties": {
        "color": {
          "description": "The color of the data item.",
          "type": "string"
        },
        "componentElement": {
          "description": "The thematic map element.",
          "type": "Element"
        },
        "data": {
          "description": "The data object for a stamped data visualization.",
          "type": "object"
        },
        "id": {
          "description": "The id of the data item.",
          "type": "any"
        },
        "itemData": {
          "description": "The row data object for the hovered item. This will only be set if an oj.DataProvider is being used.",
          "type": "object|null"
        },
        "label": {
          "description": "The label of the data item.",
          "type": "string"
        },
        "location": {
          "description": "The location of the data item which can be null if x/y are set instead.",
          "type": "string|null"
        },
        "parentElement": {
          "description": "An element that is part of a displayed subtree on the DOM. Modifications of the parentElement are not supported.",
          "type": "Element"
        },
        "previousState": {
          "description": "An object that reflects the previous state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item was previously hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            }
          }
        },
        "renderDefaultFocus": {
          "description": "Function for rendering default focus effect for the data item",
          "type": "function"
        },
        "renderDefaultHover": {
          "description": "Function for rendering default hover effect for the data item",
          "type": "function"
        },
        "renderDefaultSelection": {
          "description": "Function for rendering default selection effect for the data item",
          "type": "function"
        },
        "root": {
          "description": "Null on initial rendering or the current data item SVG element.",
          "type": "Element|null"
        },
        "state": {
          "description": "An object that reflects the current state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item is currently hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            }
          }
        },
        "x": {
          "description": "The x coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        },
        "y": {
          "description": "The y coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        }
      }
    },
    "hiddenCategories": {
      "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.",
      "type": "Array<string>",
      "displayName": "Hidden Categories",
      "value": [],
      "writeback": true,
      "help": "hiddenCategories"
    },
    "highlightMatch": {
      "description": "The matching condition for the highlightedCategories option. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
      "type": "string",
      "displayName": "Highlight Match",
      "value": "all",
      "help": "highlightMatch",
      "enumValues": [
        "all",
        "any"
      ],
      "propertyEditorValues": {
        "all": {
          "displayName": "All"
        },
        "any": {
          "displayName": "Any"
        }
      }
    },
    "highlightedCategories": {
      "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted.",
      "type": "Array<string>",
      "displayName": "Highlighted Categories",
      "value": [],
      "writeback": true,
      "help": "highlightedCategories"
    },
    "hoverBehavior": {
      "description": "Defines the behavior applied when hovering over data items.",
      "type": "string",
      "displayName": "Hover Behavior",
      "value": "none",
      "help": "hoverBehavior",
      "enumValues": [
        "dim",
        "none"
      ],
      "propertyEditorValues": {
        "dim": {
          "displayName": "Dim"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "hoverRenderer": {
      "description": "An optional callback function to update the node in response to changes in hover state.",
      "type": "function|null",
      "displayName": "Hover Renderer",
      "value": null,
      "help": "hoverRenderer",
      "properties": {
        "color": {
          "description": "The color of the data item.",
          "type": "string"
        },
        "componentElement": {
          "description": "The thematic map element.",
          "type": "Element"
        },
        "data": {
          "description": "The data object for a stamped data visualization.",
          "type": "object"
        },
        "id": {
          "description": "The id of the data item.",
          "type": "any"
        },
        "itemData": {
          "description": "The row data object for the hovered item. This will only be set if an oj.DataProvider is being used.",
          "type": "object|null"
        },
        "label": {
          "description": "The label of the data item.",
          "type": "string"
        },
        "location": {
          "description": "The location of the data item which can be null if x/y are set instead.",
          "type": "string|null"
        },
        "parentElement": {
          "description": "An element that is part of a displayed subtree on the DOM. Modifications of the parentElement are not supported.",
          "type": "Element"
        },
        "previousState": {
          "description": "An object that reflects the previous state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item was previously hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            }
          }
        },
        "renderDefaultFocus": {
          "description": "Function for rendering default focus effect for the data item",
          "type": "function"
        },
        "renderDefaultHover": {
          "description": "Function for rendering default hover effect for the data item",
          "type": "function"
        },
        "renderDefaultSelection": {
          "description": "Function for rendering default selection effect for the data item",
          "type": "function"
        },
        "root": {
          "description": "Null on initial rendering or the current data item SVG element.",
          "type": "Element|null"
        },
        "state": {
          "description": "An object that reflects the current state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item is currently hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            }
          }
        },
        "x": {
          "description": "The x coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        },
        "y": {
          "description": "The y coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        }
      }
    },
    "initialZooming": {
      "description": "Specifies whether the map will zoom to fit the data objects on initial render.",
      "type": "string",
      "displayName": "Initial Zooming",
      "value": "none",
      "help": "initialZooming",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "isolatedItem": {
      "description": "The id for the isolated area of this area data layer. If set, only the isolated area will be displayed.",
      "type": "any",
      "displayName": "Isolated Item",
      "value": null,
      "help": "isolatedItem"
    },
    "labelDisplay": {
      "description": "Determines how labels for this layer should be displayed.",
      "type": "string",
      "displayName": "Label Display",
      "value": "off",
      "help": "labelDisplay",
      "enumValues": [
        "auto",
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "Renders the label if it fits within the area bounds.",
          "displayName": "Auto"
        },
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "labelType": {
      "description": "Determines which type of map labels to display.",
      "type": "string",
      "displayName": "Label Type",
      "value": "short",
      "help": "labelType",
      "enumValues": [
        "long",
        "short"
      ],
      "propertyEditorValues": {
        "long": {
          "displayName": "Long"
        },
        "short": {
          "displayName": "Short"
        }
      }
    },
    "linkData": {
      "description": "The oj.DataProvider for the links of the thematic map. It should provide data rows where each row will map data for a single thematic map data link. The row key will be used as the id for thematic map links. Note that when using this attribute, a template for the linkTemplate slot should be provided.",
      "type": "oj.DataProvider|null",
      "displayName": "Link Data",
      "value": null,
      "help": "linkData"
    },
    "links": {
      "description": "An array of objects that define the data for links. Also accepts a Promise where no data will be rendered if the Promise is rejected. Regardless of the set value type, we will wrap and return a Promise when accessing the links property.",
      "type": "Array<Object>|Promise|null",
      "displayName": "Links",
      "value": null,
      "help": "links",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "categories": {
              "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links.",
              "type": "Array<string>"
            },
            "color": {
              "description": "The link color.",
              "type": "string"
            },
            "endLocation": {
              "description": "An object with used to determine the end point of the link.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The marker or area id to be used as the end point.",
                  "type": "any"
                },
                "location": {
                  "description": "An identifier corresponding to a Feature provided in the mapProvider geo object to be used as the end point.",
                  "type": "string"
                },
                "x": {
                  "description": "The x coordinate which can represent latitude of the end point.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate which can represent longitude of the end point.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "The identifier for this link. The id should be set by the application if the oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
              "type": "any"
            },
            "selectable": {
              "description": "Specifies whether or not the link will be selectable.",
              "type": "\"auto\"|\"off\"",
              "value": "\"auto\""
            },
            "shortDesc": {
              "description": "The text that displays in the links's tooltip.",
              "type": "string"
            },
            "startLocation": {
              "description": "An object with used to determine the start point of the link.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The marker or area id to be used as the start point.",
                  "type": "any"
                },
                "location": {
                  "description": "An identifier corresponding to a Feature provided in the mapProvider geo object to be used as the start point.",
                  "type": "string"
                },
                "x": {
                  "description": "The x coordinate which can represent latitude of the start point.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate which can represent longitude of the start point.",
                  "type": "number"
                }
              }
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of the link.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the link.",
              "type": "object"
            },
            "width": {
              "description": "The link width in pixels.",
              "type": "number"
            }
          }
        }
      }
    },
    "mapProvider": {
      "description": "An object with the following properties, used to define a custom map.",
      "type": "object",
      "displayName": "Map Provider",
      "help": "mapProvider",
      "properties": {
        "geo": {
          "description": "The GeoJSON object containing custom area coordinates. Only GeoJSON objects of \"type\" Feature or FeatureCollection and Feature \"geometry\" objects of \"type\" Polygon or MultiPolygon are currently supported. Each Feature object will contain a thematic map area and each Feature's \"properties\" object will at a minimum need to contain a key, which can be defined in the propertiesKeys object, that will be used as the ID of the area.",
          "type": "object",
          "displayName": "Geo",
          "value": {},
          "help": "mapProvider.geo"
        },
        "propertiesKeys": {
          "description": "The object specifying the GeoJSON Feature \"properties\" object keys to use for the custom area id, short label, and long label mappings.",
          "type": "object",
          "displayName": "Properties Keys",
          "help": "mapProvider.propertiesKeys",
          "properties": {
            "id": {
              "description": "The required name of the \"properties\" key to use as the location id that will map a data item to a map area.",
              "type": "string",
              "displayName": "Id",
              "value": "",
              "help": "mapProvider.propertiesKeys.id"
            },
            "longLabel": {
              "description": "The optional name of the \"properties\" key to use for rendering area labels when labelType is set to \"long\".",
              "type": "string",
              "displayName": "Long Label",
              "value": "",
              "help": "mapProvider.propertiesKeys.longLabel"
            },
            "shortLabel": {
              "description": "The optional name of the \"properties\" key to use for rendering area labels when labelType is set to \"short\".",
              "type": "string",
              "displayName": "Short Label",
              "value": "",
              "help": "mapProvider.propertiesKeys.shortLabel"
            }
          }
        }
      }
    },
    "markerData": {
      "description": "The oj.DataProvider for the markers of the thematic map. It should provide data rows where each row will map data for a single thematic map data marker. The row key will be used as the id for thematic map markers. Note that when using this attribute, a template for the markerTemplate slot should be provided.",
      "type": "oj.DataProvider|null",
      "displayName": "Marker Data",
      "value": null,
      "help": "markerData"
    },
    "markerZoomBehavior": {
      "description": "Specifies marker behavior on zoom.",
      "type": "string",
      "displayName": "Marker Zoom Behavior",
      "value": "fixed",
      "help": "markerZoomBehavior",
      "enumValues": [
        "fixed",
        "zoom"
      ],
      "propertyEditorValues": {
        "fixed": {
          "displayName": "Fixed"
        },
        "zoom": {
          "displayName": "Zoom"
        }
      }
    },
    "markers": {
      "description": "An array of objects that define a row of data for a data layer. Also accepts a Promise where no data will be rendered if the Promise is rejected. Regardless of the set value type, we will wrap and return a Promise when accessing the markers property.",
      "type": "Array<Object>|Promise|null",
      "displayName": "Markers",
      "value": null,
      "help": "markers",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "borderColor": {
              "description": "The marker border color.",
              "type": "string"
            },
            "borderStyle": {
              "description": "The marker border style.",
              "type": "\"solid\"|\"none\"",
              "value": "\"solid\""
            },
            "borderWidth": {
              "description": "The marker border width in pixels.",
              "type": "number"
            },
            "categories": {
              "description": "An array of category strings corresponding to this marker. This allows highlighting and filtering of markers.",
              "type": "Array<string>"
            },
            "color": {
              "description": "The marker color.",
              "type": "string"
            },
            "height": {
              "description": "The pixel height for this marker. Note that this attribute will be ignored if a value is provided to calculate marker sizes.",
              "type": "number"
            },
            "id": {
              "description": "The identifier for this marker. The id should be set by the application if the oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
              "type": "any"
            },
            "label": {
              "description": "Text used for the marker's label.",
              "type": "string"
            },
            "labelPosition": {
              "description": "Determines the label position relative to the marker.",
              "type": "\"bottom\"|\"center\"|\"top\"",
              "value": "\"center\""
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the marker.",
              "type": "object"
            },
            "location": {
              "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this marker is associated with.",
              "type": "string"
            },
            "opacity": {
              "description": "The marker opacity.",
              "type": "number"
            },
            "rotation": {
              "description": "The angle to rotate the marker in clockwise degrees around the marker center.",
              "type": "number"
            },
            "selectable": {
              "description": "Specifies whether or not the marker will be selectable.",
              "type": "\"auto\"|\"off\"",
              "value": "\"auto\""
            },
            "shape": {
              "description": "Specifies the shape of a marker. Can take the name of a built-in shape or the svg path commands for a custom shape.",
              "type": "\"circle\"|\"diamond\"|\"ellipse\"|\"human\"|\"plus\"|\"rectangle\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|string",
              "value": "circle"
            },
            "shortDesc": {
              "description": "The text that displays in the area's tooltip.",
              "type": "string"
            },
            "source": {
              "description": "Specifies an URI specifying the location of the image resource to use for the marker instead of a built-in shape. The shape attribute is ignored if the source image is defined.",
              "type": "string"
            },
            "sourceHover": {
              "description": "An optional URI specifying the location of the hover image resource. If not defined, the source image will be used.",
              "type": "string"
            },
            "sourceHoverSelected": {
              "description": "An optional URI specifying the location of the selected image resource on hover. If not defined, the sourceSelected image will be used. If sourceSelected is not defined, then the source image will be used.",
              "type": "string"
            },
            "sourceSelected": {
              "description": "An optional URI specifying the location of the selected image. If not defined, the source image will be used.",
              "type": "string"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of the marker.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the marker.",
              "type": "object"
            },
            "value": {
              "description": "A data value used to calculate the marker dimensions based on the range of all the data values and the element size. Markers with negative or zero data values will not be rendered. If specified, this value takes precedence over the width and height attributes.",
              "type": "number"
            },
            "width": {
              "description": "The pixel width for this marker. Note that this attribute will be ignored if a value is provided to calculate marker.",
              "type": "number"
            },
            "x": {
              "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
              "type": "number"
            },
            "y": {
              "description": "The y coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
              "type": "number"
            }
          }
        }
      }
    },
    "maxZoom": {
      "description": "Specifies the maximum zoom level for this element. This can be any number greater than 1.0 which indicates the maximum point to which the map can be scaled. A value of 2.0 implies that the map can be zoomed in until it reaches twice the viewport size. A maxZoom of 1.0 indicates that the user cannot zoom the map beyond the viewport size.",
      "type": "number",
      "displayName": "Max Zoom",
      "value": 6,
      "help": "maxZoom"
    },
    "panning": {
      "description": "Determines whether element panning is allowed.",
      "type": "string",
      "displayName": "Panning",
      "value": "none",
      "help": "panning",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "renderer": {
      "description": "A callback function used to stamp custom SVG elements for a data layer.",
      "type": "function|null",
      "displayName": "Renderer",
      "value": null,
      "help": "renderer",
      "properties": {
        "color": {
          "description": "The color of the data item.",
          "type": "string"
        },
        "componentElement": {
          "description": "The thematic map element.",
          "type": "Element"
        },
        "data": {
          "description": "The data object for a stamped data visualization.",
          "type": "object"
        },
        "id": {
          "description": "The id of the data item.",
          "type": "any"
        },
        "itemData": {
          "description": "The row data object for the hovered item. This will only be set if an oj.DataProvider is being used.",
          "type": "object|null"
        },
        "label": {
          "description": "The label of the data item.",
          "type": "string"
        },
        "location": {
          "description": "The location of the data item which can be null if x/y are set instead.",
          "type": "string|null"
        },
        "parentElement": {
          "description": "An element that is part of a displayed subtree on the DOM. Modifications of the parentElement are not supported.",
          "type": "Element"
        },
        "previousState": {
          "description": "An object that reflects the previous state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item was previously hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            }
          }
        },
        "renderDefaultFocus": {
          "description": "Function for rendering default focus effect for the data item",
          "type": "function"
        },
        "renderDefaultHover": {
          "description": "Function for rendering default hover effect for the data item",
          "type": "function"
        },
        "renderDefaultSelection": {
          "description": "Function for rendering default selection effect for the data item",
          "type": "function"
        },
        "root": {
          "description": "Null on initial rendering or the current data item SVG element.",
          "type": "Element|null"
        },
        "state": {
          "description": "An object that reflects the current state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item is currently hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            }
          }
        },
        "x": {
          "description": "The x coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        },
        "y": {
          "description": "The y coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        }
      }
    },
    "selection": {
      "description": "An array of id strings, used to define the selected data items.",
      "type": "Array<any>",
      "displayName": "Selection",
      "value": [],
      "writeback": true,
      "help": "selection"
    },
    "selectionMode": {
      "description": "The type of selection behavior that is enabled on the thematic map.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "help": "selectionMode",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "selectionRenderer": {
      "description": "An optional callback function to update the data item in response to changes in selection state.",
      "type": "function|null",
      "displayName": "Selection Renderer",
      "value": null,
      "help": "selectionRenderer",
      "properties": {
        "color": {
          "description": "The color of the data item.",
          "type": "string"
        },
        "componentElement": {
          "description": "The thematic map element.",
          "type": "Element"
        },
        "data": {
          "description": "The data object for a stamped data visualization.",
          "type": "object"
        },
        "id": {
          "description": "The id of the data item.",
          "type": "any"
        },
        "itemData": {
          "description": "The row data object for the hovered item. This will only be set if an oj.DataProvider is being used.",
          "type": "object|null"
        },
        "label": {
          "description": "The label of the data item.",
          "type": "string"
        },
        "location": {
          "description": "The location of the data item which can be null if x/y are set instead.",
          "type": "string|null"
        },
        "parentElement": {
          "description": "An element that is part of a displayed subtree on the DOM. Modifications of the parentElement are not supported.",
          "type": "Element"
        },
        "previousState": {
          "description": "An object that reflects the previous state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item was previously hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item was previously selected.",
              "type": "boolean"
            }
          }
        },
        "renderDefaultFocus": {
          "description": "Function for rendering default focus effect for the data item",
          "type": "function"
        },
        "renderDefaultHover": {
          "description": "Function for rendering default hover effect for the data item",
          "type": "function"
        },
        "renderDefaultSelection": {
          "description": "Function for rendering default selection effect for the data item",
          "type": "function"
        },
        "root": {
          "description": "Null on initial rendering or the current data item SVG element.",
          "type": "Element|null"
        },
        "state": {
          "description": "An object that reflects the current state of the data item.",
          "type": "object",
          "properties": {
            "hovered": {
              "description": "True if the data item is currently hovered.",
              "type": "boolean"
            },
            "selected": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            },
            "focused": {
              "description": "True if the data item is currently selected.",
              "type": "boolean"
            }
          }
        },
        "x": {
          "description": "The x coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        },
        "y": {
          "description": "The y coordinate of the data item which can be null if location is set instead.",
          "type": "number|null"
        }
      }
    },
    "styleDefaults": {
      "description": "We recommend using the component CSS classes to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the data item. The default values come from the CSS classess and varies based on theme.",
      "type": "object",
      "displayName": "Style Defaults",
      "help": "styleDefaults",
      "properties": {
        "areaSvgStyle": {
          "description": "The CSS style object defining the style of the area layer areas. The default value comes from the CSS and varies based on theme.",
          "type": "object",
          "displayName": "Area Svg Style",
          "value": {},
          "help": "styleDefaults.areaSvgStyle"
        },
        "dataAreaDefaults": {
          "description": "An object defining the default styles for data areas. Properties specified on this object may be overridden by specifications on the data object.",
          "type": "object",
          "displayName": "Data Area Defaults",
          "value": {},
          "help": "styleDefaults.dataAreaDefaults",
          "properties": {
            "borderColor": {
              "description": "The area stroke color for the area data layer. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "styleDefaults.dataAreaDefaults.borderColor"
            },
            "hoverColor": {
              "description": "The hover data area border color. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Hover Color",
              "format": "color",
              "help": "styleDefaults.dataAreaDefaults.hoverColor"
            },
            "selectedInnerColor": {
              "description": "The inner selected data area border color. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Selected Inner Color",
              "format": "color",
              "help": "styleDefaults.dataAreaDefaults.selectedInnerColor"
            },
            "selectedOuterColor": {
              "description": "The outer selected data area border color. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Selected Outer Color",
              "format": "color",
              "help": "styleDefaults.dataAreaDefaults.selectedOuterColor"
            }
          }
        },
        "dataMarkerDefaults": {
          "description": "An object defining the default styles for data markers. Properties specified on this object may be overridden by specifications on the data object.",
          "type": "object",
          "displayName": "Data Marker Defaults",
          "help": "styleDefaults.dataMarkerDefaults",
          "properties": {
            "borderColor": {
              "description": "The border color. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "styleDefaults.dataMarkerDefaults.borderColor"
            },
            "borderStyle": {
              "description": "The border style.",
              "type": "string",
              "displayName": "Border Style",
              "value": "solid",
              "help": "styleDefaults.dataMarkerDefaults.borderStyle",
              "enumValues": [
                "none",
                "solid"
              ],
              "propertyEditorValues": {
                "none": {
                  "displayName": "None"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "borderWidth": {
              "description": "The border width in pixels.",
              "type": "number",
              "displayName": "Border Width",
              "value": 0.5,
              "units": "\"pixels\"",
              "help": "styleDefaults.dataMarkerDefaults.borderWidth"
            },
            "color": {
              "description": "The fill color of a marker. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "styleDefaults.dataMarkerDefaults.color"
            },
            "height": {
              "description": "The default marker pixel height. Note that this option will be ignored if a value is provided to calculate marker sizes.",
              "type": "number",
              "displayName": "Height",
              "value": 8,
              "units": "\"pixels\"",
              "help": "styleDefaults.dataMarkerDefaults.height"
            },
            "labelStyle": {
              "description": "The CSS style for a marker label.",
              "type": "object",
              "displayName": "Label Style",
              "value": {},
              "help": "styleDefaults.dataMarkerDefaults.labelStyle"
            },
            "opacity": {
              "description": "The default marker opacity.",
              "type": "number",
              "displayName": "Opacity",
              "value": 1,
              "help": "styleDefaults.dataMarkerDefaults.opacity"
            },
            "shape": {
              "description": "The default marker shape. Can take the name of a built-in shape or the svg path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "value": "circle",
              "help": "styleDefaults.dataMarkerDefaults.shape"
            },
            "width": {
              "description": "The default marker pixel width. Note that this option will be ignored if a value is provided to calculate marker sizes.",
              "type": "number",
              "displayName": "Width",
              "value": 8,
              "units": "\"pixels\"",
              "help": "styleDefaults.dataMarkerDefaults.width"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in ms for highlighting data items.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "\"milliseconds\"",
          "help": "styleDefaults.hoverBehaviorDelay"
        },
        "labelStyle": {
          "description": "The CSS style for the area layer labels.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "styleDefaults.labelStyle"
        },
        "linkDefaults": {
          "description": "An object defining the default styles for data areas. Properties specified on this object may be overridden by specifications on the data object.",
          "type": "object",
          "displayName": "Link Defaults",
          "help": "styleDefaults.linkDefaults",
          "properties": {
            "color": {
              "description": "The stroke color for links. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "styleDefaults.linkDefaults.color"
            },
            "width": {
              "description": "The stroke width for links in pixels.",
              "type": "number",
              "displayName": "Width",
              "value": 2,
              "units": "\"pixels\"",
              "help": "styleDefaults.linkDefaults.width"
            }
          }
        }
      }
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "help": "tooltip",
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip.",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "tooltip.renderer",
          "properties": {
            "color": {
              "description": "The color of the hovered item or null if the hovered item if not associated with any data.",
              "type": "string|null"
            },
            "componentElement": {
              "description": "The thematic map element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered item or null if the hovered item is not associated with any data.",
              "type": "object|null"
            },
            "id": {
              "description": "The id of the hovered item or null if the hovered item if not associated with any data.",
              "type": "any|null"
            },
            "itemData": {
              "description": "The row data object for the hovered item. This will only be set if an oj.DataProvider is being used.",
              "type": "object|null"
            },
            "label": {
              "description": "The data label of the hovered item or null if the hovered item if not associated with any data.",
              "type": "string|null"
            },
            "location": {
              "description": "The location id of the hovered item which can be null if x/y are set instead.",
              "type": "string|null"
            },
            "locationName": {
              "description": "The location name of the hovered item if location id is set.",
              "type": "string|null"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "tooltip": {
              "description": "The default tooltip string constructed by the element if any.",
              "type": "string"
            },
            "x": {
              "description": "The x coordinate of the hovered item which can be null if location is set instead.",
              "type": "number"
            },
            "y": {
              "description": "The y coordinate of the hovered item which can be null if location is set instead.",
              "type": "number"
            }
          }
        }
      }
    },
    "tooltipDisplay": {
      "description": "Specifies the tooltip behavior of the thematic map.",
      "type": "string",
      "displayName": "Tooltip Display",
      "value": "auto",
      "help": "tooltipDisplay",
      "enumValues": [
        "auto",
        "labelAndShortDesc",
        "none",
        "shortDesc"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "labelAndShortDesc": {
          "displayName": "Label And Short Desc"
        },
        "none": {
          "displayName": "None"
        },
        "shortDesc": {
          "displayName": "Short Desc"
        }
      }
    },
    "touchResponse": {
      "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events if the element does not require an internal feature that requires a touch start gesture like panning or zooming. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if element panning is not available for those elements that support the feature.",
      "type": "string",
      "displayName": "Touch Response",
      "value": "auto",
      "help": "touchResponse",
      "enumValues": [
        "auto",
        "touchStart"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "touchStart": {
          "displayName": "Touch Start"
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        }
      }
    },
    "zooming": {
      "description": "Determines whether element zooming is allowed.",
      "type": "string",
      "displayName": "Zooming",
      "value": "none",
      "help": "zooming",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    }
  },
  "methods": {
    "getArea": {
      "description": "Returns an object for automation testing verification of an area with the specified index in the areas property.",
      "help": "getArea",
      "params": [
        {
          "name": "index",
          "description": "The index of the area in the areas Array.",
          "type": "number"
        }
      ],
      "return": "object|null"
    },
    "getMarker": {
      "description": "Returns an object for automation testing verification of a marker with the specified index in the markers property.",
      "help": "getMarker",
      "params": [
        {
          "name": "index",
          "description": "The index of the marker in the markers Array.",
          "type": "number"
        }
      ],
      "return": "object|null"
    },
    "getLink": {
      "description": "Returns an object for automation testing verification of a link with the specified index in the links property.",
      "help": "getLink",
      "params": [
        {
          "name": "index",
          "description": "The index of the link in the links Array.",
          "type": "number"
        }
      ],
      "return": "object|null"
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "slots": {
    "areaTemplate": {
      "description": " The areaTemplate slot is used to specify the template for creating areas of the thematic map. The slot content must be wrapped in a <template> element. The content of the template should be a single <oj-thematic-map-area> element. See the [oj-thematic-map-area]ojThematicMapArea doc for more details. When the template is executed for each area, it will have access to the components's binding context containing the following properties: $current - an object that contains information for the current area. (See the table below for a list of properties available on $current) alias - if 'as' attribute was specified, the value will be used to provide an application-named alias for $current. \n",
      "maxItems": 1,
      "help": "areaTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-thematic-map> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current area",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent area",
          "type": "number"
        },
        "key": {
          "description": "The key of the current area",
          "type": "any"
        }
      }
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "linkTemplate": {
      "description": " The linkTemplate slot is used to specify the template for creating links of the thematic map. The slot content must be wrapped in a <template> element. The content of the template should be a single <oj-thematic-map-link> element. See the [oj-thematic-map-link]ojThematicMapLink doc for more details. When the template is executed for each link, it will have access to the components's binding context containing the following properties: $current - an object that contains information for the current link. (See the table below for a list of properties available on $current) alias - if 'as' attribute was specified, the value will be used to provide an application-named alias for $current. \n",
      "maxItems": 1,
      "help": "linkTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-thematic-map> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current link",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent link",
          "type": "number"
        },
        "key": {
          "description": "The key of the current link",
          "type": "any"
        }
      }
    },
    "markerTemplate": {
      "description": " The markerTemplate slot is used to specify the template for creating markers of the thematic map. The slot content must be wrapped in a <template> element. The content of the template should be a single <oj-thematic-map-marker> element. See the [oj-thematic-map-marker]ojThematicMapMarker doc for more details. When the template is executed for each marker, it will have access to the components's binding context containing the following properties: $current - an object that contains information for the current marker. (See the table below for a list of properties available on $current) alias - if 'as' attribute was specified, the value will be used to provide an application-named alias for $current. \n",
      "maxItems": 1,
      "help": "markerTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-thematic-map> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current marker",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent marker",
          "type": "number"
        },
        "key": {
          "description": "The key of the current marker",
          "type": "any"
        }
      }
    }
  }
}