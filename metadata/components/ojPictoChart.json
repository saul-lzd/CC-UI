{
  "name": "oj-picto-chart",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Picto Chart",
  "type": "core",
  "description": "Displays information using icons to visualize an absolute number or the relative sizes of the different parts of a population.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojPictoChart.html",
  "properties": {
    "animationDuration": {
      "description": "The duration of the animations, in milliseconds. The default value comes from the CSS and varies based on theme.",
      "type": "number",
      "displayName": "Animation Duration",
      "units": "\"milliseconds\"",
      "help": "animationDuration"
    },
    "animationOnDataChange": {
      "description": "The animation when the data changes.",
      "type": "string",
      "displayName": "Animation On Data Change",
      "value": "none",
      "help": "animationOnDataChange",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "animationOnDisplay": {
      "description": "The animation that is shown on initial display.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "help": "animationOnDisplay",
      "enumValues": [
        "alphaFade",
        "auto",
        "none",
        "popIn",
        "zoom"
      ],
      "propertyEditorValues": {
        "alphaFade": {
          "displayName": "Alpha Fade"
        },
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        },
        "popIn": {
          "displayName": "Pop In"
        },
        "zoom": {
          "displayName": "Zoom"
        }
      }
    },
    "as": {
      "description": "An alias for the $current context variable when referenced inside itemTemplate when using a DataProvider.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "columnCount": {
      "description": "The number of columns that the picto chart has. The number of columns will be automatically computed if not specified.",
      "type": "number|null",
      "displayName": "Column Count",
      "value": null,
      "help": "columnCount"
    },
    "columnWidth": {
      "description": "The width of a column in pixels. The width of columns will be automatically computed if not specified. Setting this property in a fixed layout (when the element width and height are defined) may cause items to be truncated.",
      "type": "number|null",
      "displayName": "Column Width",
      "value": null,
      "units": "\"pixels\"",
      "help": "columnWidth"
    },
    "data": {
      "description": "The oj.DataProvider for the picto chart. It should provide rows where each row corresponds to a single picto chart item.",
      "type": "oj.DataProvider|null",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "drilling": {
      "description": "Whether drilling is enabled. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable or disable drilling on individual items, use the drilling attribute in each item.",
      "type": "string",
      "displayName": "Drilling",
      "value": "off",
      "help": "drilling",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "hiddenCategories": {
      "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.",
      "type": "Array<string>",
      "displayName": "Hidden Categories",
      "value": [],
      "writeback": true,
      "help": "hiddenCategories"
    },
    "highlightMatch": {
      "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
      "type": "string",
      "displayName": "Highlight Match",
      "value": "all",
      "help": "highlightMatch",
      "enumValues": [
        "all",
        "any"
      ],
      "propertyEditorValues": {
        "all": {
          "displayName": "All"
        },
        "any": {
          "displayName": "Any"
        }
      }
    },
    "highlightedCategories": {
      "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted.",
      "type": "Array<string>",
      "displayName": "Highlighted Categories",
      "value": [],
      "writeback": true,
      "help": "highlightedCategories"
    },
    "hoverBehavior": {
      "description": "The behavior applied when hovering over data items.",
      "type": "string",
      "displayName": "Hover Behavior",
      "value": "none",
      "help": "hoverBehavior",
      "enumValues": [
        "dim",
        "none"
      ],
      "propertyEditorValues": {
        "dim": {
          "displayName": "Dim"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "hoverBehaviorDelay": {
      "description": "Specifies initial hover delay in ms for highlighting data items.",
      "type": "number",
      "displayName": "Hover Behavior Delay",
      "value": 200,
      "units": "\"milliseconds\"",
      "help": "hoverBehaviorDelay"
    },
    "items": {
      "description": "An array of objects with the following properties that defines the pictoChart items.",
      "type": "Array<Object>|Promise|null",
      "displayName": "Items",
      "value": null,
      "help": "items",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "id": {
              "description": "The item id. The item id should be set by the application if the DataProvider is not being used.",
              "type": "any"
            },
            "name": {
              "description": "The name of the item. Used for default tooltip and accessibility.",
              "type": "string"
            },
            "shape": {
              "description": "The shape of the item. Can take the name of a built-in shape or the svg path commands for a custom shape. \"None\" will make the item transparent and can be used to create gaps. Does not apply if custom image is specified.",
              "type": "\"ellipse\"|\"square\"|\"circle\"|\"diamond\"|\"triangleUp\"|\"triangleDown\"|\"star\"|\"plus\"|\"human\"|\"none\"|\"rectangle\"|string",
              "value": "rectangle"
            },
            "color": {
              "description": "The color of the item. Does not apply if custom image is specified.",
              "type": "string"
            },
            "borderColor": {
              "description": "The border color of the item. Does not apply if custom image is specified.",
              "type": "string"
            },
            "borderWidth": {
              "description": "The border width of the item in pixels. Does not apply if custom image is specified.",
              "type": "number"
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape.",
              "type": "string"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The inline style to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified.",
              "type": "object"
            },
            "sourceHover": {
              "description": "The optional URI for the hover state. If not specified, the source image will be used.",
              "type": "string"
            },
            "sourceSelected": {
              "description": "The optional URI for the selected state. If not specified, the source image will be used.",
              "type": "string"
            },
            "sourceHoverSelected": {
              "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
              "type": "string"
            },
            "count": {
              "description": "Specifies the number of times that the shape (or custom image) is drawn. Fractional counts (such as 4.5) are supported; however, fractions other than the multiples of 0.5 should be avoided because the fractional rendering ignores the gaps between shapes and the irregularity of the shapes.",
              "type": "number"
            },
            "rowSpan": {
              "description": "The number of rows each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.",
              "type": "number"
            },
            "columnSpan": {
              "description": "The number of columns each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.",
              "type": "number"
            },
            "shortDesc": {
              "description": "Short description string for accessibility users.",
              "type": "string"
            },
            "categories": {
              "description": "An array of category strings corresponding to this item. If not specified, defaults to the item id or name. This enables highlighting and filtering of individual data items through interactions with other visualization elements.",
              "type": "Array<string>"
            },
            "drilling": {
              "description": "Whether drilling is enabled for the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all items at once, use the drilling attribute in the top level.",
              "type": "\"inherit\"|\"off\"|\"on\"",
              "value": "\"inherit\""
            }
          }
        }
      }
    },
    "layout": {
      "description": "The direction in which the items are laid out.",
      "type": "string",
      "displayName": "Layout",
      "value": "horizontal",
      "help": "layout",
      "enumValues": [
        "horizontal",
        "vertical"
      ],
      "propertyEditorValues": {
        "horizontal": {
          "displayName": "Horizontal"
        },
        "vertical": {
          "displayName": "Vertical"
        }
      }
    },
    "layoutOrigin": {
      "description": "Defines where the first item is rendered. The subsequent items follow the first item according to the layout.",
      "type": "string",
      "displayName": "Layout Origin",
      "value": "topStart",
      "help": "layoutOrigin",
      "enumValues": [
        "bottomEnd",
        "bottomStart",
        "topEnd",
        "topStart"
      ],
      "propertyEditorValues": {
        "bottomEnd": {
          "displayName": "Bottom End"
        },
        "bottomStart": {
          "displayName": "Bottom Start"
        },
        "topEnd": {
          "displayName": "Top End"
        },
        "topStart": {
          "displayName": "Top Start"
        }
      }
    },
    "rowCount": {
      "description": "The number of rows that the picto chart has. The number of rows will be automatically computed if not specified.",
      "type": "number|null",
      "displayName": "Row Count",
      "value": null,
      "help": "rowCount"
    },
    "rowHeight": {
      "description": "The height of a row in pixels. The height of rows will be automatically computed if not specified. Setting this property in a fixed layout (when the element width and height are defined) may cause items to be truncated.",
      "type": "number|null",
      "displayName": "Row Height",
      "value": null,
      "units": "\"pixels\"",
      "help": "rowHeight"
    },
    "selection": {
      "description": "An array of id strings, used to define the selected objects.",
      "type": "Array<any>",
      "displayName": "Selection",
      "value": [],
      "writeback": true,
      "help": "selection"
    },
    "selectionMode": {
      "description": "The type of selection behavior that is enabled on the picto chart.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "help": "selectionMode",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "tooltip": {
      "description": "A function that returns a custom tooltip. The function takes a dataContext argument, provided by the picto chart. The function should return an Object that contains only one of the two properties: insert: HTMLElement | string - An HTML element, which will be appended to the tooltip, or a tooltip string. preventDefault: true - Indicates that the tooltip should not be displayed. It is not necessary to return {preventDefault:false} to display tooltip, since this is a default behavior. ",
      "type": "object",
      "displayName": "Tooltip",
      "help": "tooltip",
      "properties": {
        "renderer": {
          "description": "",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "tooltip.renderer",
          "properties": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "name": {
              "description": "The name of the hovered item.",
              "type": "string"
            },
            "count": {
              "description": "The count of the hovered item.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The picto chart HTML element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        }
      }
    }
  },
  "methods": {
    "getItem": {
      "description": "Returns an object with the following properties for automation testing verification of the item at the specified index.",
      "help": "getItem",
      "params": [
        {
          "name": "index",
          "description": "The index.",
          "type": "number"
        }
      ],
      "return": "object|null"
    },
    "getItemCount": {
      "description": "Returns the number of items in the pictoChart data.",
      "help": "getItemCount",
      "return": "number"
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojDrill": {
      "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
      "help": "drill",
      "detail": {
        "id": {
          "description": "the id of the drilled object",
          "type": "any"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "itemTemplate": {
      "description": " The itemTemplate slot is used to specify the template for creating each item of the picto chart when a DataProvider has been specified with the data attribute. The slot must be a <template> element.\nWhen the template is executed for each item, it will have access to the picto chart's binding context and the following properties:\n\n$current - an object that contains information for the current item\n\nalias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n\n\n\nThe content of the template should only be one <oj-picto-chart-item> element. See the [oj-picto-chart-item]ojPictoChartItem doc for more details.",
      "maxItems": 1,
      "help": "itemTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-picto-chart> custom element.",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current item.",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the current item.",
          "type": "number"
        },
        "key": {
          "description": "The key of the current item.",
          "type": "any"
        }
      }
    }
  }
}