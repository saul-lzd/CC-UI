{
  "name": "oj-table",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Table",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-table-data-cell-no-padding"
      ],
      "description": "Used to style a table cell so that it has no padding. An app developer would likely use this in the case of editable tables when an editable cell content does not need the default cell padding.\nThe class is applied as follows:\nThe class must be applied to the table cell."
    },
    {
      "styleGroup": [
        "oj-table-data-cell-padding"
      ],
      "description": "Used to style a table cell so that it has the default padding. An app developer would likely use this in the case of editable tables when an editable cell content needs to maintain default cell padding.\nThe class is applied as follows:\nThe class must be applied to the table cell."
    },
    {
      "styleGroup": [
        "oj-table-hide-vertical-scrollbar"
      ],
      "description": "Used to explicitly hide the vertical scrollbar when the table body is scrollable.\nThe class is applied as follows:\nThe class must be applied to the oj-table custom element."
    }
  ],
  "description": "Displays data items in a tabular format with highly interactive features.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojTable.html",
  "properties": {
    "accessibility": {
      "description": "Accessibility attributes.",
      "type": "object|null",
      "displayName": "Accessibility",
      "help": "accessibility",
      "properties": {
        "rowHeader": {
          "description": "The column id to be used as the row header by screen readers.\n\nThe td cells in the column specified by this\nattribute will be assigned an id and then referenced by the\nheaders attribute in the rest of the cells in the row.\nThis is required by screen readers. By default the first column\nwill be taken as the row header.\nSee the accessibility attribute for usage examples.",
          "type": "string",
          "displayName": "Row Header",
          "help": "accessibility.rowHeader"
        }
      }
    },
    "as": {
      "description": "Gets and sets the alias for the current context when referenced inside the cell template.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "columns": {
      "description": "An array of column definitions.\nIf the application change the column definitions after the Table is loaded, it must call the\nrefresh() method to update the Table display.",
      "type": "Array<Object>|null",
      "displayName": "Columns",
      "value": null,
      "writeback": true,
      "help": "columns",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "className": {
              "description": "The CSS class to apply to the column cells\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Class Name",
              "value": null,
              "help": "columns[].className"
            },
            "field": {
              "description": "The data field this column refers to.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Field",
              "value": null,
              "help": "columns[].field"
            },
            "footerClassName": {
              "description": "The CSS class to apply to the footer cell.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Footer Class Name",
              "value": null,
              "help": "columns[].footerClassName"
            },
            "footerRenderer": {
              "description": "The renderer function that renders the content of the footer.\nThe function will be passed a context object which contains\nthe following objects: columnIndex: The column index componentElement: A reference to the Table root element footerContext.datasource: The \"data\" attribute of the Table parentElement: Empty rendered element\n\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the footer. undefined: If the developer chooses to manipulate the footer element directly, the function should return undefined.\n\nIf no renderer is specified, the Table will treat the footer data as a String.\n\nSee the columns attribute for usage examples.",
              "type": "function|null",
              "displayName": "Footer Renderer",
              "value": null,
              "help": "columns[].footerRenderer"
            },
            "footerStyle": {
              "description": "The CSS styling to apply to the footer cell.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Footer Style",
              "value": null,
              "help": "columns[].footerStyle"
            },
            "footerTemplate": {
              "description": "The name of the slot used to specify the template for rendering the footer cell. The slot must be a <template> element.\nThe content of the template should not include the <td> element, only what's inside it.\nWhen both footerTemplate and footerRenderer are specified, the footerRenderer takes precedence.\nWhen the template is executed for each footer, it will have access to the binding context containing the following properties: $current - an object that contains information for the current footer being rendered. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
              "type": "string|null",
              "displayName": "Footer Template",
              "value": null,
              "help": "columns[].footerTemplate",
              "properties": {
                "componentElement": {
                  "description": "The <oj-table> custom element.",
                  "type": "Element"
                }
              }
            },
            "headerClassName": {
              "description": "The CSS class to apply to the column header text.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Header Class Name",
              "value": null,
              "help": "columns[].headerClassName"
            },
            "headerRenderer": {
              "description": "The renderer function that renders the content of the header.\nThe function will be passed a context object which contains\nthe following objects: columnIndex: The column index columnHeaderDefaultRenderer(options, delegateRenderer): If the column is not sortable then this function will be included in the context. The options parameter specifies the options (future use) for the renderer while the delegateRenderer parameter specifies the function which the developer would like to be called during rendering of the column header. columnHeaderSortableIconRenderer(options, delegateRenderer): If the column is sortable then this function will be included in the context. The options parameter specifies the options (future use) for the renderer while the delegateRenderer parameter specifies the function which the developer would like to be called during rendering of the sortable column header. Calling the columnHeaderSortableIconRenderer function enables rendering custom header content while also preserving the sort icons. componentElement: A reference to the Table root element data: The header text for the column headerContext.datasource: The \"data\" attribute of the Table parentElement: Empty rendered TH element\n\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the header. undefined: If the developer chooses to manipulate the header element directly, the function should return undefined.\n\nIf no renderer is specified, the Table will treat the header data as a String.\n\nSee the columns attribute for usage examples.",
              "type": "function|null",
              "displayName": "Header Renderer",
              "value": null,
              "help": "columns[].headerRenderer"
            },
            "headerStyle": {
              "description": "The CSS styling to apply to the column header text.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Header Style",
              "value": null,
              "help": "columns[].headerStyle"
            },
            "headerTemplate": {
              "description": "The name of the slot used to specify the template for rendering the header cell. The slot must be a <template> element.\nThe content of the template should not include the <th> element, only what's inside it.\nWhen both headerTemplate and headerRenderer are specified, the headerRenderer takes precedence.\nWhen the template is executed for each header, it will have access to the binding context containing the following properties: $current - an object that contains information for the current header being rendered. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
              "type": "string|null",
              "displayName": "Header Template",
              "value": null,
              "help": "columns[].headerTemplate",
              "properties": {
                "componentElement": {
                  "description": "The <oj-table> custom element",
                  "type": "Element"
                },
                "data": {
                  "description": "The data object for the current header",
                  "type": "object"
                }
              }
            },
            "headerText": {
              "description": "Text to display in the header of the column.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Header Text",
              "value": null,
              "translatable": true,
              "help": "columns[].headerText"
            },
            "id": {
              "description": "The identifier for the column\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Id",
              "value": null,
              "help": "columns[].id"
            },
            "renderer": {
              "description": "The renderer function that renders the content of the cell.\nThe function will be passed a context object which contains\nthe following objects: cellContext.datasource: The \"data\" attribute of the Table cellContext.mode: The mode of the row. It can be \"edit\" or \"navigation\". cellContext.status: Contains the rowIndex, rowKey, and currentRow columnIndex: The column index componentElement: A reference to the Table root element data: The cell data parentElement: Empty rendered element row: Key/value pairs of the row\n\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the header. undefined: If the developer chooses to manipulate the cell element directly, the function should return undefined.\n\nIf no renderer is specified, the Table will treat the cell data as a String.\n\nSee the columns attribute for usage examples.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "columns[].renderer"
            },
            "resizable": {
              "description": "Enable or disable width resize along the column end headers.",
              "type": "string",
              "displayName": "Resizable",
              "value": "disabled",
              "help": "columns[].resizable",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "displayName": "Disabled"
                },
                "enabled": {
                  "displayName": "Enabled"
                }
              }
            },
            "sortProperty": {
              "description": "Indicates the row attribute used for sorting when sort is invoked on this\ncolumn. Useful for concatenated columns, where the sort is done by only a subset\nof the concatenated items.\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Sort Property",
              "value": null,
              "help": "columns[].sortProperty"
            },
            "sortable": {
              "description": "Whether or not the column is sortable.\n\nA sortable column has a clickable header that (when clicked)\nsorts the table by that column's property. Note that\nin order for a column to be sortable, this attribute\nmust be set to \"enabled\" and the underlying model must\nsupport sorting by this column's property. If this attribute\nis set to \"auto\" then the column will be sortable if the\nunderlying model supports sorting. A value of \"disabled\" will\ndisable sorting on the column.\n\nSee the columns attribute for usage examples.",
              "type": "string",
              "displayName": "Sortable",
              "value": "auto",
              "help": "columns[].sortable",
              "enumValues": [
                "auto",
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Column will be sortable if the underlying model supports sorting.",
                  "displayName": "Auto"
                },
                "disabled": {
                  "description": "Disabled.",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enabled.",
                  "displayName": "Enabled"
                }
              }
            },
            "style": {
              "description": "The CSS styling to apply to the column cells\n\nSee the columns attribute for usage examples.",
              "type": "string|null",
              "displayName": "Style",
              "value": null,
              "help": "columns[].style"
            },
            "template": {
              "description": "The name of the slot used to specify the template for rendering the cell. The slot must be a <template> element.\nThe content of the template should not include the <td> element, only what's inside it.\nWhen both cell template and cell renderer are specified, the cell renderer takes precedence.\nWhen the template is executed for the cell, it will have access to the binding context containing the following properties: $current - An object that contains information for the current cell being rendered (See the table below for a list of properties available on $current) alias - If as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
              "type": "string|null",
              "displayName": "Template",
              "value": null,
              "help": "columns[].template",
              "properties": {
                "componentElement": {
                  "description": "The <oj-table> custom element",
                  "type": "Element"
                },
                "data": {
                  "description": "The data for the current cell being rendered",
                  "type": "object"
                },
                "row": {
                  "description": "The data for the row contained the current cell being rendered",
                  "type": "object"
                },
                "index": {
                  "description": "The zero-based index of the current row being rendered",
                  "type": "number"
                },
                "columnIndex": {
                  "description": "The zero-based index of the current column being rendered.",
                  "type": "number"
                },
                "key": {
                  "description": "The key of the current cell being rendered.",
                  "type": "any"
                },
                "mode": {
                  "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
                  "type": "string"
                }
              }
            },
            "width": {
              "description": "The width in px of the column",
              "type": "number|null",
              "displayName": "Width",
              "value": null,
              "help": "columns[].width"
            }
          }
        }
      }
    },
    "columnsDefault": {
      "description": "Default values to apply to all columns objects.",
      "type": "object",
      "displayName": "Columns Default",
      "help": "columnsDefault",
      "properties": {
        "className": {
          "description": "The default CSS class for column cells\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Class Name",
          "value": null,
          "help": "columnsDefault.className"
        },
        "field": {
          "description": "The default data field for column.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Field",
          "value": null,
          "help": "columnsDefault.field"
        },
        "footerClassName": {
          "description": "The CSS class to apply to the footer cell.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Footer Class Name",
          "value": null,
          "help": "columnsDefault.footerClassName"
        },
        "footerRenderer": {
          "description": "The renderer function that renders the content of the footer.\nThe function will be passed a context object which contains\nthe following objects: columnIndex: The column index componentElement: A reference to the Table root element footerContext.datasource: The \"data\" attribute of the Table parentElement: Empty rendered element\n\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the footer. undefined: If the developer chooses to manipulate the footer element directly, the function should return undefined.\n\nIf no renderer is specified, the Table will treat the footer data as a String.\n\nSee the columns-default attribute for usage examples.",
          "type": "function|null",
          "displayName": "Footer Renderer",
          "value": null,
          "help": "columnsDefault.footerRenderer"
        },
        "footerStyle": {
          "description": "The CSS styling to apply to the footer cell.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Footer Style",
          "value": null,
          "help": "columnsDefault.footerStyle"
        },
        "footerTemplate": {
          "description": "The name of the slot used to specify the template for rendering the footer cell. The slot must be a <template> element.\nThe content of the template should not include the <td> element, only what's inside it.\nWhen both footerTemplate and footerRenderer are specified, the footerRenderer takes precedence.\nWhen the template is executed for each footer, it will have access to the binding context containing the following properties: $current - an object that contains information for the current footer being rendered. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
          "type": "string|null",
          "displayName": "Footer Template",
          "value": null,
          "help": "columnsDefault.footerTemplate",
          "properties": {
            "componentElement": {
              "description": "The <oj-table> custom element.",
              "type": "Element"
            }
          }
        },
        "headerClassName": {
          "description": "The default CSS class to apply to the column header.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Header Class Name",
          "value": null,
          "help": "columnsDefault.headerClassName"
        },
        "headerRenderer": {
          "description": "The renderer function that renders the content of the header.\nThe function will be passed a context object which contains\nthe following objects: columnIndex: The column index columnHeaderDefaultRenderer(options, delegateRenderer): If the column is not sortable then this function will be included in the context. The options parameter specifies the options (future use) for the renderer while the delegateRenderer parameter specifies the function which the developer would like to be called during rendering of the column header. columnHeaderSortableIconRenderer(options, delegateRenderer): If the column is sortable then this function will be included in the context. The options parameter specifies the options (future use) for the renderer while the delegateRenderer parameter specifies the function which the developer would like to be called during rendering of the sortable column header. Calling the columnHeaderSortableIconRenderer function enables rendering custom header content while also preserving the sort icons. componentElement: A reference to the Table root element data: The header text for the column headerContext.datasource: The \"data\" attribute of the Table parentElement: Empty rendered TH element\n\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the header. undefined: If the developer chooses to manipulate the header element directly, the function should return undefined.\n\nIf no renderer is specified, the Table will treat the header data as a String.\n\nSee the columns-default attribute for usage examples.",
          "type": "function|null",
          "displayName": "Header Renderer",
          "value": null,
          "help": "columnsDefault.headerRenderer"
        },
        "headerStyle": {
          "description": "The default CSS styling to apply to the column header.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Header Style",
          "value": null,
          "help": "columnsDefault.headerStyle"
        },
        "headerTemplate": {
          "description": "The name of the slot used to specify the template for rendering the header cell. The slot must be a <template> element.\nThe content of the template should not include the <th> element, only what's inside it.\nWhen both headerTemplate and headerRenderer are specified, the headerRenderer takes precedence.\nWhen the template is executed for each header, it will have access to the binding context containing the following properties: $current - an object that contains information for the current header being rendered. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
          "type": "string|null",
          "displayName": "Header Template",
          "value": null,
          "help": "columnsDefault.headerTemplate",
          "properties": {
            "componentElement": {
              "description": "The <oj-table> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current header",
              "type": "object"
            }
          }
        },
        "headerText": {
          "description": "Default text to display in the header of the column.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Header Text",
          "value": null,
          "translatable": true,
          "help": "columnsDefault.headerText"
        },
        "renderer": {
          "description": "The renderer function that renders the content of the cell.\nThe function will be passed a context object which contains\nthe following objects: cellContext.datasource: The \"data\" attribute of the Table cellContext.mode: The mode of the row. It can be \"edit\" or \"navigation\". cellContext.status: Contains the rowIndex, rowKey, and currentRow columnIndex: The column index componentElement: A reference to the Table root element data: The cell data parentElement: Empty rendered element row: Key/value pairs of the row\n\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the header. undefined: If the developer chooses to manipulate the cell element directly, the function should return undefined.\n\nIf no renderer is specified, the Table will treat the cell data as a String.\n\nSee the columns-default attribute for usage examples.",
          "type": "function|null",
          "displayName": "Renderer",
          "value": null,
          "help": "columnsDefault.renderer"
        },
        "resizable": {
          "description": "Enable or disable width resize along the column end headers.",
          "type": "string|null",
          "displayName": "Resizable",
          "value": "disabled",
          "help": "columnsDefault.resizable",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "displayName": "Disabled"
            },
            "enabled": {
              "displayName": "Enabled"
            }
          }
        },
        "sortProperty": {
          "description": "Indicates the row attribute used for sorting when sort is invoked on this\ncolumn. Useful for concatenated columns, where the sort is done by only a subset\nof the concatenated items.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Sort Property",
          "value": null,
          "help": "columnsDefault.sortProperty"
        },
        "sortable": {
          "description": "Whether or not the column is sortable.\n\nA sortable column has a clickable header that (when clicked)\nsorts the table by that column's property. Note that\nin order for a column to be sortable, this attribute\nmust be set to \"enabled\" and the underlying model must\nsupport sorting by this column's property. If this attribute\nis set to \"auto\" then the column will be sortable if the\nunderlying model supports sorting. A value of \"disabled\" will\ndisable sorting on the column.\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Sortable",
          "value": "auto",
          "help": "columnsDefault.sortable",
          "enumValues": [
            "auto",
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Column will be sortable if the underlying model supports sorting.",
              "displayName": "Auto"
            },
            "disabled": {
              "description": "Disabled.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Enabled.",
              "displayName": "Enabled"
            }
          }
        },
        "style": {
          "description": "Default CSS styling to apply to the column cells\n\nSee the columns-default attribute for usage examples.",
          "type": "string|null",
          "displayName": "Style",
          "value": null,
          "help": "columnsDefault.style"
        },
        "template": {
          "description": "The name of the slot used to specify the template for rendering the cell. The slot must be a <template> element.\nThe content of the template should not include the <td> element, only what's inside it.\nWhen both cell template and cell renderer are specified, the cell renderer takes precedence.\nWhen the template is executed for the cell, it will have access to the binding context containing the following properties: $current - an object that contains information for the current cell being rendered alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
          "type": "string|null",
          "displayName": "Template",
          "value": null,
          "help": "columnsDefault.template",
          "properties": {
            "componentElement": {
              "description": "The <oj-table> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current cell being rendered",
              "type": "object"
            },
            "row": {
              "description": "The data for the row contained the current cell being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current row being rendered",
              "type": "number"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column being rendered.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current cell being rendered.",
              "type": "any"
            },
            "mode": {
              "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
              "type": "string"
            }
          }
        },
        "width": {
          "description": "Default CSS width to apply to the column",
          "type": "number|null",
          "displayName": "Width",
          "value": null,
          "help": "columnsDefault.width"
        }
      }
    },
    "currentRow": {
      "description": "The row that currently have keyboard focus. Can be an index and/or key value.\nWhen both are specified, the index is used as a hint.\nReturns the current row or null if there is none.",
      "type": "object",
      "displayName": "Current Row",
      "value": null,
      "writeback": true,
      "help": "currentRow"
    },
    "data": {
      "description": "The data to bind to the element.\n\nMust be of type oj.DataProvider DataProvider\nor type oj.TableDataSource TableDataSource",
      "type": "oj.DataProvider|oj.TableDataSource|null",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "display": {
      "description": "Whether to display table in list or grid mode. Setting a value of grid\nwill cause the table to display in grid mode. The default value of this\nattribute is set through the theme.",
      "type": "string",
      "displayName": "Display",
      "value": "list",
      "help": "display",
      "enumValues": [
        "grid",
        "list"
      ],
      "propertyEditorValues": {
        "grid": {
          "description": "Display table in grid mode. This is a more compact look than list mode.",
          "displayName": "Grid"
        },
        "list": {
          "description": "Display table in list mode.",
          "displayName": "List"
        }
      }
    },
    "dnd": {
      "description": "Enable drag and drop functionality.\nJET provides support for HTML5 Drag and Drop events. Please refer to mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop third party documentation\non HTML5 Drag and Drop to learn how to use it.",
      "type": "object",
      "displayName": "Dnd",
      "help": "dnd",
      "properties": {
        "drag": {
          "description": "An object that describes drag functionlity.\n\nSee the dnd attribute for usage examples.",
          "type": "object",
          "displayName": "Drag",
          "value": null,
          "help": "dnd.drag",
          "properties": {
            "rows": {
              "description": "If this object is specified, the table will initiate drag operation when the user drags on selected rows.\n\nSee the dnd attribute for usage examples.",
              "type": "object",
              "displayName": "Rows",
              "help": "dnd.drag.rows",
              "properties": {
                "dataTypes": {
                  "description": "(optional) The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one\ntype, or an array of strings if multiple types are needed.\nFor example, if selected rows of employee data are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide\nwhether to accept the data. A text input may only accept \"text\" data type, while a chart for displaying employee data may be configured to accept the \"application/employees+json\" type.\nFor each type in the array, dataTransfer.setData will be called with the specified type and the JSON version of the selected rows data as the value. The selected rows data\nis an array of objects, with each object representing one selected row in the format returned by TableDataSource.get().\nThis property is required unless the application calls setData itself in a dragStart callback function.",
                  "type": "string|Array<string>"
                },
                "dragStart": {
                  "description": "(optional) A callback function that receives the \"dragstart\" event and context information as arguments:\nfunction(event, context)\nParameters:\nevent: The DOM event object\ncontext: ojTable.DragRowContext object with the following properties: rows: An array of objects, with each object representing the data of one selected row in the structure below: dataThe raw row data indexThe index for the row keyThe key value for the row \n\nThis function can set its own data and drag image as needed. If dataTypes is specified, event.dataTransfer is already populated with the default data when this function is invoked.\nIf dataTypes is not specified, this function must call event.dataTransfer.setData to set the data or else the drag operation will be cancelled. In either case, the drag image is\nset to an image of the selected rows visible on the table.",
                  "type": "function"
                },
                "drag": {
                  "description": "(optional) A callback function that receives the \"drag\" event as argument:\nfunction(event)\nParameters:\nevent: The DOM event object",
                  "type": "function"
                },
                "dragEnd": {
                  "description": "(optional) A callback function that receives the \"dragend\" event as argument:\nfunction(event)\nParameters:\nevent: The DOM event object",
                  "type": "function"
                }
              }
            }
          }
        },
        "drop": {
          "description": "An object that describes drop functionlity.\n\nSee the dnd attribute for usage examples.",
          "type": "object",
          "displayName": "Drop",
          "value": null,
          "help": "dnd.drop",
          "properties": {
            "columns": {
              "description": "An object that specifies callback functions to handle dropping columns\nFor all callback functions, the following arguments will be passed:\nevent: The DOM event object\ncontext: Context object with the following properties: columnIndex: The index of the column being dropped on\n\n\nSee the dnd attribute for usage examples.",
              "type": "object",
              "displayName": "Columns",
              "help": "dnd.drop.columns",
              "properties": {
                "dataTypes": {
                  "description": "A data type or an array of data types this element can accept.\nThis property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array<string>"
                },
                "dragEnter": {
                  "description": "(optional) A callback function that receives the \"dragenter\" event and context information as arguments:\nfunction(event, context)\nThis function should call event.preventDefault() to indicate the dragged data can be accepted.\nCalling event.preventDefault() is required by HTML5 Drag and Drop to indicate acceptance of data.\nIf dataTypes is specified, it will be matched against the drag data types to determine if the data is acceptable. If there is a match, JET will call\nevent.preventDefault() to indicate that the data can be accepted.",
                  "type": "function"
                },
                "dragOver": {
                  "description": "(optional) A callback function that receives the \"dragover\" event and context information as arguments:\nfunction(event, context)\nSimilar to dragEnter, this function should call event.preventDefault() to indicate the dragged data can be accepted. If dataTypes is specified,\nit will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function"
                },
                "dragLeave": {
                  "description": "(optional) A callback function that receives the \"dragleave\" event and context information as arguments:\nfunction(event, context)",
                  "type": "function"
                },
                "drop": {
                  "description": "(required) A callback function that receives the \"drop\" event and context information as arguments:\nfunction(event, context)\nThis function should call event.preventDefault() to indicate the dragged data is accepted.",
                  "type": "function"
                }
              }
            },
            "rows": {
              "description": "An object that specifies callback functions to handle dropping rows\nFor all callback functions, the following arguments will be passed:\nevent: The DOM event object\ncontext: Context object with the following properties: rowIndex: The index of the row being dropped on\n\n\nSee the dnd attribute for usage examples.",
              "type": "object",
              "displayName": "Rows",
              "help": "dnd.drop.rows",
              "properties": {
                "dataTypes": {
                  "description": "A data type or an array of data types this element can accept.\nThis property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array<string>"
                },
                "dragEnter": {
                  "description": "(optional) A callback function that receives the \"dragenter\" event and context information as arguments:\nfunction(event, context)\nThis function should call event.preventDefault() to indicate the dragged data can be accepted.\nCalling event.preventDefault() is required by HTML5 Drag and Drop to indicate acceptance of data.\nIf dataTypes is specified, it will be matched against the drag data types to determine if the data is acceptable. If there is a match, JET will call\nevent.preventDefault() to indicate that the data can be accepted.",
                  "type": "function"
                },
                "dragOver": {
                  "description": "(optional) A callback function that receives the \"dragover\" event and context information as arguments:\nfunction(event, context)\nSimilar to dragEnter, this function should call event.preventDefault() to indicate the dragged data can be accepted. If dataTypes is specified,\nit will be matched against the drag data types to determine if the data is acceptable.",
                  "type": "function"
                },
                "dragLeave": {
                  "description": "(optional) A callback function that receives the \"dragleave\" event and context information as arguments:\nfunction(event, context)",
                  "type": "function"
                },
                "drop": {
                  "description": "(required) A callback function that receives the \"drop\" event and context information as arguments:\nfunction(event, context)\nThis function should call event.preventDefault() to indicate the dragged data is accepted.\nIf the application needs to look at the data for the row being dropped on, it can use the getDataForVisibleRow method.",
                  "type": "function"
                }
              }
            }
          }
        },
        "reorder": {
          "description": "An object that describes reorder functionlity.\n\nSee the dnd attribute for usage examples.",
          "type": "object",
          "displayName": "Reorder",
          "help": "dnd.reorder",
          "properties": {
            "columns": {
              "description": "Enable or disable reordering the columns within the same table using drag and drop.\nRe-ordering is supported one column at a time. In addition, re-ordering will not re-order\nany cells which have the colspan attribute with value > 1. Such cells will need to be re-ordered manually by listening to\nthe property change event on the columns property.\n\nSee the dnd attribute for usage examples.",
              "type": "string",
              "displayName": "Columns",
              "value": "disabled",
              "help": "dnd.reorder.columns",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "description": "Disable column reordering",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enable column reordering",
                  "displayName": "Enabled"
                }
              }
            }
          }
        }
      }
    },
    "editMode": {
      "description": "Determine if the table is read only or editable. Use 'none' if the table is strictly read only and will be a single Tab stop on the page.\nUse 'rowEdit' if you want single row at a time editability. The table will initially render with all rows in read only mode. Pressing Enter/F2 or double click will make the current row editable and pressing Tab navigates to the next cell. Pressing ESC/F2 while in this mode will switch the table back to all rows in read only mode and will be a single Tab stop the page.",
      "type": "string",
      "displayName": "Edit Mode",
      "value": "none",
      "help": "editMode",
      "enumValues": [
        "none",
        "rowEdit"
      ],
      "propertyEditorValues": {
        "none": {
          "description": "The table is read only and is a single Tab stop.",
          "displayName": "None"
        },
        "rowEdit": {
          "description": "The table has single row at a time editability and the cells within the editable row are tabbable.",
          "displayName": "Row Edit"
        }
      }
    },
    "firstSelectedRow": {
      "description": "Gets the key and data of the first selected row. The first selected row is defined as the first\nkey returned by the selection property. The value of this property contains:\n\nkey - the key of the first selected row.\ndata - the data of the first selected row. If the selected row is not locally available, this will be null.\n\nIf no rows are selected then this property will return an object with both key and data properties set to null.",
      "type": "object",
      "displayName": "First Selected Row",
      "value": {
        "key": null,
        "data": null
      },
      "writeback": true,
      "readOnly": true,
      "help": "firstSelectedRow"
    },
    "horizontalGridVisible": {
      "description": "Whether the horizontal gridlines are to be drawn. Can be enabled or disabled.\nThe default value of auto means it's determined by the display attribute.",
      "type": "string",
      "displayName": "Horizontal Grid Visible",
      "value": "auto",
      "help": "horizontalGridVisible",
      "enumValues": [
        "auto",
        "disabled",
        "enabled"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "Determined by display attribute.",
          "displayName": "Auto"
        },
        "disabled": {
          "description": "Disabled.",
          "displayName": "Disabled"
        },
        "enabled": {
          "description": "Enabled.",
          "displayName": "Enabled"
        }
      }
    },
    "rowRenderer": {
      "description": "The row renderer function to use.\n\nThe renderer function will be passed in an Object which contains the fields: componentElement: A reference to the Table root element data: Key/value pairs of the row parentElement: Empty rendered TR element rowContext.datasource: The \"data\" attribute of the Table rowContext.mode: The mode of the row. It can be \"edit\" or \"navigation\". rowContext.status: Contains the rowIndex, rowKey, and currentRow\n\nThe function returns either a String or\na DOM element of the content inside the row. If the developer chooses\nto manipulate the row element directly, the function should return\nnothing.",
      "type": "function|null",
      "displayName": "Row Renderer",
      "value": null,
      "help": "rowRenderer"
    },
    "scrollPolicy": {
      "description": "Specifies the mechanism used to scroll the data inside the table. Possible values are: auto and loadMoreOnScroll.\nWhen loadMoreOnScroll is specified, additional data are fetched when the user scrolls to the bottom of the table.",
      "type": "string",
      "displayName": "Scroll Policy",
      "value": "auto",
      "help": "scrollPolicy",
      "enumValues": [
        "auto",
        "loadMoreOnScroll"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "Determined by element. The default is to display all data.",
          "displayName": "Auto"
        },
        "loadMoreOnScroll": {
          "description": "Additional data are fetched when the user scrolls to the bottom of the table.",
          "displayName": "Load More On Scroll"
        }
      }
    },
    "scrollPolicyOptions": {
      "description": "scrollPolicy options.\n\nWhen scrollPolicy is loadMoreOnScroll, the next block of rows is fetched\nwhen the user scrolls to the end of the table. The fetchSize property\ndetermines how many rows are fetched in each block.",
      "type": "object|null",
      "displayName": "Scroll Policy Options",
      "help": "scrollPolicyOptions",
      "properties": {
        "fetchSize": {
          "description": "The number of rows to fetch in each block of rows.\nSee the scroll-policy-options attribute for usage examples.",
          "type": "number",
          "displayName": "Fetch Size",
          "value": 25,
          "minimum": 1,
          "help": "scrollPolicyOptions.fetchSize"
        },
        "maxCount": {
          "description": "The maximum number of rows which will be displayed before fetching more rows will be stopped.\nSee the scroll-policy-options attribute for usage examples.",
          "type": "number",
          "displayName": "Max Count",
          "value": 500,
          "minimum": 0,
          "help": "scrollPolicyOptions.maxCount"
        }
      }
    },
    "scrollPosition": {
      "description": "Gets and sets the scroll position of table.",
      "type": "object",
      "displayName": "Scroll Position",
      "value": {
        "x": 0,
        "y": 0
      },
      "writeback": true,
      "help": "scrollPosition",
      "properties": {
        "x": {
          "description": "the horizontal position in pixel",
          "type": "number"
        },
        "y": {
          "description": "the vertical position in pixel",
          "type": "number"
        },
        "columnIndex": {
          "description": "the zero-based index of the cell at the origin of the table",
          "type": "number"
        },
        "rowIndex": {
          "description": "the zero-based index of the cell at the origin of the table. If scrollPolicy\nis set to 'loadMoreOnScroll and the row index is greater than maxCount set in scrollPolicyOptions,\nthen it will scroll and fetch until the end of the table is reached and there are no more rows to fetch.",
          "type": "number"
        },
        "columnKey": {
          "description": "the key of the column. This corresponds to the identifier of the column specified in columns.\nIf the column does not exists then the value is ignored.",
          "type": "any"
        },
        "rowKey": {
          "description": "the key of the row. If DataProvider is used for data and the key does not exists in the\nDataProvider, then the value is ignored. If DataProvider is not used then Table will fetch and scroll until the item is found\nor the end of the table is reached and there's no more items to fetch.",
          "type": "any"
        },
        "offsetX": {
          "description": "the horizontal offset in pixel relative to the column identified by columnKey/columnIndex.",
          "type": "number"
        },
        "offsetY": {
          "description": "the vertical offset in pixel relative to the row identified by rowKey/rowIndex.",
          "type": "number"
        }
      }
    },
    "selection": {
      "description": "Specifies the current selections in the table. Can be either an index or key value.\nWhen both are specified, the index is used as a hint.\nReturns an array of range objects, or an empty array if there's no selection.",
      "type": "Array<Object>",
      "displayName": "Selection",
      "value": [],
      "writeback": true,
      "help": "selection"
    },
    "selectionMode": {
      "description": "The row and column selection modes. Both can be either single or multiple.",
      "type": "Object<string, string>|null",
      "displayName": "Selection Mode",
      "value": null,
      "help": "selectionMode",
      "properties": {
        "column": {
          "description": "The selection mode for columns.\n\nSee the selection-mode attribute for usage examples.\nBy default, this element does not allow any selection.",
          "type": "string",
          "displayName": "Column",
          "help": "selectionMode.column",
          "enumValues": [
            "multiple",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Allow multiple selections",
              "displayName": "Multiple"
            },
            "single": {
              "description": "Allow single selection",
              "displayName": "Single"
            }
          }
        },
        "row": {
          "description": "The selection mode for rows.\n\nSee the selection-mode attribute for usage examples.\nBy default, this element does not allow any selection.",
          "type": "string",
          "displayName": "Row",
          "help": "selectionMode.row",
          "enumValues": [
            "multiple",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Allow multiple selections",
              "displayName": "Multiple"
            },
            "single": {
              "description": "Allow single selection",
              "displayName": "Single"
            }
          }
        }
      }
    },
    "selectionRequired": {
      "description": "Whether selection is required. If true, then at least one row will always\nremain selected.",
      "type": "boolean",
      "displayName": "Selection Required",
      "value": false,
      "help": "selectionRequired"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "labelAccSelectionAffordanceBottom": {
          "description": "Label for the bottom selection affordance on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Acc Selection Affordance Bottom",
          "help": "translations.labelAccSelectionAffordanceBottom"
        },
        "labelAccSelectionAffordanceTop": {
          "description": "Label for the top selection affordance on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Acc Selection Affordance Top",
          "help": "translations.labelAccSelectionAffordanceTop"
        },
        "labelDisableNonContiguousSelection": {
          "description": "Provides properties to customize the context menu label for exiting non-contigous selection.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Disable Non Contiguous Selection",
          "help": "translations.labelDisableNonContiguousSelection"
        },
        "labelEditRow": {
          "description": "Edit row label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Edit Row",
          "help": "translations.labelEditRow"
        },
        "labelEnableNonContiguousSelection": {
          "description": "Provides properties to customize the context menu label for entering non-contigous selection.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Enable Non Contiguous Selection",
          "help": "translations.labelEnableNonContiguousSelection"
        },
        "labelResize": {
          "description": "Provides properties to customize the context menu label for column resize.\n\nSee the translations option for usage examples.",
          "type": "string",
          "displayName": "Label Resize",
          "help": "translations.labelResize"
        },
        "labelResizePopupSpinner": {
          "description": "Provides properties to customize the resize popup spinner label.\n\nSee the translations option for usage examples.",
          "type": "string",
          "displayName": "Label Resize Popup Spinner",
          "help": "translations.labelResizePopupSpinner"
        },
        "labelResizePopupSubmit": {
          "description": "Provides properties to customize the resize popup submit button.\n\nSee the translations option for usage examples.",
          "type": "string",
          "displayName": "Label Resize Popup Submit",
          "help": "translations.labelResizePopupSubmit"
        },
        "labelSelectAndEditRow": {
          "description": "Select and Edit row label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Select And Edit Row",
          "help": "translations.labelSelectAndEditRow"
        },
        "labelSelectColum": {
          "description": "Select column label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Select Colum",
          "help": "translations.labelSelectColum"
        },
        "labelSelectRow": {
          "description": "Select row label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Select Row",
          "help": "translations.labelSelectRow"
        },
        "labelSort": {
          "description": "Context menu label for sort.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Sort",
          "help": "translations.labelSort"
        },
        "labelSortAsc": {
          "description": "Context menu label for sort ascending.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Sort Asc",
          "help": "translations.labelSortAsc"
        },
        "labelSortDsc": {
          "description": "Context menu label for sort descending.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Sort Dsc",
          "help": "translations.labelSortDsc"
        },
        "msgColumnResizeWidthValidation": {
          "description": "Column resize input width validation\n\nSee the translations option for usage examples.",
          "type": "string",
          "displayName": "Msg Column Resize Width Validation",
          "help": "translations.msgColumnResizeWidthValidation"
        },
        "msgFetchingData": {
          "description": "Fetching data message.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Fetching Data",
          "help": "translations.msgFetchingData"
        },
        "msgInitializing": {
          "description": "Table initializing message.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Initializing",
          "help": "translations.msgInitializing"
        },
        "msgNoData": {
          "description": "No data to display message.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg No Data",
          "help": "translations.msgNoData"
        },
        "msgScrollPolicyMaxCountDetail": {
          "description": "Warning message detail that maxCount has been reached for scrollPolicy=loadMoreOnScroll\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Scroll Policy Max Count Detail",
          "help": "translations.msgScrollPolicyMaxCountDetail"
        },
        "msgScrollPolicyMaxCountSummary": {
          "description": "Warning message summary that maxCount has been reached for scrollPolicy=loadMoreOnScroll\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Scroll Policy Max Count Summary",
          "help": "translations.msgScrollPolicyMaxCountSummary"
        },
        "msgStatusSortAscending": {
          "description": "Sort ascending status notification for accessibility\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Status Sort Ascending",
          "help": "translations.msgStatusSortAscending"
        },
        "msgStatusSortDescending": {
          "description": "Sort descending status notification for accessibility\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Status Sort Descending",
          "help": "translations.msgStatusSortDescending"
        }
      }
    },
    "verticalGridVisible": {
      "description": "Whether the vertical gridlines are to be drawn. Can be enabled or disabled.\nThe default value of auto means it's determined by the display attribute.",
      "type": "string",
      "displayName": "Vertical Grid Visible",
      "value": "auto",
      "help": "verticalGridVisible",
      "enumValues": [
        "auto",
        "disabled",
        "enabled"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "Determined by display attribute.",
          "displayName": "Auto"
        },
        "disabled": {
          "description": "Disabled.",
          "displayName": "Disabled"
        },
        "enabled": {
          "description": "Enabled.",
          "displayName": "Enabled"
        }
      }
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "getDataForVisibleRow": {
      "description": "Return the row data for a rendered row in the table.",
      "help": "getDataForVisibleRow",
      "params": [
        {
          "name": "rowIndex",
          "description": "row index",
          "type": "number"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refresh the table.",
      "help": "refresh",
      "return": "void"
    },
    "refreshRow": {
      "description": "Refresh a row in the table.",
      "help": "refreshRow",
      "params": [
        {
          "name": "rowIdx",
          "description": "Index of the row to refresh.",
          "type": "number"
        }
      ],
      "return": "Promise<boolean>"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when the default animation of a particular action is about to start. The default animation can be cancelled by calling event.preventDefault.\nIf the event listener calls event.preventDefault to cancel the default animation, it must call the event.detail.endCallback function when it finishes its own animation handling.\nRow animations will only be triggered for rows in the current viewport and an event will be triggered for each cell in the animated row.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "the action that starts the animation. See animation section for a list of actions.",
          "type": "\"add\"|\"remove\"|\"update\""
        },
        "element": {
          "description": "the target of animation. For row animations this will be the cell contents wrapped in a div.",
          "type": "Element"
        },
        "endCallback": {
          "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when the default animation of a particular action has ended. Note this event will not be triggered if application cancelled the default animation on animateStart.\nRow animations will only be triggered for rows in the current viewport and an event will be triggered for each cell in the animated row.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "the action that started the animation. See animation section for a list of actions.",
          "type": "\"add\"|\"remove\"|\"update\""
        },
        "element": {
          "description": "the target of animation. For row animations this will be the cell contents wrapped in a div.",
          "type": "Element"
        }
      }
    },
    "ojBeforeCurrentRow": {
      "description": "Triggered before the current row is changed via the currentRow property or via the UI.",
      "bubbles": true,
      "cancelable": true,
      "help": "beforeCurrentRow",
      "detail": {
        "currentRow": {
          "description": "the new current row",
          "type": "oj.ojTable.CurrentRow<K>"
        },
        "previousCurrentRow": {
          "description": "the previous current row",
          "type": "oj.ojTable.CurrentRow<K>"
        }
      }
    },
    "ojBeforeRowEdit": {
      "description": "Triggered before the table is going to enter edit mode. To prevent editing the row, call event.preventDefault() in the listener.",
      "bubbles": true,
      "cancelable": true,
      "help": "beforeRowEdit",
      "detail": {
        "rowContext": {
          "description": "the rowContext of the row that editing is going to be performed on.",
          "type": "object"
        }
      }
    },
    "ojBeforeRowEditEnd": {
      "description": "Triggered before the table is going to exit edit mode. To prevent exit editing, call event.preventDefault() in the listener.\nThere is a provided beforeRowEditEnd function, oj.DataCollectionEditUtils.basicHandleRowEditEnd, which can be specified.\nThis function will handle canceling edits as well as invoking validation on input elements.",
      "bubbles": true,
      "cancelable": true,
      "help": "beforeRowEditEnd",
      "detail": {
        "rowContext": {
          "description": "the rowContext of the row that editing is going to be performed on.",
          "type": "object"
        },
        "cancelEdit": {
          "description": "true if the edit should be negated based on actions (i.e. escape key).",
          "type": "object"
        }
      }
    },
    "ojSort": {
      "description": "Triggered when a sort is performed on the table",
      "bubbles": true,
      "cancelable": true,
      "help": "sort",
      "detail": {
        "header": {
          "description": "the key of the header which was sorted on",
          "type": "Element"
        },
        "direction": {
          "description": "the direction of the sort",
          "type": "'ascending'|'descending'"
        }
      }
    }
  },
  "slots": {
    "bottom": {
      "description": "Named slot for the Table's bottom panel where applications can add content such as a paging control.",
      "help": "bottom"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}