{
  "name": "oj-legend",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Legend",
  "type": "core",
  "description": "Displays an interactive description of symbols, colors, etc., used in graphical information representations.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojLegend.html",
  "properties": {
    "as": {
      "description": "An alias for the $current context variable passed to slot content for the nodeTemplate slot.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "data": {
      "description": "The oj.DataProvider for the sections and items of the legend. It should provide a data tree where each node in the data tree corresponds to a section or item in the legend. Nodes that are leaves will be treated as items. The row key will be used as the id for legend sections and items. Note that when using this attribute, a template for the itemTemplate and optionally sectionTemplate slots should be provided.",
      "type": "oj.DataProvider|null",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "drilling": {
      "description": "Whether drilling is enabled on all legend items. Drillable objects will show a pointer cursor on hover and fire ojDrill event on click. To enable or disable drilling on individual legend item, use the drilling attribute in each legend item.",
      "type": "string",
      "displayName": "Drilling",
      "value": "off",
      "help": "drilling",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "expanded": {
      "description": "Specifies the key set containing the ids of sections that should be expanded on initial render. Use the ExpandedKeySet class to specify sections to expand. Use the ExpandAllKeySet class to expand all sections. By default, all sections are expanded.",
      "type": "KeySet|null",
      "displayName": "Expanded",
      "writeback": true,
      "help": "expanded"
    },
    "halign": {
      "description": "Defines the horizontal alignment of the legend contents.",
      "type": "string",
      "displayName": "Halign",
      "value": "start",
      "help": "halign",
      "enumValues": [
        "center",
        "end",
        "start"
      ],
      "propertyEditorValues": {
        "center": {
          "displayName": "Center"
        },
        "end": {
          "displayName": "End"
        },
        "start": {
          "displayName": "Start"
        }
      }
    },
    "hiddenCategories": {
      "description": "An array of categories that will be hidden.",
      "type": "Array<string>",
      "displayName": "Hidden Categories",
      "value": [],
      "writeback": true,
      "help": "hiddenCategories"
    },
    "hideAndShowBehavior": {
      "description": "Defines whether the legend can be used to initiate hide and show behavior on referenced data items.",
      "type": "string",
      "displayName": "Hide And Show Behavior",
      "value": "off",
      "help": "hideAndShowBehavior",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "highlightedCategories": {
      "description": "An array of categories that will be highlighted.",
      "type": "Array<string>",
      "displayName": "Highlighted Categories",
      "value": [],
      "writeback": true,
      "help": "highlightedCategories"
    },
    "hoverBehavior": {
      "description": "Defines the behavior applied when hovering over a legend item.",
      "type": "string",
      "displayName": "Hover Behavior",
      "value": "none",
      "help": "hoverBehavior",
      "enumValues": [
        "dim",
        "none"
      ],
      "propertyEditorValues": {
        "dim": {
          "displayName": "Dim"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "hoverBehaviorDelay": {
      "description": "Specifies initial hover delay in ms for highlighting items in legend.",
      "type": "number",
      "displayName": "Hover Behavior Delay",
      "value": 200,
      "minimum": 0,
      "units": "milliseconds",
      "help": "hoverBehaviorDelay"
    },
    "orientation": {
      "description": "Defines the orientation of the legend, which determines the direction in which the legend items are laid out.",
      "type": "string",
      "displayName": "Orientation",
      "value": "vertical",
      "help": "orientation",
      "enumValues": [
        "horizontal",
        "vertical"
      ],
      "propertyEditorValues": {
        "horizontal": {
          "displayName": "Horizontal"
        },
        "vertical": {
          "displayName": "Vertical"
        }
      }
    },
    "scrolling": {
      "description": "Defines whether scrolling is enabled for the legend.",
      "type": "string",
      "displayName": "Scrolling",
      "value": "asNeeded",
      "help": "scrolling",
      "enumValues": [
        "asNeeded",
        "off"
      ],
      "propertyEditorValues": {
        "asNeeded": {
          "displayName": "As Needed"
        },
        "off": {
          "displayName": "Off"
        }
      }
    },
    "sections": {
      "description": "An array of objects with the following properties defining the legend sections.",
      "type": "Array<Object>|null",
      "displayName": "Sections",
      "value": null,
      "help": "sections",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "collapsible": {
              "description": "Whether the section is collapsible. Only applies if the legend orientation is vertical.",
              "type": "\"on\"|\"off\"",
              "value": "\"off\""
            },
            "expanded": {
              "description": "Whether the section is initially expanded. Only applies if the section is collapsible.",
              "type": "\"off\"|\"on\"",
              "value": "\"on\""
            },
            "id": {
              "description": "The id of the legend section. For the DataProvider case, the key for the node will be used as the id.",
              "type": "sting"
            },
            "items": {
              "description": "An array of objects with the following properties defining the legend items. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected.",
              "type": "Array<oj.ojLegend.Item>"
            },
            "sections": {
              "description": "An array of nested legend sections.",
              "type": "Array<oj.ojLegend.Section>"
            },
            "title": {
              "description": "The title of the legend section.",
              "type": "string"
            },
            "titleHalign": {
              "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
              "type": "\"center\"|\"end\"|\"start\"",
              "value": "\"start\""
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the section title.",
              "type": "object"
            }
          }
        }
      }
    },
    "symbolHeight": {
      "description": "The height of the legend symbol (line or marker) in pixels. If the value is 0, it will take the same value as symbolWidth. If both symbolWidth and symbolHeight are 0, then it will use a default value that may vary based on theme.",
      "type": "number",
      "displayName": "Symbol Height",
      "value": 0,
      "units": "pixels",
      "help": "symbolHeight"
    },
    "symbolWidth": {
      "description": "The width of the legend symbol (line or marker) in pixels. If the value is 0, it will take the same value as symbolWidth. If both symbolWidth and symbolHeight are 0, then it will use a default value that may vary based on theme.",
      "type": "number",
      "displayName": "Symbol Width",
      "value": 0,
      "units": "pixels",
      "help": "symbolWidth"
    },
    "textStyle": {
      "description": "The CSS style object defining the style of the legend item text. The default value comes from the CSS and varies based on theme.",
      "type": "object",
      "displayName": "Text Style",
      "value": {},
      "help": "textStyle"
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        }
      }
    },
    "valign": {
      "description": "Defines the vertical alignment of the legend contents.",
      "type": "string",
      "displayName": "Valign",
      "value": "top",
      "help": "valign",
      "enumValues": [
        "bottom",
        "middle",
        "top"
      ],
      "propertyEditorValues": {
        "bottom": {
          "displayName": "Bottom"
        },
        "middle": {
          "displayName": "Middle"
        },
        "top": {
          "displayName": "Top"
        }
      }
    }
  },
  "methods": {
    "getSection": {
      "description": "Returns an object with the following properties for automation testing verification of the legend section with the specified subid path.",
      "help": "getSection",
      "params": [
        {
          "name": "subIdPath",
          "description": "The array of indices in the subId for the desired legend section.",
          "type": "Array"
        }
      ],
      "return": "object|null"
    },
    "getItem": {
      "description": "Returns an object with the following properties for automation testing verification of the legend item with the specified subid path.",
      "help": "getItem",
      "params": [
        {
          "name": "subIdPath",
          "description": "The array of indices in the subId for the desired legend item.",
          "type": "Array"
        }
      ],
      "return": "object|null"
    },
    "getPreferredSize": {
      "description": "Returns the preferred size of the legend, given the available width and height. A re-render must be triggered by calling refresh after invoking this function.",
      "help": "getPreferredSize",
      "return": "object"
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojDrill": {
      "description": "Triggered during a drill gesture (single click on the legend item).",
      "help": "drill",
      "detail": {
        "id": {
          "description": "the id of the drilled object",
          "type": "any"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "itemTemplate": {
      "description": " The itemTemplate slot is used to specify the template for creating items of the legend. The slot content must be wrapped in a <template> element. The content of the template should be a single <oj-legend-item> element. See the [oj-legend-item]ojLegendItem doc for more details. When the template is executed for each area, it will have access to the components's binding context containing the following properties: $current - an object that contains information for the current node. (See the table below for a list of properties available on $current) alias - if 'as' attribute was specified, the value will be used to provide an application-named alias for $current. \n",
      "maxItems": 1,
      "help": "itemTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-legend> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object of the node",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent node",
          "type": "number"
        },
        "key": {
          "description": "The key of the current node",
          "type": "any"
        },
        "parentData": {
          "description": "An array of data objects of the outermost to innermost parents of the node",
          "type": "Array"
        },
        "parentKey": {
          "description": "The key of the parent node",
          "type": "any"
        }
      }
    },
    "sectionTemplate": {
      "description": " The sectionTemplate slot is used to specify the template for creating sections of the legend. The slot content must be wrapped in a <template> element. The content of the template should be a single <oj-legend-section> element. See the [oj-legend-section]ojLegendSection doc for more details. When the template is executed for each area, it will have access to the components's binding context containing the following properties: $current - an object that contains information for the current node. (See the table below for a list of properties available on $current) alias - if 'as' attribute was specified, the value will be used to provide an application-named alias for $current. \n",
      "maxItems": 1,
      "help": "sectionTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-legend> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object of the node",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent node",
          "type": "number"
        },
        "key": {
          "description": "The key of the current node",
          "type": "any"
        },
        "parentData": {
          "description": "An array of data objects of the outermost to innermost parents of the node",
          "type": "Array"
        },
        "parentKey": {
          "description": "The key of the parent node",
          "type": "any"
        }
      }
    }
  }
}