{
  "name": "oj-gantt",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Gantt",
  "type": "core",
  "description": "Displays scheduling information graphically, making it easier to plan, coordinate, and track various tasks and resources.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojGantt.html",
  "properties": {
    "animationOnDataChange": {
      "description": "Defines the animation that is applied on data changes.",
      "type": "string",
      "displayName": "Animation On Data Change",
      "value": "none",
      "help": "animationOnDataChange",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "animationOnDisplay": {
      "description": "Defines the animation that is shown on initial display.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "help": "animationOnDisplay",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "as": {
      "description": "An alias for the $current context variable passed to slot content for the dependencyTemplate, taskTemplate, or rowTemplate slots.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "axisPosition": {
      "description": "The position of the major and minor axis.",
      "type": "string",
      "displayName": "Axis Position",
      "value": "top",
      "help": "axisPosition",
      "enumValues": [
        "bottom",
        "top"
      ],
      "propertyEditorValues": {
        "bottom": {
          "displayName": "Bottom"
        },
        "top": {
          "displayName": "Top"
        }
      }
    },
    "dependencies": {
      "description": "An array of objects that defines dependencies between tasks. Also accepts a Promise that will resolve with an array for deferred data rendering. No data will be rendered if the Promise is rejected.",
      "type": "Array<Object>|Promise",
      "displayName": "Dependencies",
      "value": null,
      "help": "dependencies",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "id": {
              "description": "The identifier for the dependency line. This must be unique across all dependency lines in Gantt. The id should be set by the application if the dependency-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
              "type": "any"
            },
            "predecessorTaskId": {
              "description": "The identifier for the predecessor task. This must reference a task in Gantt.",
              "type": "any"
            },
            "shortDesc": {
              "description": "The description of the dependency line. This is used for accessibility.",
              "type": "string"
            },
            "successorTaskId": {
              "description": "The identifier for the successor task. This must reference a task in Gantt.",
              "type": "any"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes to apply to the dependency line.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the dependency line.",
              "type": "object"
            },
            "type": {
              "description": "The type of dependency. The following values are supported: finishStart: predecessor task must finish before successor task can start. finishFinish: predecessor task must finish before successor task can finish. startStart: predecessor task must start before successor task can start. startFinish: predecessor task must start before successor task can finish. ",
              "type": "\"startStart\"|\"startFinish\"|\"finishFinish\"|\"finishStart\"",
              "value": "\"finishStart\""
            }
          }
        }
      }
    },
    "dependencyData": {
      "description": "The oj.DataProvider for the dependencies of the gantt. It should provide data rows where each row maps data for a single gantt dependency line. The row key will be used as the id for dependency lines. Note that when using this attribute, a template for the dependencyTemplate slot should be provided.",
      "type": "oj.DataProvider",
      "displayName": "Dependency Data",
      "value": null,
      "help": "dependencyData"
    },
    "dnd": {
      "description": "Enables drag and drop functionality.",
      "type": "object",
      "displayName": "Dnd",
      "help": "dnd",
      "properties": {
        "move": {
          "description": "Defines a subset of high level configurations for moving elements to another location of some row within the gantt. See the dnd attribute for usage examples.",
          "type": "object",
          "displayName": "Move",
          "help": "dnd.move",
          "properties": {
            "tasks": {
              "description": "Enable or disable moving the non-baseline portions of tasks to a different location of some row within the same gantt using drag and drop or equivalent keyboard actions (See Keyboard End User Information). See also ojMove. See the dnd attribute for usage examples.",
              "type": "string",
              "displayName": "Tasks",
              "value": "disabled",
              "help": "dnd.move.tasks",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "description": "Disable moving tasks",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enable moving tasks",
                  "displayName": "Enabled"
                }
              }
            }
          }
        }
      }
    },
    "end": {
      "description": "The end time of the Gantt. A valid value is required in order for the Gantt to properly render. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "End",
      "value": "",
      "format": "date-time",
      "help": "end"
    },
    "gridlines": {
      "description": "An object specifying whether to display or hide the horizontal and vertical grid lines.",
      "type": "object",
      "displayName": "Gridlines",
      "help": "gridlines",
      "properties": {
        "horizontal": {
          "description": "Horizontal gridlines. The default value is \"auto\", which means Gantt will decide whether the grid lines should be made visible or hidden. See the gridlines attribute for usage examples.",
          "type": "string",
          "displayName": "Horizontal",
          "value": "auto",
          "help": "gridlines.horizontal",
          "enumValues": [
            "auto",
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "hidden": {
              "displayName": "Hidden"
            },
            "visible": {
              "displayName": "Visible"
            }
          }
        },
        "vertical": {
          "description": "Vertical gridlines. The default value is \"auto\", which means Gantt will decide whether the grid lines should be made visible or hidden. See the gridlines attribute for usage examples.",
          "type": "string",
          "displayName": "Vertical",
          "value": "auto",
          "help": "gridlines.vertical",
          "enumValues": [
            "auto",
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "hidden": {
              "displayName": "Hidden"
            },
            "visible": {
              "displayName": "Visible"
            }
          }
        }
      }
    },
    "majorAxis": {
      "description": "An object with the following properties, used to define the major time axis. If not specified, no major time axis is shown.",
      "type": "object",
      "displayName": "Major Axis",
      "help": "majorAxis",
      "properties": {
        "converter": {
          "description": "A converter (an object literal or instance that duck types Converter) used to format the labels of the major axis for all 'scale' values, or an object literal whose keys are 'scale' values that map specific converters for scale specific formatting (see ojTimeAxis.Converters). See DateTimeConverterFactory for details on creating built-in datetime converters. See the major-axis attribute for usage examples.",
          "type": "object",
          "displayName": "Converter",
          "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
          "help": "majorAxis.converter",
          "properties": {
            "default": {
              "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>"
            },
            "seconds": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric, minute: 2-digit, second: 2-digit})"
            },
            "minutes": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric, minute: 2-digit})"
            },
            "hours": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric})"
            },
            "days": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: numeric, day: 2-digit})"
            },
            "weeks": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: numeric, day: 2-digit})"
            },
            "months": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: long})"
            },
            "quarters": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: long})"
            },
            "years": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({year: numeric})"
            }
          }
        },
        "height": {
          "description": "Specifies the height of the major axis in pixels. If not specified or if the height specified is less than the inherent minimum height (which is a function of the axis label sizes), a default value will be used. Applications should make sure not to set heights that would make the total axes height too large for the viewport to accomodate. See the major-axis attribute for usage examples.",
          "type": "number",
          "displayName": "Height",
          "value": null,
          "units": "pixels",
          "help": "majorAxis.height"
        },
        "scale": {
          "description": "The time scale used for the major axis. See the major-axis attribute for usage examples.",
          "type": "string",
          "displayName": "Scale",
          "value": null,
          "help": "majorAxis.scale",
          "enumValues": [
            "days",
            "hours",
            "minutes",
            "months",
            "quarters",
            "seconds",
            "weeks",
            "years"
          ],
          "propertyEditorValues": {
            "days": {
              "displayName": "Days"
            },
            "hours": {
              "displayName": "Hours"
            },
            "minutes": {
              "displayName": "Minutes"
            },
            "months": {
              "displayName": "Months"
            },
            "quarters": {
              "displayName": "Quarters"
            },
            "seconds": {
              "displayName": "Seconds"
            },
            "weeks": {
              "displayName": "Weeks"
            },
            "years": {
              "displayName": "Years"
            }
          }
        },
        "zoomOrder": {
          "description": "An array of strings containing the names of scales used for zooming from longest to shortest. If not specified, the 'scale' specified on the axis will be used at all zoom levels. See the major-axis attribute for usage examples.",
          "type": "Array<string>",
          "displayName": "Zoom Order",
          "value": null,
          "help": "majorAxis.zoomOrder"
        }
      }
    },
    "minorAxis": {
      "description": "An object with the following properties, used to define the minor time axis. This is required in order for the Gantt to properly render.",
      "type": "object",
      "displayName": "Minor Axis",
      "help": "minorAxis",
      "properties": {
        "converter": {
          "description": "A converter (an object literal or instance that duck types Converter) used to format the labels of the minor axis for all 'scale' values, or an object literal whose keys are 'scale' values that map specific converters for scale specific formatting (see ojTimeAxis.Converters). See DateTimeConverterFactory for details on creating built-in datetime converters. See the minor-axis attribute for usage examples.",
          "type": "object",
          "displayName": "Converter",
          "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
          "help": "minorAxis.converter",
          "properties": {
            "default": {
              "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>"
            },
            "seconds": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric, minute: 2-digit, second: 2-digit})"
            },
            "minutes": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric, minute: 2-digit})"
            },
            "hours": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({hour: numeric})"
            },
            "days": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: numeric, day: 2-digit})"
            },
            "weeks": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: numeric, day: 2-digit})"
            },
            "months": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: long})"
            },
            "quarters": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({month: long})"
            },
            "years": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "oj.Converter<string>",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({year: numeric})"
            }
          }
        },
        "height": {
          "description": "Specifies the height of the minor axis in pixels. If not specified or if the height specified is less than the inherent minimum height (which is a function of the axis label sizes), a default value will be used. Applications should make sure not to set heights that would make the total axes height too large for the viewport to accomodate. See the minor-axis attribute for usage examples.",
          "type": "number",
          "displayName": "Height",
          "value": null,
          "units": "pixels",
          "help": "minorAxis.height"
        },
        "scale": {
          "description": "The time scale used for the minor axis. This is required in order for the Gantt to properly render. See the minor-axis attribute for usage examples.",
          "type": "string",
          "displayName": "Scale",
          "value": null,
          "help": "minorAxis.scale",
          "enumValues": [
            "days",
            "hours",
            "minutes",
            "months",
            "quarters",
            "seconds",
            "weeks",
            "years"
          ],
          "propertyEditorValues": {
            "days": {
              "displayName": "Days"
            },
            "hours": {
              "displayName": "Hours"
            },
            "minutes": {
              "displayName": "Minutes"
            },
            "months": {
              "displayName": "Months"
            },
            "quarters": {
              "displayName": "Quarters"
            },
            "seconds": {
              "displayName": "Seconds"
            },
            "weeks": {
              "displayName": "Weeks"
            },
            "years": {
              "displayName": "Years"
            }
          }
        },
        "zoomOrder": {
          "description": "An array of strings containing the names of scales used for zooming from longest to shortest. If not specified, the 'scale' specified on the axis will be used at all zoom levels. See the minor-axis attribute for usage examples.",
          "type": "Array<string>",
          "displayName": "Zoom Order",
          "value": null,
          "help": "minorAxis.zoomOrder"
        }
      }
    },
    "referenceObjects": {
      "description": "The array of reference objects associated with the gantt. For each reference object, a line is rendered at the specified value. Currently only the first reference object in the array is supported. Any additional objects supplied in the array will be ignored.",
      "type": "Array<Object>",
      "displayName": "Reference Objects",
      "value": [],
      "help": "referenceObjects",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the reference object.",
              "type": "object"
            },
            "value": {
              "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
              "type": "string"
            }
          }
        }
      }
    },
    "rowAxis": {
      "description": "An object defining properties for the row labels region.",
      "type": "object",
      "displayName": "Row Axis",
      "help": "rowAxis",
      "properties": {
        "label": {
          "description": "An object defining the properties of the row labels. See the row-axis attribute for usage examples.",
          "type": "object",
          "displayName": "Label",
          "help": "rowAxis.label",
          "properties": {
            "renderer": {
              "description": "An optional function that returns custom content for the row label. The custom content must be an SVG element. See the row-axis attribute for usage examples.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "rowAxis.label.renderer",
              "properties": {
                "parentElement": {
                  "description": "A parent group element that takes a custom SVG fragment as the row label content. Modifications of the parentElement are not supported.",
                  "type": "Element"
                },
                "rowData": {
                  "description": "The data for the row.",
                  "type": "oj.ojGantt.Row"
                },
                "itemData": {
                  "description": "An array of the data provider row data objects associated with the tasks belonging to the gantt row. This will only be set if an oj.DataProvider for task-data is being used.",
                  "type": "Array<Object>|null"
                },
                "componentElement": {
                  "description": "The gantt element.",
                  "type": "Element"
                },
                "maxWidth": {
                  "description": "The maximum available width in px, as constrained by the row-axis.width and row-axis.max-width values. If row-axis.width is 'max-content' and row-axis.max-width is 'none', then this is -1, and the component will automatically allocate enough width space to accommodate the content.",
                  "type": "number"
                },
                "maxHeight": {
                  "description": "The maximum available height in px.",
                  "type": "number"
                }
              }
            }
          }
        },
        "maxWidth": {
          "description": "Defines the maximum width of the region in pixels (e.g. '50px') or percent (e.g. '15%') of the element width. If 'none' is specified, then the width has no maximum value. Default labels will truncate to fit. See the row-axis attribute for usage examples.",
          "type": "string",
          "displayName": "Max Width",
          "value": "none",
          "help": "rowAxis.maxWidth"
        },
        "rendered": {
          "description": "Defines whether row labels are rendered. See the row-axis attribute for usage examples.",
          "type": "string",
          "displayName": "Rendered",
          "value": "off",
          "help": "rowAxis.rendered",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "width": {
          "description": "Defines the width of the region in pixels (e.g. '50px') or percent (e.g. '15%') of the element width. If 'max-content' is specified, then the intrinsic width of the widest label content is used. Default labels will truncate to fit. See the row-axis attribute for usage examples.",
          "type": "string",
          "displayName": "Width",
          "value": "max-content",
          "help": "rowAxis.width"
        }
      }
    },
    "rowDefaults": {
      "description": "An object with the following properties, used to define default styling for rows in the Gantt.",
      "type": "object",
      "displayName": "Row Defaults",
      "help": "rowDefaults",
      "properties": {
        "height": {
          "description": "The height of the row in pixels. If specified, overlapping tasks do not stagger. Since task heights can also be set, via the task-defaults.height attribute or in the data definition, applications typically should make sure that their task heights are less than the row height. If not specified, a default height is calculated based on the height of the tasks within the row, and overlapping tasks stagger. See the row-defaults attribute for usage examples.",
          "type": "number",
          "displayName": "Height",
          "value": null,
          "units": "pixels",
          "help": "rowDefaults.height"
        }
      }
    },
    "rows": {
      "description": "An array of objects with the following properties, used to define rows and tasks within rows. Also accepts a Promise that will resolve with an array for deferred data rendering. No data will be rendered if the Promise is rejected.",
      "type": "Array<Object>|Promise",
      "displayName": "Rows",
      "value": null,
      "help": "rows",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "id": {
              "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
              "type": "any"
            },
            "label": {
              "description": "The label associated with the row.",
              "type": "string"
            },
            "labelStyle": {
              "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
              "type": "object"
            },
            "tasks": {
              "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
              "type": "Array<oj.ojGantt.RowTask>"
            }
          }
        }
      }
    },
    "scrollPosition": {
      "description": "The current scroll position of Gantt. The scroll position is updated when the vertical scroll position has changed. The value contains the y scroll position, the index of the row closest to the top of the viewport, and the vertical offset from the position of the row to the actual scroll position. The default value contains just the scroll position. If there is no data then the 'rowIndex' sub-property will not be available. When setting the scrollPosition property, applications can change any combination of the sub-properties. If multiple sub-properties are set at once they will be used in rowIndex, pixel order where the latter serves as hints. If offsetY is specified, it will be used to adjust the scroll position from the position where the index of the row is located. If a sparse object is set the other sub-properties will be populated and updated once Gantt has scrolled to that position. ",
      "type": "object",
      "displayName": "Scroll Position",
      "value": {
        "y": 0
      },
      "writeback": true,
      "help": "scrollPosition",
      "properties": {
        "offsetY": {
          "description": "The vertical offset in pixel relative to the row identified by scroll-position.rowIndex. See the scroll-position attribute for usage examples.",
          "type": "number",
          "displayName": "Offset Y",
          "value": null,
          "units": "pixels",
          "help": "scrollPosition.offsetY"
        },
        "rowIndex": {
          "description": "The zero-based index of the row. See the scroll-position attribute for usage examples.",
          "type": "number",
          "displayName": "Row Index",
          "value": null,
          "help": "scrollPosition.rowIndex"
        },
        "y": {
          "description": "The vertical position in pixel. See the scroll-position attribute for usage examples.",
          "type": "number",
          "displayName": "Y",
          "value": 0,
          "units": "pixels",
          "help": "scrollPosition.y"
        }
      }
    },
    "selection": {
      "description": "An array of strings containing the ids of the initially selected tasks.",
      "type": "Array<any>",
      "displayName": "Selection",
      "value": [],
      "writeback": true,
      "help": "selection"
    },
    "selectionMode": {
      "description": "The type of selection behavior that is enabled on the Gantt. If 'single' is specified, only a single task can be selected at once. If 'multiple', any number of tasks can be selected at once. Otherwise, selection is disabled.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "help": "selectionMode",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "start": {
      "description": "The start time of the Gantt. A valid value is required in order for the Gantt to properly render. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Start",
      "value": "",
      "format": "date-time",
      "help": "start"
    },
    "taskData": {
      "description": "The oj.DataProvider for the tasks of the gantt. It should provide data rows where each row maps data for a single gantt task. The row key will be used as the id for gantt tasks. Note that when using this attribute, a template for the taskTemplate slot should be provided. Additionally providing a template for the rowTemplate slot for generating the gantt row properties is optional.",
      "type": "oj.DataProvider",
      "displayName": "Task Data",
      "value": null,
      "help": "taskData"
    },
    "taskDefaults": {
      "description": "An object with the following properties, used to define default styling for tasks in the Gantt. Properties specified on this object may be overridden by specifications on individual tasks.",
      "type": "object",
      "displayName": "Task Defaults",
      "help": "taskDefaults",
      "properties": {
        "baseline": {
          "description": "An object with the following properties, used to define default styling for task baseline elements. See the task-defaults attribute for usage examples.",
          "type": "object",
          "displayName": "Baseline",
          "help": "taskDefaults.baseline",
          "properties": {
            "borderRadius": {
              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute. See the task-defaults attribute for usage examples.",
              "type": "string",
              "displayName": "Border Radius",
              "value": "0",
              "help": "taskDefaults.baseline.borderRadius"
            },
            "height": {
              "description": "The height of the baseline in pixels. If not specified, a default height is used depending on the baseline type. See the task-defaults attribute for usage examples.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "taskDefaults.baseline.height"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the baseline. See the task-defaults attribute for usage examples.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "taskDefaults.baseline.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the baseline. See the task-defaults attribute for usage examples.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "taskDefaults.baseline.svgStyle"
            }
          }
        },
        "borderRadius": {
          "description": "The border radius of the task. Accepts values allowed in CSS border-radius attribute. See the task-defaults attribute for usage examples.",
          "type": "string",
          "displayName": "Border Radius",
          "value": "0",
          "help": "taskDefaults.borderRadius"
        },
        "height": {
          "description": "The height of the task in pixels. If not specified, a default height is used depending on the task type, and whether the baseline is specified. Since row heights can also be set via the row-defaults.height attribute, applications typically should make sure that their task heights are less than the row height. See the task-defaults attribute for usage examples.",
          "type": "number",
          "displayName": "Height",
          "value": null,
          "units": "pixels",
          "help": "taskDefaults.height"
        },
        "labelPosition": {
          "description": "The position of the label relative to the task, or a priority order of label positions for the component to automatically choose from.",
          "type": "string|Array<string>",
          "displayName": "Label Position",
          "value": [
            "end",
            "innerCenter",
            "start",
            "max"
          ],
          "help": "taskDefaults.labelPosition",
          "enumValues": [
            "end",
            "innerCenter",
            "innerEnd",
            "innerStart",
            "none",
            "start"
          ],
          "propertyEditorValues": {
            "end": {
              "displayName": "End"
            },
            "innerCenter": {
              "displayName": "Inner Center"
            },
            "innerEnd": {
              "displayName": "Inner End"
            },
            "innerStart": {
              "displayName": "Inner Start"
            },
            "none": {
              "displayName": "None"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "progress": {
          "description": "An object with the following properties, used to define default styling for progress bars on non-milestone tasks. See the task-defaults attribute for usage examples.",
          "type": "object",
          "displayName": "Progress",
          "help": "taskDefaults.progress",
          "properties": {
            "borderRadius": {
              "description": "The border radius of the progress bar. Accepts values allowed in CSS border-radius attribute. See the task-defaults attribute for usage examples.",
              "type": "string",
              "displayName": "Border Radius",
              "value": "0",
              "help": "taskDefaults.progress.borderRadius"
            },
            "height": {
              "description": "Specifies the height of the progress bar in pixels (e.g. '50px') or percent of the associated task bar (e.g. '15%'). See the task-defaults attribute for usage examples.",
              "type": "string",
              "displayName": "Height",
              "value": "100%",
              "help": "taskDefaults.progress.height"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes to apply to the progress bar. Note that only CSS style applicable to SVG elements can be used. See the task-defaults attribute for usage examples.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "taskDefaults.progress.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS inline style to apply to the progress bar. Only CSS style applicable to SVG elements can be used. See the task-defaults attribute for usage examples.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "taskDefaults.progress.svgStyle"
            }
          }
        },
        "svgClassName": {
          "description": "A space delimited list of CSS style classes defining the style of the task. See the task-defaults attribute for usage examples.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "taskDefaults.svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style defining the style of the task. See the task-defaults attribute for usage examples.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "taskDefaults.svgStyle"
        },
        "type": {
          "description": "The type of task to be rendered.",
          "type": "string",
          "displayName": "Type",
          "value": "auto",
          "help": "taskDefaults.type",
          "enumValues": [
            "auto",
            "milestone",
            "normal",
            "summary"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "milestone": {
              "displayName": "Milestone"
            },
            "normal": {
              "displayName": "Normal"
            },
            "summary": {
              "displayName": "Summary"
            }
          }
        }
      }
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "help": "tooltip",
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip. Note that the default is for a tooltip to be displayed. See the tooltip attribute for usage examples.",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "tooltip.renderer",
          "properties": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered task.",
              "type": "oj.ojGantt.RowTask"
            },
            "rowData": {
              "description": "The data for the row the hovered task belongs to.",
              "type": "oj.ojGantt.Row"
            },
            "itemData": {
              "description": "The data provider row data object for the hovered task. This will only be set if an oj.DataProvider for task-data is being used.",
              "type": "object|null"
            },
            "componentElement": {
              "description": "The gantt element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered task.",
              "type": "string"
            }
          }
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "accessibleDependencyInfo": {
          "description": "Provides properties to customize the screen reader text describing a specific dependency.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Accessible Dependency Info",
          "help": "translations.accessibleDependencyInfo"
        },
        "accessiblePredecessorInfo": {
          "description": "Provides properties to customize the screen reader text describing predecessors of a task.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Accessible Predecessor Info",
          "help": "translations.accessiblePredecessorInfo"
        },
        "accessibleSuccessorInfo": {
          "description": "Provides properties to customize the screen reader text describing successors of a task.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Accessible Successor Info",
          "help": "translations.accessibleSuccessorInfo"
        },
        "accessibleTaskTypeMilestone": {
          "description": "Used to describe milestone task type for accessibility.\n\nSee the translations property for usage examples.",
          "type": "string",
          "displayName": "Accessible Task Type Milestone",
          "help": "translations.accessibleTaskTypeMilestone"
        },
        "accessibleTaskTypeSummary": {
          "description": "Used to describe summary task type for accessibility.\n\nSee the translations property for usage examples.",
          "type": "string",
          "displayName": "Accessible Task Type Summary",
          "help": "translations.accessibleTaskTypeSummary"
        },
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "finishFinishDependencyAriaDesc": {
          "description": "Used to describe finish to finish dependency type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Finish Finish Dependency Aria Desc",
          "help": "translations.finishFinishDependencyAriaDesc"
        },
        "finishStartDependencyAriaDesc": {
          "description": "Used to describe finish to start dependency type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Finish Start Dependency Aria Desc",
          "help": "translations.finishStartDependencyAriaDesc"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelBaselineDate": {
          "description": "Used for the default tooltip label for baseline milestone information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Baseline Date",
          "help": "translations.labelBaselineDate"
        },
        "labelBaselineEnd": {
          "description": "Used for the default tooltip label for baseline end time information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Baseline End",
          "help": "translations.labelBaselineEnd"
        },
        "labelBaselineStart": {
          "description": "Used for the default tooltip label for baseline start time information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Baseline Start",
          "help": "translations.labelBaselineStart"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelDate": {
          "description": "Used for the default tooltip label for milestone information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Date",
          "help": "translations.labelDate"
        },
        "labelEnd": {
          "description": "Used for the default tooltip label for end time information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label End",
          "help": "translations.labelEnd"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelLabel": {
          "description": "Used for the default tooltip label for task label information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Label",
          "help": "translations.labelLabel"
        },
        "labelMoveBy": {
          "description": "Used for the default tooltip label for task move scale change.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Move By",
          "help": "translations.labelMoveBy"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "labelProgress": {
          "description": "Used for the default tooltip label for task progress information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Progress",
          "help": "translations.labelProgress"
        },
        "labelRow": {
          "description": "Used for the default tooltip label for row information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Row",
          "help": "translations.labelRow"
        },
        "labelStart": {
          "description": "Used for the default tooltip label for start time information.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Start",
          "help": "translations.labelStart"
        },
        "startFinishDependencyAriaDesc": {
          "description": "Used to describe start to finish dependency type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Start Finish Dependency Aria Desc",
          "help": "translations.startFinishDependencyAriaDesc"
        },
        "startStartDependencyAriaDesc": {
          "description": "Used to describe start to start dependency type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Start Start Dependency Aria Desc",
          "help": "translations.startStartDependencyAriaDesc"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        },
        "taskMoveCancelled": {
          "description": "Used to indicate task move is finalized for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Task Move Cancelled",
          "help": "translations.taskMoveCancelled"
        },
        "taskMoveFinalized": {
          "description": "Used to indicate task move is finalized for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Task Move Finalized",
          "help": "translations.taskMoveFinalized"
        },
        "taskMoveInitiated": {
          "description": "Used to indicate task move is initiated for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Task Move Initiated",
          "help": "translations.taskMoveInitiated"
        },
        "taskMoveInitiatedInstruction": {
          "description": "Used to indicate task move is initiated for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Task Move Initiated Instruction",
          "help": "translations.taskMoveInitiatedInstruction"
        },
        "taskMoveSelectionInfo": {
          "description": "Used to indicate task move is initiated for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Task Move Selection Info",
          "help": "translations.taskMoveSelectionInfo"
        },
        "tooltipZoomIn": {
          "description": "Used for the zoom in tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Tooltip Zoom In",
          "help": "translations.tooltipZoomIn"
        },
        "tooltipZoomOut": {
          "description": "Used for the zoom out tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Tooltip Zoom Out",
          "help": "translations.tooltipZoomOut"
        }
      }
    },
    "valueFormats": {
      "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to task properties.",
      "type": "object",
      "displayName": "Value Formats",
      "help": "valueFormats",
      "properties": {
        "baselineDate": {
          "description": "Specifies tooltip behavior for the date value of the milestone baseline. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Baseline Date",
          "help": "valueFormats.baselineDate",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. If not specified, a default converter depending on the axes scale is used. See DateTimeConverterFactory for details on creating built-in datetime converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "valueFormats.baselineDate.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.baselineDate.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelBaselineDate. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.baselineDate.tooltipLabel"
            }
          }
        },
        "baselineEnd": {
          "description": "Specifies tooltip behavior for the end value of the baseline. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Baseline End",
          "help": "valueFormats.baselineEnd",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. If not specified, a default converter depending on the axes scale is used. See DateTimeConverterFactory for details on creating built-in datetime converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "valueFormats.baselineEnd.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.baselineEnd.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelBaselineEnd. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.baselineEnd.tooltipLabel"
            }
          }
        },
        "baselineStart": {
          "description": "Specifies tooltip behavior for the start value of the baseline. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Baseline Start",
          "help": "valueFormats.baselineStart",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. If not specified, a default converter depending on the axes scale is used. See DateTimeConverterFactory for details on creating built-in datetime converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "valueFormats.baselineStart.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.baselineStart.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelBaselineStart. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.baselineStart.tooltipLabel"
            }
          }
        },
        "date": {
          "description": "Specifies tooltip behavior for the date value of a milestone task. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Date",
          "help": "valueFormats.date",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. If not specified, a default converter depending on the axes scale is used. See DateTimeConverterFactory for details on creating built-in datetime converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "valueFormats.date.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.date.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelDate. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.date.tooltipLabel"
            }
          }
        },
        "end": {
          "description": "Specifies tooltip behavior for the end value. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "End",
          "help": "valueFormats.end",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. If not specified, a default converter depending on the axes scale is used. See DateTimeConverterFactory for details on creating built-in datetime converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "valueFormats.end.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.end.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelEnd. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.end.tooltipLabel"
            }
          }
        },
        "label": {
          "description": "Specifies tooltip behavior for the label value. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Label",
          "help": "valueFormats.label",
          "properties": {
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.label.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelLabel. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.label.tooltipLabel"
            }
          }
        },
        "progress": {
          "description": "Specifies tooltip behavior for the progress value. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Progress",
          "help": "valueFormats.progress",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. See NumberConverterFactory for details on creating built-in number converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_NUMBER).createConverter({style: 'percent'})",
              "help": "valueFormats.progress.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.progress.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelProgress. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.progress.tooltipLabel"
            }
          }
        },
        "row": {
          "description": "Specifies tooltip behavior for the row value. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Row",
          "help": "valueFormats.row",
          "properties": {
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.row.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelRow. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.row.tooltipLabel"
            }
          }
        },
        "start": {
          "description": "Specifies tooltip behavior for the start value. See the value-formats attribute for usage examples.",
          "type": "object",
          "displayName": "Start",
          "help": "valueFormats.start",
          "properties": {
            "converter": {
              "description": "A converter (an object literal or instance that duck types Converter) used to format the label. If not specified, a default converter depending on the axes scale is used. See DateTimeConverterFactory for details on creating built-in datetime converters. See the value-formats attribute for usage examples.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "valueFormats.start.converter"
            },
            "tooltipDisplay": {
              "description": "Whether the value is displayed in the tooltip. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Display",
              "value": "auto",
              "help": "valueFormats.start.tooltipDisplay",
              "enumValues": [
                "auto",
                "off"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "tooltipLabel": {
              "description": "A string representing the label that is displayed before the value in the tooltip. The default value comes from ojGantt.translations.labelStart. See the value-formats attribute for usage examples.",
              "type": "string",
              "displayName": "Tooltip Label",
              "translatable": true,
              "help": "valueFormats.start.tooltipLabel"
            }
          }
        }
      }
    },
    "viewportEnd": {
      "description": "The end time of the Gantt's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the Gantt. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Viewport End",
      "value": "",
      "format": "date-time",
      "help": "viewportEnd"
    },
    "viewportStart": {
      "description": "The start time of the Gantt's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the Gantt. See Date and Time Formats for more details on the required string formats.",
      "type": "string",
      "displayName": "Viewport Start",
      "value": "",
      "format": "date-time",
      "help": "viewportStart"
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojViewportChange": {
      "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
      "bubbles": true,
      "help": "viewportChange",
      "detail": {
        "viewportStart": {
          "description": "the start of the new viewport on a gantt chart",
          "type": "string"
        },
        "viewportEnd": {
          "description": "the end of the new viewport on a gantt chart",
          "type": "string"
        },
        "majorAxisScale": {
          "description": "the time scale of the majorAxis",
          "type": "string"
        },
        "minorAxisScale": {
          "description": "the time scale of the minorAxis",
          "type": "string"
        }
      }
    },
    "ojMove": {
      "description": "Triggered after tasks are moved to a different location of some row within the gantt via drag and drop or equivalent keyboard actions (See Keyboard End User Information). See also the dnd.move.tasks attribute.",
      "bubbles": true,
      "help": "move",
      "detail": {
        "taskContexts": {
          "description": "An array of dataContexts of the moved tasks. The first dataContext of the array corresponds to the source task where the move was initiated (e.g. the task directly under the mouse when drag started).",
          "type": "Array<Object>",
          "extension": {
            "vbcs": {
              "itemProperties": {
                "data": {
                  "description": "The data object of the source task.",
                  "type": "oj.ojGantt.RowTask"
                },
                "rowData": {
                  "description": "The data for the row the source task belongs to.",
                  "type": "oj.ojGantt.Row"
                },
                "itemData": {
                  "description": "The data provider row data object for the source task. This will only be set if an oj.DataProvider for task-data is being used.",
                  "type": "object|null"
                },
                "color": {
                  "description": "The color of the source task.",
                  "type": "string"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value at the target position the source task is moved to. See Date and Time Formats for more details on the ISO string format.",
          "type": "string"
        },
        "start": {
          "description": "The start value of the task, if the source task were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
          "type": "string"
        },
        "end": {
          "description": "The end value of the task, if the source task were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
          "type": "string"
        },
        "baselineStart": {
          "description": "The start value of the baseline, if the source task were to move to the target position. This is null if baseline is not defined on the task. See Date and Time Formats for more details on the ISO string format.",
          "type": "string"
        },
        "baselineEnd": {
          "description": "The end value of the baseline, if the source task were to move to the target position. This is null if baseline is not defined on the task. See Date and Time Formats for more details on the ISO string format.",
          "type": "string"
        },
        "rowContext": {
          "description": "The data context for the row at the target position.",
          "type": "object",
          "properties": {
            "rowData": {
              "description": "The data for the target row.",
              "type": "oj.ojGantt.Row"
            },
            "componentElement": {
              "description": "The gantt element.",
              "type": "Element"
            }
          }
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "dependencyTemplate": {
      "description": "The dependencyTemplate slot is used to specify the template for creating each dependency line of the gantt. The slot must be a <template> element. The content of the template should only be one <oj-gantt-dependency> element. The reference data provider is that of the dependency-data attribute. See the [oj-gantt-dependency]ojGanttDependency doc for more details. When the template is executed for each task, it will have access to the gantt's binding context containing the following properties: $current - an object that contains information for the current dependency. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current. ",
      "maxItems": 1,
      "help": "dependencyTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-gantt> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current dependency",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent dependency",
          "type": "number"
        },
        "key": {
          "description": "The key of the current dependency",
          "type": "any"
        }
      }
    },
    "rowTemplate": {
      "description": "The rowTemplate slot is used to specify the template for generating the row properties of the gantt. The slot must be a <template> element. The content of the template should only be one <oj-gantt-row> element.See the [oj-gantt-row]ojGanttRow doc for more details. See also the taskTemplate regarding showing empty rows. Note that the rows will render following the order in which they are found in the data. When the template is executed for each row, it will have access to the gantt's binding context containing the following properties: $current - an object that contains information for the current row. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current. ",
      "maxItems": 1,
      "help": "rowTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-gantt> custom element",
          "type": "Element"
        },
        "index": {
          "description": "The row index",
          "type": "number"
        },
        "id": {
          "description": "The row id, if specified in the task template. Otherwise, it's the single task per row case, and this would be the task id.",
          "type": "any"
        },
        "tasks": {
          "description": "The array of objects which are gantt tasks that belong to this row. The objects will have the following properties",
          "type": "Array<Object>",
          "extension": {
            "vbcs": {
              "itemProperties": {
                "data": {
                  "description": "The data object for the task",
                  "type": "object"
                },
                "index": {
                  "description": "The zero-based index of the task",
                  "type": "number"
                },
                "key": {
                  "description": "The key of the task",
                  "type": "any"
                }
              }
            }
          }
        }
      }
    },
    "taskTemplate": {
      "description": "The taskTemplate slot is used to specify the template for creating each task of the gantt. The slot must be a <template> element. The content of the template should only be one <oj-gantt-task> element. The reference data provider is that of the task-data attribute. See the [oj-gantt-task]ojGanttTask doc for more details. The [row-id]ojGanttTask#rowId is optional if there is only one task in the row for every row; otherwise it must be specified. Note that if invalid values for both task start and end are specified, then the task is not rendered; if all the tasks belonging to a row are not rendered, the row will appear as an empty row. When the template is executed for each task, it will have access to the gantt's binding context containing the following properties: $current - an object that contains information for the current task. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current. ",
      "maxItems": 1,
      "help": "taskTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-gantt> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object for the current task",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent task",
          "type": "number"
        },
        "key": {
          "description": "The key of the current task",
          "type": "any"
        }
      }
    }
  }
}