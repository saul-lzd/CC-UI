{
  "name": "oj-input-time",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Input Time",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-form-control-text-align-right"
      ],
      "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
    },
    {
      "styleGroup": [
        "oj-form-control-text-align-start"
      ],
      "description": "Aligns the text to the left in ltr and to the right in rtl"
    },
    {
      "styleGroup": [
        "oj-form-control-text-align-end"
      ],
      "description": "Aligns the text to the right in ltr and to the left in rtl"
    }
  ],
  "description": "Provides basic support for specifying a time value.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojInputTime.html",
  "properties": {
    "asyncValidators": {
      "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n",
      "type": "Array<Object>",
      "displayName": "Async Validators",
      "value": [],
      "help": "asyncValidators"
    },
    "autocomplete": {
      "description": "Dictates component's autocomplete state.",
      "type": "string",
      "displayName": "Autocomplete",
      "value": "on",
      "help": "autocomplete"
    },
    "autofocus": {
      "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document.",
      "type": "boolean",
      "displayName": "Autofocus",
      "value": false,
      "help": "autofocus"
    },
    "converter": {
      "description": "Default converter for InputTime If one wishes to provide a custom converter for the InputTime override the factory returned for oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME) \nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n",
      "type": "object",
      "displayName": "Converter",
      "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({\"hour\": \"2-digit\", \"minute\": \"2-digit\"})",
      "help": "converter",
      "properties": {
        "type": {
          "description": "the name of the factory registered converter",
          "type": "string"
        },
        "options": {
          "description": "options to the converter",
          "type": "object"
        }
      }
    },
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By",
      "help": "describedBy"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false,
      "help": "disabled"
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "object",
      "displayName": "Display Options",
      "help": "displayOptions",
      "properties": {
        "converterHint": {
          "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Converter Hint",
          "value": [
            "placeholder",
            "notewindow"
          ],
          "help": "displayOptions.converterHint"
        },
        "helpInstruction": {
          "description": "Display options for auxilliary help instruction text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Help Instruction",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.helpInstruction"
        },
        "messages": {
          "description": "Display options for auxilliary message text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Messages",
          "value": [
            "inline"
          ],
          "help": "displayOptions.messages"
        },
        "validatorHint": {
          "description": "Display options for auxilliary validator hint text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Validator Hint",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.validatorHint"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "object",
      "displayName": "Help",
      "help": "help",
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is \"\".",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
      "type": "object",
      "displayName": "Help Hints",
      "translatable": true,
      "help": "helpHints",
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label.",
          "type": "string",
          "displayName": "Definition",
          "value": "",
          "help": "helpHints.definition"
        },
        "source": {
          "description": "Hint for help source URL associated with the label.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "helpHints.source"
        }
      }
    },
    "keyboardEdit": {
      "description": "Determines if keyboard entry of the text is allowed. When disabled the picker must be used to select a time. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"disabled\" and it's \"enabled\" for alta web theme.",
      "type": "string",
      "displayName": "Keyboard Edit",
      "help": "keyboardEdit",
      "enumValues": [
        "disabled",
        "enabled"
      ],
      "propertyEditorValues": {
        "disabled": {
          "description": "Changing the time can only be done with the picker.",
          "displayName": "Disabled"
        },
        "enabled": {
          "description": "Allow keyboard entry of the time.",
          "displayName": "Enabled"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true,
      "help": "labelHint"
    },
    "max": {
      "description": "The maximum selectable time. When set to null, there is no maximum. type string - ISOString null - no limit ",
      "type": "string|null",
      "displayName": "Max",
      "value": null,
      "format": "time",
      "help": "max"
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true,
      "help": "messagesCustom"
    },
    "min": {
      "description": "The minimum selectable time. When set to null, there is no minimum. type string - ISOString null - no limit ",
      "type": "string|null",
      "displayName": "Min",
      "value": null,
      "format": "time",
      "help": "min"
    },
    "name": {
      "description": "It indicates the name of the component.",
      "type": "string",
      "displayName": "Name",
      "value": "",
      "help": "name"
    },
    "pickerAttributes": {
      "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect.",
      "type": "object",
      "displayName": "Picker Attributes",
      "value": null,
      "help": "pickerAttributes",
      "properties": {
        "style": {
          "description": "",
          "type": "string"
        },
        "class": {
          "description": "",
          "type": "string"
        }
      }
    },
    "placeholder": {
      "description": "The placeholder text to set on the element.",
      "type": "string",
      "displayName": "Placeholder",
      "help": "placeholder"
    },
    "rawValue": {
      "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly.",
      "type": "string",
      "displayName": "Raw Value",
      "writeback": true,
      "readOnly": true,
      "help": "rawValue"
    },
    "readonly": {
      "description": "Dictates component's readonly state.",
      "type": "boolean",
      "displayName": "Readonly",
      "value": false,
      "help": "readonly"
    },
    "renderMode": {
      "description": "Allows applications to specify whether to render time picker in JET or as a native picker control. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"native\" and it's \"jet\" for alta web theme.",
      "type": "string",
      "displayName": "Render Mode",
      "help": "renderMode",
      "enumValues": [
        "jet",
        "native"
      ],
      "propertyEditorValues": {
        "jet": {
          "description": "Applications get full JET functionality.",
          "displayName": "Jet"
        },
        "native": {
          "description": "Applications get the functionality of the native picker. Note that the native picker support is limited to Cordova plugin published at 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'. With native renderMode, the functionality that is sacrificed compared to jet renderMode are: Time picker cannot be themed Accessibility is limited to what the native picker supports pickerAttributes is not applied Sub-IDs are not available hide() function is no-op translations sub properties pertaining to the picker is not available 'timePicker.timeIncrement' property is limited to iOS and will only take a precision of minutes ",
          "displayName": "Native"
        }
      }
    },
    "required": {
      "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute.",
      "type": "boolean",
      "displayName": "Required",
      "value": false,
      "help": "required"
    },
    "timePicker": {
      "description": "Note that Jet framework prohibits setting subset of properties which are object types. For example myInputTime.timePicker = {timeIncrement: \"00:30:00:00\"}; is prohibited as it will wipe out all other sub-properties for \"timePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"timePicker\" object, modify the necessary sub-property and pass it to above syntax. Note that when renderMode is 'native', the only timePicker sub-properties available are showOn and, to a limited extent, timeIncrement.",
      "type": "object",
      "displayName": "Time Picker",
      "help": "timePicker",
      "properties": {
        "footerLayout": {
          "description": "Will dictate what content is shown within the footer of the wheel timepicker. See the time-picker attribute for usage examples.",
          "type": "string",
          "displayName": "Footer Layout",
          "value": "",
          "help": "timePicker.footerLayout",
          "enumValues": [
            "",
            "now"
          ],
          "propertyEditorValues": {
            "": {
              "description": "Do not show anything",
              "displayName": ""
            },
            "now": {
              "description": "Show the now button",
              "displayName": "Now"
            }
          }
        },
        "showOn": {
          "description": "When the timepicker should be shown. See the time-picker attribute for usage examples.",
          "type": "string",
          "displayName": "Show On",
          "value": "focus",
          "help": "timePicker.showOn",
          "enumValues": [
            "focus",
            "image"
          ],
          "propertyEditorValues": {
            "focus": {
              "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
              "displayName": "Focus"
            },
            "image": {
              "description": "when the trigger clock image is clicked",
              "displayName": "Image"
            }
          }
        },
        "timeIncrement": {
          "description": "Time increment to be used for InputTime, the format is hh:mm:ss:SS. Note that when renderMode is 'native', timeIncrement property is limited to iOS and will only take a precision of minutes. See the time-picker attribute for usage examples.",
          "type": "string",
          "displayName": "Time Increment",
          "value": "00:05:00:00",
          "help": "timePicker.timeIncrement"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "ampmWheelLabel": {
          "description": "Label for the AMPM wheel for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Ampm Wheel Label",
          "help": "translations.ampmWheelLabel"
        },
        "cancelText": {
          "description": "The text to the cancel button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Cancel Text",
          "help": "translations.cancelText"
        },
        "currentTimeText": {
          "description": "The text to display for the current time link.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Current Time Text",
          "help": "translations.currentTimeText"
        },
        "dateTimeRange": {
          "description": "Provides properties to customize the hint and message text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
          "type": "object",
          "displayName": "Date Time Range",
          "help": "translations.dateTimeRange",
          "properties": {
            "hint": {
              "description": "Provides properties to customize the hint text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
              "type": "object",
              "displayName": "Hint",
              "help": "translations.dateTimeRange.hint",
              "properties": {
                "inRange": {
                  "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nhint.inRange is shown when both min and max are set, and is used\nto tell the user the allowed number range.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "In Range",
                  "help": "translations.dateTimeRange.hint.inRange"
                },
                "max": {
                  "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nhint.max is shown when max is set and min is not set, and is used\nto tell the user the allowed maximum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "Max",
                  "help": "translations.dateTimeRange.hint.max"
                },
                "min": {
                  "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nhint.min is shown when min is set and max is not set, and is used\nto tell the user the allowed minimum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "Min",
                  "help": "translations.dateTimeRange.hint.min"
                }
              }
            },
            "messageDetail": {
              "description": "Provides properties to customize the error message text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
              "type": "object",
              "displayName": "Message Detail",
              "help": "translations.dateTimeRange.messageDetail",
              "properties": {
                "rangeOverflow": {
                  "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageDetail.rangeOverflow is shown when max is set, and the\nvalue is greater than the maximum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "Range Overflow",
                  "help": "translations.dateTimeRange.messageDetail.rangeOverflow"
                },
                "rangeUnderflow": {
                  "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageDetail.rangeUnderflow is shown when min is set, and the\nvalue is less than the minimum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "Range Underflow",
                  "help": "translations.dateTimeRange.messageDetail.rangeUnderflow"
                }
              }
            },
            "messageSummary": {
              "description": "Provides properties to customize the error message summary text used by the\nimplicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\n\nSee the translations attribute for usage examples.",
              "type": "object",
              "displayName": "Message Summary",
              "help": "translations.dateTimeRange.messageSummary",
              "properties": {
                "rangeOverflow": {
                  "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageSummary.rangeOverflow is shown when max is set, and the\nvalue is greater than the maximum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "Range Overflow",
                  "help": "translations.dateTimeRange.messageSummary.rangeOverflow"
                },
                "rangeUnderflow": {
                  "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.\nmessageSummary.rangeUnderflow is shown when min is set, and\nthe value is less than the minimum.\n\nSee the translations attribute for usage examples.",
                  "type": "string",
                  "displayName": "Range Underflow",
                  "help": "translations.dateTimeRange.messageSummary.rangeUnderflow"
                }
              }
            }
          }
        },
        "hourWheelLabel": {
          "description": "Label for the Hour wheel for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Hour Wheel Label",
          "help": "translations.hourWheelLabel"
        },
        "minuteWheelLabel": {
          "description": "Label for the Minute wheel for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Minute Wheel Label",
          "help": "translations.minuteWheelLabel"
        },
        "okText": {
          "description": "The text to the OK button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Ok Text",
          "help": "translations.okText"
        },
        "regexp": {
          "description": "Provides properties to customize the message text used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
          "type": "object",
          "displayName": "Regexp",
          "help": "translations.regexp",
          "properties": {
            "messageDetail": {
              "description": "Provides properties to customize the error message detail used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail",
              "help": "translations.regexp.messageDetail"
            },
            "messageSummary": {
              "description": "Provides properties to customize the error message summary used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary",
              "help": "translations.regexp.messageSummary"
            }
          }
        },
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "object",
          "displayName": "Required",
          "help": "translations.required",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Hint",
              "help": "translations.required.hint"
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail",
              "help": "translations.required.messageDetail"
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary",
              "help": "translations.required.messageSummary"
            }
          }
        },
        "tooltipTime": {
          "description": "Tooltip text for the time icon.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Tooltip Time",
          "help": "translations.tooltipTime"
        },
        "tooltipTimeDisabled": {
          "description": "Tooltip text for the time icon when the component is disabled.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Tooltip Time Disabled",
          "help": "translations.tooltipTimeDisabled"
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "help": "valid",
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "validators": {
      "description": "List of validators used by element along with the implicit component validators when performing validation. Each item is either an instance that duck types Validator, or is an Object literal containing the properties listed below. Implicit validators are created by the element when certain attributes are present. For example, if the required attribute is set, an implicit RequiredValidator is created. If the min and/or max attribute is set, an implicit DateTimeRangeValidator may be created. At runtime when the component runs validation, it combines all the implicit validators with all the validators specified through this validators attribute, and runs all of them. Hints exposed by validators are shown in the notewindow by default, or as determined by the 'validatorHint' property set on the displayOptions property. When validators property changes due to programmatic intervention, the element may decide to clear messages and run validation, based on the current state it is in. Steps Performed Always The cached list of validator instances are cleared and new validator hints is pushed to messaging. E.g., notewindow displays the new hint(s). Running Validation if element is valid when validators changes, element does nothing other than the steps it always performs. if element is invalid and is showing messages when validators changes then all element messages are cleared and full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors. if element is invalid and has deferred messages when validators changes, it does nothing other than the steps it performs always. Clearing Messages Only messages created by the element are cleared. messagesCustom property is not cleared. ",
      "type": "Array<Object>",
      "displayName": "Validators",
      "value": [],
      "help": "validators",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "type": {
              "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. ",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the validator expects.",
              "type": "object"
            }
          }
        }
      }
    },
    "value": {
      "description": "The value of the InputTime which should be an ISOString.",
      "type": "string",
      "displayName": "Value",
      "writeback": true,
      "format": "time",
      "help": "value"
    }
  },
  "methods": {
    "show": {
      "description": "Shows the timepicker",
      "help": "show",
      "return": "void"
    },
    "hide": {
      "description": "Hides the timepicker. Note that this function is a no-op when renderMode is 'native'.",
      "help": "hide",
      "return": "void"
    },
    "refresh": {
      "description": "Refreshes the element. Usually called after dom changes have been made.",
      "help": "refresh",
      "return": "void"
    },
    "validate": {
      "description": "Validates the component's display value using the converter and all validators registered on\nthe component and updates the value option by performing the\nfollowing steps.\n\n\n\nAll messages are cleared, including custom messages added by the app. \nIf no converter is present then processing continues to next step. If a converter is\npresent, the UI value is first converted (i.e., parsed). If there is a parse error then\nthe messages are shown.\nIf there are no validators setup for the component the value\noption is updated using the display value. Otherwise all\nvalidators are run in sequence using the parsed value from the previous step. The implicit\nrequired validator is run first if the component is marked required. When a validation error is\nencountered it is remembered and the next validator in the sequence is run. \nAt the end of validation if there are errors, the messages are shown.\nIf there were no errors, then the\nvalue option is updated.\n",
      "help": "validate",
      "return": "Promise<string>"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes -\nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be\nerased when this method is called.",
      "help": "reset",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them.\nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages().\n\nIf there were no deferred messages this method simply returns.\n",
      "help": "showMessages",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}