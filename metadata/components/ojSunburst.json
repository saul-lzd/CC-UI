{
  "name": "oj-sunburst",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Sunburst",
  "type": "core",
  "description": "An interactive data visualization in which hierarchical data is represented in concentric rings.  Each ring segment is proportionally sized relative to the other segments at a given level.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojSunburst.html",
  "properties": {
    "animationDuration": {
      "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, this attribute defines the duration of each stage. For example, if an animation contains two stages, the total duration will be two times this attribute's value. The default value comes from the CSS and varies based on theme.",
      "type": "number",
      "displayName": "Animation Duration",
      "units": "milliseconds",
      "help": "animationDuration"
    },
    "animationOnDataChange": {
      "description": "Specifies the animation that is applied on data changes.",
      "type": "string",
      "displayName": "Animation On Data Change",
      "value": "none",
      "help": "animationOnDataChange",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "animationOnDisplay": {
      "description": "Specifies the animation that is shown on initial display.",
      "type": "string",
      "displayName": "Animation On Display",
      "value": "none",
      "help": "animationOnDisplay",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "animationUpdateColor": {
      "description": "The color that is displayed during a data change animation when a node is updated.",
      "type": "string",
      "displayName": "Animation Update Color",
      "value": "",
      "format": "color",
      "help": "animationUpdateColor"
    },
    "as": {
      "description": "An alias for the $current context variable passed to slot content for the nodeTemplate slot.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "colorLabel": {
      "description": "Specifies the label describing the color metric of the sunburst. This label will be used in the legend.",
      "type": "string",
      "displayName": "Color Label",
      "value": "",
      "help": "colorLabel"
    },
    "data": {
      "description": "The oj.DataProvider for the nodes of the sunburst. It should provide a data tree where each node in the data tree corresponds to a node in the sunburst. The row key will be used as the id for sunburst nodes. Note that when using this attribute, a template for the nodeTemplate slot should be provided.",
      "type": "oj.DataProvider|null",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "displayLevels": {
      "description": "The number of levels of nodes to display. By default all nodes are displayed.",
      "type": "number",
      "displayName": "Display Levels",
      "value": 1.7976931348623157e+308,
      "help": "displayLevels"
    },
    "drilling": {
      "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire an ojBeforeDrill and ojDrill event on click (double click if selection is enabled). Drilling on a node causes a property change to the rootNode attribute. The displayLevels attribute can be used in conjunction with drilling to display very deep hieracrchies. Use \"on\" to enable drilling for all nodes. To enable or disable drilling on individual nodes use the drilling attribute in each node.",
      "type": "string",
      "displayName": "Drilling",
      "value": "off",
      "help": "drilling",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "expanded": {
      "description": "Specifies the key set containing the ids of sunburst nodes that should be expanded on initial render. Use the ExpandedKeySet class to specify nodes to expand. Use the ExpandAllKeySet class to expand all nodes. By default, all sunburst nodes are expanded.",
      "type": "KeySet",
      "displayName": "Expanded",
      "value": "new ExpandAllKeySet()",
      "writeback": true,
      "help": "expanded"
    },
    "hiddenCategories": {
      "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.",
      "type": "Array<string>",
      "displayName": "Hidden Categories",
      "value": [],
      "writeback": true,
      "help": "hiddenCategories"
    },
    "highlightMatch": {
      "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
      "type": "string",
      "displayName": "Highlight Match",
      "value": "all",
      "help": "highlightMatch",
      "enumValues": [
        "all",
        "any"
      ],
      "propertyEditorValues": {
        "all": {
          "displayName": "All"
        },
        "any": {
          "displayName": "Any"
        }
      }
    },
    "highlightedCategories": {
      "description": "An array of category strings used for highlighting. Nodes matching all categories in this array will be highlighted.",
      "type": "Array<string>",
      "displayName": "Highlighted Categories",
      "value": [],
      "writeback": true,
      "help": "highlightedCategories"
    },
    "hoverBehavior": {
      "description": "Defines the behavior applied when hovering over the nodes.",
      "type": "string",
      "displayName": "Hover Behavior",
      "value": "none",
      "help": "hoverBehavior",
      "enumValues": [
        "dim",
        "none"
      ],
      "propertyEditorValues": {
        "dim": {
          "displayName": "Dim"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "hoverBehaviorDelay": {
      "description": "Specifies initial hover delay in ms for highlighting nodes.",
      "type": "number",
      "displayName": "Hover Behavior Delay",
      "value": 200,
      "units": "milliseconds",
      "help": "hoverBehaviorDelay"
    },
    "nodeDefaults": {
      "description": "An object defining default properties for the nodes. Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the sunburst nodes. Some property default values come from the CSS and varies based on theme.",
      "type": "object",
      "displayName": "Node Defaults",
      "help": "nodeDefaults",
      "properties": {
        "borderColor": {
          "description": "The default border color of the nodes.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "nodeDefaults.borderColor"
        },
        "borderWidth": {
          "description": "The default border width of the nodes.",
          "type": "number",
          "displayName": "Border Width",
          "value": 1,
          "units": "pixels",
          "help": "nodeDefaults.borderWidth"
        },
        "hoverColor": {
          "description": "The color of the node hover feedback. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Hover Color",
          "format": "color",
          "help": "nodeDefaults.hoverColor"
        },
        "labelDisplay": {
          "description": "The label display behavior for the nodes. More labels are generally displayed when using rotation, with the trade off of readability. When auto is used, rotated or horizontal labels will be used based on the client browser and platform.",
          "type": "string",
          "displayName": "Label Display",
          "value": "auto",
          "help": "nodeDefaults.labelDisplay",
          "enumValues": [
            "auto",
            "horizontal",
            "off",
            "rotated"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "horizontal": {
              "displayName": "Horizontal"
            },
            "off": {
              "displayName": "Off"
            },
            "rotated": {
              "displayName": "Rotated"
            }
          }
        },
        "labelHalign": {
          "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
          "type": "string",
          "displayName": "Label Halign",
          "value": "center",
          "help": "nodeDefaults.labelHalign",
          "enumValues": [
            "center",
            "inner",
            "outer"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "inner": {
              "displayName": "Inner"
            },
            "outer": {
              "displayName": "Outer"
            }
          }
        },
        "labelMinLength": {
          "description": "The minimum number of visible characters needed in order to render a truncated label. If the minimum is not met when calculating the truncated label then the label is not displayed.",
          "type": "number",
          "displayName": "Label Min Length",
          "value": 1,
          "help": "nodeDefaults.labelMinLength"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the label. The default value comes from the CSS and varies based on theme.",
          "type": "object",
          "displayName": "Label Style",
          "help": "nodeDefaults.labelStyle"
        },
        "selectedInnerColor": {
          "description": "The inner color of the node selection feedback. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Selected Inner Color",
          "format": "color",
          "help": "nodeDefaults.selectedInnerColor"
        },
        "selectedOuterColor": {
          "description": "The outer color of the node selection feedback. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Selected Outer Color",
          "format": "color",
          "help": "nodeDefaults.selectedOuterColor"
        },
        "showDisclosure": {
          "description": "Specifies whether to display the expand/collapse button on hover. If the button is clicked, the expanded attribute is updated with the new array of node ids.",
          "type": "string",
          "displayName": "Show Disclosure",
          "value": "off",
          "help": "nodeDefaults.showDisclosure",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        }
      }
    },
    "nodes": {
      "description": "An array of objects with the following properties that defines the data for the nodes. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected.",
      "type": "Array<Object>|Promise|null",
      "displayName": "Nodes",
      "value": null,
      "help": "nodes",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "borderColor": {
              "description": "The border color of the node.",
              "type": "string"
            },
            "borderWidth": {
              "description": "The border width of the node.",
              "type": "number"
            },
            "categories": {
              "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used.",
              "type": "Array<string>"
            },
            "color": {
              "description": "The fill color of the node.",
              "type": "string"
            },
            "drilling": {
              "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
              "type": "\"inherit\"|\"off\"|\"on\"",
              "value": "\"inherit\""
            },
            "id": {
              "description": "The id of the node. For the DataProvider case, the key for the node will be used as the id.",
              "type": "any"
            },
            "label": {
              "description": "The label for this node.",
              "type": "string"
            },
            "labelDisplay": {
              "description": "The label display behavior for the nodes. More labels are generally displayed when using rotation, with the trade off of readability. When auto is used, rotated or horizontal labels will be used based on the client browser and platform.",
              "type": "\"auto\"|\"horizontal\"|\"off\"|\"rotated\"",
              "value": "\"auto\""
            },
            "labelHalign": {
              "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
              "type": "\"center\"|\"inner\"|\"outer\"",
              "value": "\"center\""
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object"
            },
            "nodes": {
              "description": "An array of objects with properties for the child nodes.",
              "type": "Array<oj.ojSunburst.Node>"
            },
            "pattern": {
              "description": "The pattern used to fill the node.",
              "type": "\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"none\"|\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"",
              "value": "\"none\""
            },
            "radius": {
              "description": "The radius of the node relative to the other nodes.",
              "type": "number"
            },
            "selectable": {
              "description": "Specifies whether or not the node will be selectable.",
              "type": "\"auto\"|\"off\"",
              "value": "\"auto\""
            },
            "shortDesc": {
              "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string"
            },
            "showDisclosure": {
              "description": "Specifies whether to display the expand/collapse button on hover for a specific node. If the button is clicked, the expanded attribute is updated with the new array of node ids.",
              "type": "\"inherit\"|\"off\"|\"on\"",
              "value": "\"inherit\""
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
              "type": "string"
            },
            "svgStyle": {
              "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
              "type": "object"
            },
            "value": {
              "description": "The relative size of the node.",
              "type": "number"
            }
          }
        }
      }
    },
    "rootNode": {
      "description": "The id of the root node. When specified, only the root node and children of the root will be displayed.",
      "type": "any",
      "displayName": "Root Node",
      "value": "\"\"",
      "help": "rootNode"
    },
    "rootNodeContent": {
      "description": "An object defining custom root node content for the sunburst.",
      "type": "object",
      "displayName": "Root Node Content",
      "help": "rootNodeContent",
      "properties": {
        "renderer": {
          "description": "A function that returns custom root node content.",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "rootNodeContent.renderer",
          "properties": {
            "outerBounds": {
              "description": "Object containing information on the rectangle circumscribing the root node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle circumscribing the root node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle circumscribing the root node area.",
                  "type": "number"
                }
              }
            },
            "innerBounds": {
              "description": "Object containing information on the rectangle inscribed in the root node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle inscribed in the root node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle inscribed in the root node area.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "The id of the root node.",
              "type": "any"
            },
            "data": {
              "description": "The data object of the root node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the root node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The sunburst element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "rotation": {
      "description": "Specifies whether client side rotation is enabled.",
      "type": "string",
      "displayName": "Rotation",
      "value": "on",
      "help": "rotation",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "selection": {
      "description": "An array containing the ids of the initially selected nodes.",
      "type": "Array<any>",
      "displayName": "Selection",
      "value": [],
      "writeback": true,
      "help": "selection"
    },
    "selectionMode": {
      "description": "Specifies the selection mode.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "multiple",
      "help": "selectionMode",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "displayName": "Multiple"
        },
        "none": {
          "displayName": "None"
        },
        "single": {
          "displayName": "Single"
        }
      }
    },
    "sizeLabel": {
      "description": "Specifies the label describing the size metric of the sunburst. This label will be used in the legend.",
      "type": "string",
      "displayName": "Size Label",
      "value": "",
      "help": "sizeLabel"
    },
    "sorting": {
      "description": "Specifies whether whether the nodes are sorted by size. When sorting is enabled, nodes that have the same parent are sorted in order of descending size.",
      "type": "string",
      "displayName": "Sorting",
      "value": "off",
      "help": "sorting",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "startAngle": {
      "description": "Specifies the starting angle of the sunburst. Valid values are numbers between 0 and 360.",
      "type": "number",
      "displayName": "Start Angle",
      "value": 90,
      "writeback": true,
      "maximum": 360,
      "minimum": 0,
      "units": "degrees",
      "help": "startAngle"
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "help": "tooltip",
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip. T",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "tooltip.renderer",
          "properties": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "value": {
              "description": "The value of the hovered node.",
              "type": "number"
            },
            "radius": {
              "description": "The radius of the hovered node.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "data": {
              "description": "The data object of the hovered node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the hovered node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The sunburst element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "touchResponse": {
      "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
      "type": "string",
      "displayName": "Touch Response",
      "value": "auto",
      "help": "touchResponse",
      "enumValues": [
        "auto",
        "touchStart"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "touchStart": {
          "displayName": "Touch Start"
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelColor": {
          "description": "Used for the color label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Color",
          "help": "translations.labelColor"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "labelSize": {
          "description": "Used for the size label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Size",
          "help": "translations.labelSize"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        },
        "tooltipCollapse": {
          "description": "Used for the collapse tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Tooltip Collapse",
          "help": "translations.tooltipCollapse"
        },
        "tooltipExpand": {
          "description": "Used for the expand tooltip.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Tooltip Expand",
          "help": "translations.tooltipExpand"
        }
      }
    }
  },
  "methods": {
    "getNode": {
      "description": "Returns an object with the following properties for automation testing verification of the node with the specified subid path.",
      "help": "getNode",
      "params": [
        {
          "name": "subIdPath",
          "description": "The array of indices in the subId for the desired node",
          "type": "Array"
        }
      ],
      "return": "object|null"
    },
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojRotateInput": {
      "description": "Triggered during user rotation of the sunburst.",
      "help": "rotateInput",
      "detail": {
        "value": {
          "description": "the start angle of the sunburst, in degrees",
          "type": "number"
        }
      }
    },
    "ojBeforeDrill": {
      "description": "Triggered immediately before any node in the sunburst is drilled into. The drill event can be vetoed if the beforeDrill event's preventDefault() is called.",
      "help": "beforeDrill",
      "detail": {
        "id": {
          "description": "the id of the drilled node",
          "type": "any"
        },
        "data": {
          "description": "the data object of the drilled node",
          "type": "object"
        },
        "itemData": {
          "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
          "type": "object"
        }
      }
    },
    "ojDrill": {
      "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
      "help": "drill",
      "detail": {
        "id": {
          "description": "the id of the drilled node",
          "type": "any"
        },
        "data": {
          "description": "the data object of the drilled node",
          "type": "object"
        },
        "itemData": {
          "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
          "type": "object"
        }
      }
    },
    "ojBeforeExpand": {
      "description": "Triggered immediately before any node in the sunburst is expanded. The expand event can be vetoed if the beforeExpand event's preventDefault() is called.",
      "help": "beforeExpand",
      "detail": {
        "id": {
          "description": "the id of the node to expand",
          "type": "any"
        },
        "data": {
          "description": "the data object of the node to expand",
          "type": "object"
        },
        "itemData": {
          "description": "The row data object for the node to expand. This will only be set if a DataProvider is being used.",
          "type": "object"
        }
      }
    },
    "ojExpand": {
      "description": "Triggered when a node has been expanded. The ui object contains one property, \"nodeId\", which is the id of the node that has been expanded.",
      "help": "expand",
      "detail": {
        "id": {
          "description": "the id of the expanded node",
          "type": "any"
        },
        "data": {
          "description": "the data object of the expanded node",
          "type": "object"
        },
        "itemData": {
          "description": "The row data object for the expanded node. This will only be set if a DataProvider is being used.",
          "type": "object"
        }
      }
    },
    "ojBeforeCollapse": {
      "description": "Triggered immediately before any container node in the sunburst is collapsed. The collapse event can be vetoed if the beforeCollapse event's preventDefault() is called.",
      "help": "beforeCollapse",
      "detail": {
        "id": {
          "description": "the id of the node to collapse",
          "type": "any"
        },
        "data": {
          "description": "the data object of the node to collapse",
          "type": "object"
        },
        "itemData": {
          "description": "The row data object for the node to collapse. This will only be set if a DataProvider is being used.",
          "type": "object"
        }
      }
    },
    "ojCollapse": {
      "description": "Triggered when a node has been collapsed.",
      "help": "collapse",
      "detail": {
        "id": {
          "description": "the id of the collapsed node",
          "type": "any"
        },
        "data": {
          "description": "the data object of the collapsed node",
          "type": "object"
        },
        "itemData": {
          "description": "The row data object for the collapsed node. This will only be set if a DataProvider is being used.",
          "type": "object"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "nodeTemplate": {
      "description": " The nodeTemplate slot is used to specify the template for creating nodes of the sunburst. The slot content must be wrapped in a <template> element. The content of the template should be a single <oj-sunburst-node> element. See the [oj-sunburst-node]ojSunburstNode doc for more details. When the template is executed for each node, it will have access to the components's binding context containing the following properties: $current - an object that contains information for the current node. (See the table below for a list of properties available on $current) alias - if 'as' attribute was specified, the value will be used to provide an application-named alias for $current. \n",
      "maxItems": 1,
      "help": "nodeTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-sunburst> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data object of the node",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the current node",
          "type": "number"
        },
        "key": {
          "description": "The key of the current node",
          "type": "any"
        },
        "parentData": {
          "description": "An array of data objects of the outermost to innermost parents of the node",
          "type": "Array"
        },
        "parentKey": {
          "description": "The key of the parent node",
          "type": "any"
        }
      }
    }
  }
}