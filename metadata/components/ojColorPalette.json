{
  "name": "oj-color-palette",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Color Palette",
  "type": "core",
  "description": "Displays a set of pre-defined colors from which a specific color can be selected.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojColorPalette.html",
  "properties": {
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By",
      "help": "describedBy"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false,
      "help": "disabled"
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "object",
      "displayName": "Display Options",
      "help": "displayOptions",
      "properties": {
        "converterHint": {
          "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Converter Hint",
          "value": [
            "placeholder",
            "notewindow"
          ],
          "help": "displayOptions.converterHint"
        },
        "helpInstruction": {
          "description": "Display options for auxilliary help instruction text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Help Instruction",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.helpInstruction"
        },
        "messages": {
          "description": "Display options for auxilliary message text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Messages",
          "value": [
            "inline"
          ],
          "help": "displayOptions.messages"
        },
        "validatorHint": {
          "description": "Display options for auxilliary validator hint text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Validator Hint",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.validatorHint"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "object",
      "displayName": "Help",
      "help": "help",
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is \"\".",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
      "type": "object",
      "displayName": "Help Hints",
      "translatable": true,
      "help": "helpHints",
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label.",
          "type": "string",
          "displayName": "Definition",
          "value": "",
          "help": "helpHints.definition"
        },
        "source": {
          "description": "Hint for help source URL associated with the label.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "helpHints.source"
        }
      }
    },
    "labelDisplay": {
      "description": "Specifies whether a text label accompanies the color swatch.",
      "type": "string",
      "displayName": "Label Display",
      "value": "off",
      "help": "labelDisplay",
      "enumValues": [
        "auto",
        "off"
      ],
      "propertyEditorValues": {
        "auto": {
          "description": "labels are displayed if the layout property is 'list' and swatch-size is 'sm' or if the layout is 'grid' and swatch-size is 'lg'",
          "displayName": "Auto"
        },
        "off": {
          "description": "labels are not displayed",
          "displayName": "Off"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true,
      "help": "labelHint"
    },
    "labelledBy": {
      "description": "Used to establish a relationship between this element and another element.",
      "type": "string",
      "displayName": "Labelled By",
      "value": null,
      "help": "labelledBy"
    },
    "layout": {
      "description": "Specifies the layout of the color swatches.",
      "type": "string",
      "displayName": "Layout",
      "value": "grid",
      "help": "layout",
      "enumValues": [
        "grid",
        "list"
      ],
      "propertyEditorValues": {
        "grid": {
          "description": "Layout the color swatches in a grid",
          "displayName": "Grid"
        },
        "list": {
          "description": "Layout the color swatches in a list",
          "displayName": "List"
        }
      }
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true,
      "help": "messagesCustom"
    },
    "palette": {
      "description": "Specifies an array of objects defining the palette's color set.",
      "type": "Array<Object>",
      "displayName": "Palette",
      "value": null,
      "translatable": true,
      "help": "palette",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "color": {
              "description": "the color definition",
              "type": "oj.Color"
            },
            "label": {
              "description": "optional descriptive string (refer to attribute label-display). If omitted, label defaults to the color's hex string format.",
              "type": "string"
            }
          }
        }
      }
    },
    "swatchSize": {
      "description": "Specifies the swatch size.",
      "type": "string",
      "displayName": "Swatch Size",
      "value": "lg",
      "help": "swatchSize",
      "enumValues": [
        "lg",
        "sm",
        "xs"
      ],
      "propertyEditorValues": {
        "lg": {
          "description": "large swatch",
          "displayName": "Lg"
        },
        "sm": {
          "description": "small swatch",
          "displayName": "Sm"
        },
        "xs": {
          "description": "extra small swatch",
          "displayName": "Xs"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "labelNone": {
          "description": "Label for swatch with no color.\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label None",
          "help": "translations.labelNone"
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "help": "valid",
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "value": {
      "description": "The current value of the palette element.",
      "type": "oj.Color",
      "displayName": "Value",
      "value": null,
      "writeback": true,
      "format": "color",
      "help": "value"
    }
  },
  "methods": {
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ]
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ]
    },
    "refresh": {
      "description": "Called when the DOM underneath the component changes requiring a re-render of the component. An\nexample is when the id for the input changes. \n\nAnother time when refresh might be called is when the locale for the page changes. When it\nchanges, attributes used by its converter and validator that are locale specific, its hints,\nmessages and translations will be updated.\n\n\n\nWhen refresh method is called, the component may take various\nsteps such as clearing messages, running validation etc., based on the state it is in. \n\nSteps Performed Always\n\nThe converter and validators used by the component are reset, and new converter and\nvalidator hints is pushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif component is valid when refresh() is called, the display value is refreshed if component\nhas a converter set.\nif component is invalid and is showing messages when\nrefresh() is called, then all component messages are cleared\nand full validation run using the display value on the component. if there are validation errors, then value attribute is not updated and the error is shown. if no errors result from the validation, the value attribute is updated; page author can listen to the onValueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when refresh()\nis called, then all component messages are cleared and deferred validation is run.\n\n\n\nClearing Messages\n\nIf clearing messages only those created by the component are cleared.\nmessagesCustom attribute is not cleared.\n\n",
      "help": "refresh",
      "return": "void"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes -\nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be\nerased when this method is called.",
      "help": "reset",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them.\nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages().\n\nIf there were no deferred messages this method simply returns.\n",
      "help": "showMessages",
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}