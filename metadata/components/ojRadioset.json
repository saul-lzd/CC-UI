{
  "name": "oj-radioset",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Radioset",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-choice-direction-column"
      ],
      "description": "This is the default. It lays out the radios in a column."
    },
    {
      "styleGroup": [
        "oj-choice-direction-row"
      ],
      "description": "It lays out the radio buttons in a row."
    },
    {
      "styleGroup": [
        "oj-radioset-no-chrome"
      ],
      "description": "Use this styleclass if you don't want the chrome around the set."
    },
    {
      "styleGroup": [
        "oj-radioset-input-start"
      ],
      "description": "Use this styleclass to order the radio at the start and label text at the end even if a theme has a different default order."
    },
    {
      "styleGroup": [
        "oj-radioset-input-end"
      ],
      "description": "Use this styleclass to order the radio at the end and the label text at the start even if a theme has a different default order."
    }
  ],
  "description": "A grouping of related radio buttons.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojRadioset.html",
  "properties": {
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By",
      "help": "describedBy"
    },
    "disabled": {
      "description": " Disabled true disables the component and disables all the inputs/labels. Disabled false enables the component, and leaves the inputs' disabled property as it is in the dom. ",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false,
      "help": "disabled"
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "object",
      "displayName": "Display Options",
      "help": "displayOptions",
      "properties": {
        "converterHint": {
          "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Converter Hint",
          "value": [
            "placeholder",
            "notewindow"
          ],
          "help": "displayOptions.converterHint"
        },
        "helpInstruction": {
          "description": "Display options for auxilliary help instruction text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Help Instruction",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.helpInstruction"
        },
        "messages": {
          "description": "Display options for auxilliary message text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Messages",
          "value": [
            "inline"
          ],
          "help": "displayOptions.messages"
        },
        "validatorHint": {
          "description": "Display options for auxilliary validator hint text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Validator Hint",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.validatorHint"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "object",
      "displayName": "Help",
      "help": "help",
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is \"\".",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
      "type": "object",
      "displayName": "Help Hints",
      "translatable": true,
      "help": "helpHints",
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label.",
          "type": "string",
          "displayName": "Definition",
          "value": "",
          "help": "helpHints.definition"
        },
        "source": {
          "description": "Hint for help source URL associated with the label.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "helpHints.source"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true,
      "help": "labelHint"
    },
    "labelledBy": {
      "description": "It is used to establish a relationship between this component and another element. A common use is to tie the oj-label and the oj-radioset together. The oj-label custom element has an id, and you use the labelled-by attribute to tie the two components together.",
      "type": "string|null",
      "displayName": "Labelled By",
      "help": "labelledBy"
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true,
      "help": "messagesCustom"
    },
    "required": {
      "description": "Whether the component is required or optional. When required is set to true, an implicit required validator is created using the validator factory - oj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator(). Translations specified using the translations.required option and the label associated with the component, are passed through to the options parameter of the createValidator method. When required option changes due to programmatic intervention, the component may clears message and run validation, based on the current state it's in. Running Validation if component is valid when required is set to true, then it runs deferred validation on the property value. This is to ensure errors are not flagged unnecessarily. if component is invalid and has deferred messages when required is set to false, then component messages are cleared but no deferred validation is run. if component is invalid and currently showing invalid messages when required is set, then component messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the optionChange event to clear custom errors. Clearing Messages Only messages created by the component are cleared. messagesCustom option is not cleared. This property set to false implies that a value is not required to be provided by the user. This is the default. This property set to true implies that a value is required to be provided by user and the input's label will render a required icon. Additionally a required validator - RequiredValidator - is implicitly used if no explicit required validator is set. An explicit required validator can be set by page authors using the validators option. When the option is not set, the element's required property is used as its initial value if it exists.",
      "type": "boolean",
      "displayName": "Required",
      "value": false,
      "help": "required"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "object",
          "displayName": "Required",
          "help": "translations.required",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Hint",
              "help": "translations.required.hint"
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail",
              "help": "translations.required.messageDetail"
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary",
              "help": "translations.required.messageSummary"
            }
          }
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "help": "valid",
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "value": {
      "description": "The value of the component. When value option changes due to programmatic intervention, the component always clears all messages and runs deferred validation, and always refreshes UI display value. Clearing Messages All messages are cleared. This includes messagesCustom property. Running Validation component always runs deferred validation ",
      "type": "any",
      "displayName": "Value",
      "value": null,
      "writeback": true,
      "help": "value"
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the radioset A refresh() is required when a radioset is programatically changed, like in the following circumstances: After radios are added or removed or modified (without using ojRadioset) in the DOM. ",
      "help": "refresh",
      "return": "void"
    },
    "validate": {
      "description": "Validates the component's display value using all validators registered on the component and updates the value option by performing the following steps. All messages are cleared, including custom messages added by the app. The implicit required validator is run if the component is marked required. At the end of validation if there are errors, the messages are shown. If there were no errors, then the value property is updated. ",
      "help": "validate",
      "return": "Promise<string>"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes -\nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be\nerased when this method is called.",
      "help": "reset",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them.\nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages().\n\nIf there were no deferred messages this method simply returns.\n",
      "help": "showMessages",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "": {
      "description": "The oj-radioset element accepts oj-option elements as children.",
      "displayName": "default",
      "help": "Default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}