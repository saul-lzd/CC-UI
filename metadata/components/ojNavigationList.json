{
  "name": "oj-navigation-list",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Navigation List",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-navigationlist-stack-icon-label"
      ],
      "description": "Displays horizontal Navigation List with icon and label stacked. Applicable only when \"edge\" is \"top\"."
    },
    {
      "styleGroup": [
        "oj-navigationlist-category-divider"
      ],
      "description": "Use this class to add horizontal divider line between two categories of items."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-icon"
      ],
      "description": "Use this class to add icon to list item."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-title"
      ],
      "description": "When arbitrary content is placed inside item's content area, it's title text can be marked using this style class. This helps component in identifying the Item's label."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-text-wrap"
      ],
      "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when \"overflow\" attribute is set to \"popup\"."
    },
    {
      "styleGroup": [
        "oj-navigationlist-item-dividers"
      ],
      "description": "Use this class to show dividers between horizontal navigation list items."
    },
    {
      "styleGroup": [
        "oj-sm-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on small screens and larger."
    },
    {
      "styleGroup": [
        "oj-md-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on medium screens and larger."
    },
    {
      "styleGroup": [
        "oj-lg-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on large screens and larger."
    },
    {
      "styleGroup": [
        "oj-xl-condense"
      ],
      "description": "Use this class to condense horizontal navigation list items on extra large screens and larger."
    },
    {
      "styleGroup": [
        "oj-navigationlist-nofollow-link"
      ],
      "description": "Use this class to prevent automatic navigation to the url specified on \"&lt;a\n\" tag's \"href\" attribute. In this case, navigation can be handled programmatically by using \"selectionChanged\" event. This is useful to execute some custom logic before browser triggers navigation."
    },
    {
      "styleGroup": [
        "oj-focus-highlight"
      ],
      "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control.\nThe \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load.\nThe application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are:\n\"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value.\n\"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism.\n\"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result.\nTo change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
    }
  ],
  "description": "Displays items as a collapsible or sliding navigation list with highly interactive features.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojNavigationList.html",
  "properties": {
    "as": {
      "description": "Gets and sets the alias for the current item when referenced inside the item template.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "currentItem": {
      "description": "Gets and sets the key of the item that should have keyboard focus.",
      "type": "any",
      "displayName": "Current Item",
      "value": null,
      "writeback": true,
      "help": "currentItem"
    },
    "data": {
      "description": "Gets and sets the data provider for Navigation List.",
      "type": "oj.TableDataSource|oj.TreeDataSource|oj.DataProvider|null",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "display": {
      "description": "Gets and sets whether all or only icons need to be displayed.",
      "type": "string",
      "displayName": "Display",
      "value": "all",
      "help": "display",
      "enumValues": [
        "all",
        "icons"
      ],
      "propertyEditorValues": {
        "all": {
          "description": "Display both the label and icons.",
          "displayName": "All"
        },
        "icons": {
          "description": "Display only the icons.",
          "displayName": "Icons"
        }
      }
    },
    "drillMode": {
      "description": "Gets and sets whether expand/collapse or sliding operations are allowed.",
      "type": "string",
      "displayName": "Drill Mode",
      "value": "none",
      "help": "drillMode",
      "enumValues": [
        "collapsible",
        "none",
        "sliding"
      ],
      "propertyEditorValues": {
        "collapsible": {
          "description": "Allows user to expand and collapse group items. If there are more than two levels in hierarchy, sliding is preferered drill mode.",
          "displayName": "Collapsible"
        },
        "none": {
          "description": "All group items are expanded by default and user not allowed to collapse them.",
          "displayName": "None"
        },
        "sliding": {
          "description": "This is typically used for hierarchical lists. This allows user to view one level at a time.",
          "displayName": "Sliding"
        }
      }
    },
    "edge": {
      "description": "Gets and sets the edge position of the Navigation List.",
      "type": "string",
      "displayName": "Edge",
      "value": "start",
      "help": "edge",
      "enumValues": [
        "start",
        "top"
      ],
      "propertyEditorValues": {
        "start": {
          "description": "This renders list items vertically.",
          "displayName": "Start"
        },
        "top": {
          "description": "This renders list items horizontally.",
          "displayName": "Top"
        }
      }
    },
    "expanded": {
      "description": "Specifies the key set containing the keys of the items that should be expanded.\n\nUse the ExpandedKeySet class to specify items to expand.\nUse the ExpandAllKeySet class to expand all items.",
      "type": "KeySet",
      "displayName": "Expanded",
      "value": "new ExpandedKeySet();",
      "writeback": true,
      "help": "expanded"
    },
    "hierarchyMenuThreshold": {
      "description": "Gets and sets the level at which user can see hierarchical menu button (defaults to 0 if not specified in theme).",
      "type": "number",
      "displayName": "Hierarchy Menu Threshold",
      "value": 0,
      "help": "hierarchyMenuThreshold"
    },
    "item": {
      "description": "Customize the functionalities of each item in Navigation List.",
      "type": "object",
      "displayName": "Item",
      "help": "item",
      "properties": {
        "renderer": {
          "description": "Gets and sets the renderer for the item.",
          "type": "function|null",
          "displayName": "Renderer",
          "value": null,
          "help": "item.renderer",
          "properties": {
            "componentElement": {
              "description": "oj-navigation-list element",
              "type": "Element"
            },
            "datasource": {
              "description": "A reference to the data source object. (Not available for static content)",
              "type": "oj.DataProvider<K, D>"
            },
            "index": {
              "description": "The index of the item, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The Key of the item.",
              "type": "any"
            },
            "data": {
              "description": "The data object for the item.",
              "type": "any"
            },
            "parentElement": {
              "description": "The list item element. The renderer can use this to directly append content.",
              "type": "Element"
            }
          }
        },
        "selectable": {
          "description": "Gets and sets whether the item can be selected.",
          "type": "function|boolean",
          "displayName": "Selectable",
          "value": true,
          "help": "item.selectable",
          "properties": {
            "componentElement": {
              "description": "oj-navigation-list element",
              "type": "Element"
            },
            "datasource": {
              "description": "A reference to the data source object. (Not available for static content)",
              "type": "oj.DataProvider<K, D>"
            },
            "index": {
              "description": "The index of the item, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The Key of the item.",
              "type": "any"
            },
            "data": {
              "description": "The data object for the item.",
              "type": "any"
            },
            "parentElement": {
              "description": "The list item element. The renderer can use this to directly append content.",
              "type": "Element"
            }
          }
        }
      }
    },
    "overflow": {
      "description": "Gets and sets overflow behaviour for Navigation List.",
      "type": "string",
      "displayName": "Overflow",
      "value": "hidden",
      "help": "overflow",
      "enumValues": [
        "hidden",
        "popup"
      ],
      "propertyEditorValues": {
        "hidden": {
          "description": "overflow is clipped, and the rest of the content will be invisible.",
          "displayName": "Hidden"
        },
        "popup": {
          "description": "popup menu will be shown with overflowed items. NOTE: Setting overflow to popup can trigger browser reflow, so only set it when it is actually required.",
          "displayName": "Popup"
        }
      }
    },
    "rootLabel": {
      "description": "Gets and sets the label for top level list items.",
      "type": "string",
      "displayName": "Root Label",
      "value": "Navigation List",
      "help": "rootLabel"
    },
    "selection": {
      "description": "Gets and sets the key of the selected item.",
      "type": "any",
      "displayName": "Selection",
      "value": null,
      "writeback": true,
      "help": "selection"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "defaultRootLabel": {
          "description": "Provides properties to customize the title text used by Sliding Navigation List for root node. \n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Default Root Label",
          "help": "translations.defaultRootLabel"
        },
        "hierMenuBtnLabel": {
          "description": "Provides properties to customize the hover message text used by Sliding Navigation List as label for Hierarchical Menu button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Hier Menu Btn Label",
          "help": "translations.hierMenuBtnLabel"
        },
        "previousIcon": {
          "description": "Provides properties to customize the hover message text used by Sliding Navigation List for previous button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Previous Icon",
          "help": "translations.previousIcon"
        }
      }
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the visual state of the Navigation List. JET components require a refresh() after the DOM is\nprogrammatically changed underneath the component.\nThis method does not accept any arguments.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Event handler for when the default animation of a particular action is about to start.",
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "the action that starts the animation. See animation section for a list of actions.",
          "type": "string"
        },
        "element": {
          "description": "the target of animation.",
          "type": "Element"
        },
        "endCallback": {
          "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Event handler for when the default animation of a particular action has ended.",
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "the action that started the animation. See animation section for a list of actions.",
          "type": "string"
        },
        "element": {
          "description": "the target of animation.",
          "type": "Element"
        }
      }
    },
    "ojBeforeSelect": {
      "description": "Event handler for when before the selection is changed.",
      "cancelable": true,
      "help": "beforeSelect",
      "detail": {
        "key": {
          "description": "Selected list item Key.",
          "type": "any"
        },
        "item": {
          "description": "Selected list item.",
          "type": "Element"
        }
      }
    },
    "ojBeforeCollapse": {
      "description": "Event handler for when an item is about to collapse.",
      "cancelable": true,
      "help": "beforeCollapse",
      "detail": {
        "key": {
          "description": "the Key of the item to be collapse",
          "type": "any"
        },
        "item": {
          "description": "the item to be collapse",
          "type": "Element"
        }
      }
    },
    "ojBeforeCurrentItem": {
      "description": "Event handler for when before the current item is changed.",
      "cancelable": true,
      "help": "beforeCurrentItem",
      "detail": {
        "previousKey": {
          "description": "the Key of the previous item",
          "type": "any"
        },
        "previousItem": {
          "description": "the previous item",
          "type": "Element"
        },
        "key": {
          "description": "the Key of the new current item",
          "type": "any"
        },
        "item": {
          "description": "the new current item",
          "type": "Element"
        }
      }
    },
    "ojCollapse": {
      "description": "Event handler for after an item has collapsed.",
      "help": "collapse",
      "detail": {
        "key": {
          "description": "The Key of the item that was just collapsed.",
          "type": "any"
        },
        "item": {
          "description": "The list item that was just collapsed.",
          "type": "Element"
        }
      }
    },
    "ojBeforeExpand": {
      "description": "Event handler for when an item is about to expand.",
      "cancelable": true,
      "help": "beforeExpand",
      "detail": {
        "key": {
          "description": "the Key of the item to be expand",
          "type": "any"
        },
        "item": {
          "description": "the item to be expand",
          "type": "Element"
        }
      }
    },
    "ojExpand": {
      "description": "Event handler for after an item has expanded.",
      "help": "expand",
      "detail": {
        "key": {
          "description": "The Key of the item that was just expanded.",
          "type": "any"
        },
        "item": {
          "description": "The list item that was just expanded.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "itemTemplate": {
      "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. The slot must be a <template> element.\nThe content of the template could either include the <li> element, in which case that will be used as\nthe root of the item. Or it can be just the content which excludes the <li> element.\nWhen the template is executed for each item, it will have access to the binding context containing the following properties: $current - an object that contains information for the current item. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
      "maxItems": 1,
      "help": "itemTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-navigation-list> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data for the current item being rendered",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent item",
          "type": "number"
        },
        "key": {
          "description": "The key of the current item being rendered",
          "type": "any"
        },
        "depth": {
          "description": "The depth of the current item (available when hierarchical data is provided) being rendered. The depth of the first level children under the invisible root is 1.",
          "type": "number"
        },
        "leaf": {
          "description": "True if the current item is a leaf node (available when hierarchical data is provided).",
          "type": "boolean"
        },
        "parentkey": {
          "description": "The key of the parent item (available when hierarchical data is provided). The parent key is null for root nodes.",
          "type": "any"
        }
      }
    }
  }
}