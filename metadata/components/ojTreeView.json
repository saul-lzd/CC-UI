{
  "name": "oj-tree-view",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Tree View",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-treeview-item-text"
      ],
      "description": "Use this class on the span providing the item text in the static markup or the item renderer."
    },
    {
      "styleGroup": [
        "oj-treeview-item-icon"
      ],
      "description": "Use this class on the span providing the item icon in the static markup or the item renderer."
    }
  ],
  "description": "Displays hierarchical relationships between the items in a tree.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojTreeView.html",
  "properties": {
    "currentItem": {
      "description": "The key of the item that has the browser focus.\nThis is a read-only attribute so page authors cannot set or change it directly.",
      "type": "any",
      "displayName": "Current Item",
      "writeback": true,
      "readOnly": true,
      "help": "currentItem"
    },
    "data": {
      "description": "The data source for the TreeView. Accepts an instance of oj.TreeDataSource.\nSee the data source section in the introduction for out of the box data source types.\nIf the data attribute is not specified, the child elements are used as content. If there's no\ncontent specified, then an empty list is rendered.",
      "type": "oj.TreeDataSource",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "dnd": {
      "description": "Enable drag and drop functionality.\nJET provides support for HTML5 Drag and Drop events. Please refer to mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop third party documentation\non HTML5 Drag and Drop to learn how to use it.",
      "type": "object",
      "displayName": "Dnd",
      "help": "dnd",
      "properties": {
        "drag": {
          "description": "",
          "type": "object",
          "displayName": "Drag",
          "value": null,
          "help": "dnd.drag",
          "properties": {
            "items": {
              "description": "If this object is specified, TreeView will initiate drag operation when the user drags on an item.",
              "type": "object",
              "properties": {
                "dataTypes": {
                  "description": "(optional) The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one\ntype, or an array of strings if multiple types are needed.\nFor example, if selected items of employee data are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide\nwhether to accept the data. A text input may only accept \"text\" data type, while a chart for displaying employee data may be configured to accept the \"application/employees+json\" type.\nFor each type in the array, dataTransfer.setData will be called with the specified type and the JSON version of the selected item data as the value. The selected item data\nis an array of objects, with each object representing a model object from the underlying data source. For example, if the underlying data is an oj.Collection, then this\nwould be a oj.Model object. Note that when static HTML is used, then the value would be the HTML string of the selected item.\nThis property is required unless the application calls setData itself in a dragStart callback function.",
                  "type": "string|Array<string>"
                },
                "dragStart": {
                  "description": "(optional) A callback function that receives the \"dragstart\" event and context information as arguments:\nfunction(event, context)\nAll of the event payloads listed below can be found under the context argument.\nitems: An array of objects, with each object representing the data of one selected item.\nThis function can set its own data and drag image as needed. If dataTypes is specified, event.dataTransfer is already populated with the default data when this function is invoked.\nIf dataTypes is not specified, this function must call event.dataTransfer.setData to set the data or else the drag operation will be cancelled. In either case, the drag image is\nset to an image of the dragged items on the TreeView.",
                  "type": "function"
                },
                "drag": {
                  "description": "(optional) A callback function that receives the \"drag\" event as argument:\nfunction(event)",
                  "type": "function"
                },
                "dragEnd": {
                  "description": "(optional) A callback function that receives the \"dragend\" event as argument:\nfunction(event)",
                  "type": "function"
                }
              }
            }
          }
        },
        "drop": {
          "description": "",
          "type": "object",
          "displayName": "Drop",
          "value": null,
          "help": "dnd.drop",
          "properties": {
            "items": {
              "description": "An object that specifies callback functions to handle dropping items",
              "type": "object",
              "properties": {
                "dataTypes": {
                  "description": "A data type or an array of data types this component can accept.\nThis property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                  "type": "string|Array<string>"
                },
                "dragEnter": {
                  "description": "(optional) A callback function that receives the \"dragenter\" event and context information as arguments:\nfunction(event, context)\nAll of the event payloads listed below can be found under the context argument.\nitem: The item being entered.\nThis function should call event.preventDefault() to indicate the dragged data can be accepted.\nOtherwise, dataTypes will be matched against the drag dataTypes to determine if the data is acceptable. If there is a match, event.preventDefault()\nwill be called to indicate that the data can be accepted.",
                  "type": "function"
                },
                "dragOver": {
                  "description": "(optional) A callback function that receives the \"dragover\" event and context information as arguments:\nfunction(event, context)\nAll of the event payloads listed below can be found under the context argument.\nitem: The item being dragged over.\nThis function should call event.preventDefault() to indicate the dragged data can be accepted.\nOtherwise, dataTypes will be matched against the drag dataTypes to determine if the data is acceptable. If there is a match, event.preventDefault()\nwill be called to indicate that the data can be accepted.",
                  "type": "function"
                },
                "dragLeave": {
                  "description": "(optional) A callback function that receives the \"dragleave\" event and context information as arguments:\nfunction(event, context)\nAll of the event payloads listed below can be found under the context argument.\nitem: The item that was last entered.",
                  "type": "function"
                },
                "drop": {
                  "description": "(required) A callback function that receives the \"drop\" event and context information as arguments:\nfunction(event, context)\nAll of the event payloads listed below can be found under the context argument.\nitem: The item being dropped on.\nposition: The drop position relative to the item being dropped on.\nValid values are \"inside\", \"before\", \"after\", and \"first\" (the first child of the item being dropped on).\nThis function should call event.preventDefault() to indicate the dragged data can be accepted.\nIf the application needs to look at the data for the item being dropped on, it can use the getContextByNode method.",
                  "type": "function"
                }
              }
            }
          }
        }
      }
    },
    "expanded": {
      "description": "Specifies the key set containing the keys of the TreeView items that should be expanded.\nUse the ExpandedKeySet class to specify items to expand.\nUse the ExpandAllKeySet class to expand all items.",
      "type": "KeySet",
      "displayName": "Expanded",
      "value": "new ExpandedKeySet()",
      "writeback": true,
      "help": "expanded"
    },
    "item": {
      "description": "The item attribute contains a subset of attributes for items.",
      "type": "object",
      "displayName": "Item",
      "help": "item",
      "properties": {
        "focusable": {
          "description": "A function that returns whether the item is focusable.\nA item that is not focusable cannot be clicked on or navigated to.\nSee itemContext in the introduction\nto see the object passed into the focusable function.\nIf no function is specified, then all the items will be focusable.",
          "type": "function",
          "displayName": "Focusable",
          "value": null,
          "help": "item.focusable",
          "properties": {
            "componentElement": {
              "description": "The TreeView element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the item (not available for static content).",
              "type": "D"
            },
            "depth": {
              "description": "The depth of the item. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "index": {
              "description": "The index of the item relative to its parent, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the item.",
              "type": "K"
            },
            "leaf": {
              "description": "Whether the item is a leaf item.",
              "type": "boolean"
            },
            "parentElement": {
              "description": "The TreeView item element. The renderer can use this to directly append content.",
              "type": "Element"
            },
            "parentKey": {
              "description": "The key of the parent item (not available for root item).",
              "type": "K"
            }
          }
        },
        "renderer": {
          "description": "The renderer function that renders the contents of the item. See itemContext\nin the introduction to see the object passed into the renderer function.\nThe function should return one of the following: An Object with the following property: insert: HTMLElement | string - A string or a DOM element of the content inside the item. Nothing: If the developer chooses to manipulate the item element directly, the function should return nothing.\n",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "item.renderer",
          "properties": {
            "componentElement": {
              "description": "The TreeView element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the item (not available for static content).",
              "type": "D"
            },
            "depth": {
              "description": "The depth of the item. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "index": {
              "description": "The index of the item relative to its parent, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the item.",
              "type": "K"
            },
            "leaf": {
              "description": "Whether the item is a leaf item.",
              "type": "boolean"
            },
            "parentElement": {
              "description": "The TreeView item element. The renderer can use this to directly append content.",
              "type": "Element"
            },
            "parentKey": {
              "description": "The key of the parent item (not available for root item).",
              "type": "K"
            }
          }
        },
        "selectable": {
          "description": "A function that returns whether the item can be selected.\nIf selectionMode is set to \"none\" this attribute is ignored.\nSee itemContext in the introduction\nto see the object passed into the selectable function.\nIf no function is specified, then all the items will be selectable.",
          "type": "function",
          "displayName": "Selectable",
          "value": null,
          "help": "item.selectable",
          "properties": {
            "componentElement": {
              "description": "The TreeView element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the item (not available for static content).",
              "type": "D"
            },
            "depth": {
              "description": "The depth of the item. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "index": {
              "description": "The index of the item relative to its parent, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the item.",
              "type": "K"
            },
            "leaf": {
              "description": "Whether the item is a leaf item.",
              "type": "boolean"
            },
            "parentElement": {
              "description": "The TreeView item element. The renderer can use this to directly append content.",
              "type": "Element"
            },
            "parentKey": {
              "description": "The key of the parent item (not available for root item).",
              "type": "K"
            }
          }
        }
      }
    },
    "selection": {
      "description": "The current selections in the TreeView. An empty array indicates nothing is selected.",
      "type": "Array<any>",
      "displayName": "Selection",
      "value": [],
      "writeback": true,
      "help": "selection"
    },
    "selectionMode": {
      "description": "Specifies whether selection can be made and the cardinality of selection in the TreeView.",
      "type": "string",
      "displayName": "Selection Mode",
      "value": "none",
      "help": "selectionMode",
      "enumValues": [
        "multiple",
        "none",
        "single"
      ],
      "propertyEditorValues": {
        "multiple": {
          "description": "Multiple items can be selected at the same time.",
          "displayName": "Multiple"
        },
        "none": {
          "description": "Selection is disabled.",
          "displayName": "None"
        },
        "single": {
          "description": "Only one item can be selected at a time.",
          "displayName": "Single"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations"
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateEnd": {
      "description": "Triggered when the default animation of a particular action has ended.\nNote this event will not be triggered if application cancelled the default animation on animateStart.",
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "The action that started the animation. See animation section for a list of actions.",
          "type": "'expand'|'collapse'"
        },
        "element": {
          "description": "The target of animation.",
          "type": "Element"
        }
      }
    },
    "ojAnimateStart": {
      "description": "Triggered when the default animation of a particular action is about to start.\nThe default animation can be cancelled by calling event.preventDefault().",
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "The action that starts the animation. See animation section for a list of actions.",
          "type": "'expand'|'collapse'"
        },
        "element": {
          "description": "The target of animation.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault() to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
          "type": "function"
        }
      }
    },
    "ojBeforeCollapse": {
      "description": "Triggered before an item is collapsed via the expanded attribute or via the UI.\nCall event.preventDefault() to veto the event, which prevents collapsing the item.",
      "cancelable": true,
      "help": "beforeCollapse",
      "detail": {
        "key": {
          "description": "The key of the item to be collapsed.",
          "type": "any"
        },
        "item": {
          "description": "The item to be collapsed.",
          "type": "Element"
        }
      }
    },
    "ojBeforeCurrentItem": {
      "description": "Triggered before the current item is changed via the currentItem attribute or via the UI.\nCall event.preventDefault() to veto the event, which prevents changing the current item.",
      "cancelable": true,
      "help": "beforeCurrentItem",
      "detail": {
        "previousKey": {
          "description": "The key of the previous item.",
          "type": "any"
        },
        "previousItem": {
          "description": "The previous item.",
          "type": "Element"
        },
        "key": {
          "description": "The key of the new current item.",
          "type": "any"
        },
        "item": {
          "description": "The new current item.",
          "type": "Element"
        }
      }
    },
    "ojBeforeExpand": {
      "description": "Triggered before an item is expanded via the expanded attribute or via the UI.\nCall event.preventDefault() to veto the event, which prevents expanding the item.",
      "cancelable": true,
      "help": "beforeExpand",
      "detail": {
        "key": {
          "description": "The key of the item to be expanded.",
          "type": "any"
        },
        "item": {
          "description": "The item to be expanded.",
          "type": "Element"
        }
      }
    },
    "ojCollapse": {
      "description": "Triggered after an item has been collapsed.",
      "help": "collapse",
      "detail": {
        "key": {
          "description": "The key of the item that was just collapsed.",
          "type": "any"
        },
        "item": {
          "description": "The item that was just collapsed.",
          "type": "Element"
        }
      }
    },
    "ojExpand": {
      "description": "Triggered after an item has been expanded.",
      "help": "expand",
      "detail": {
        "key": {
          "description": "The key of the item that was just expanded.",
          "type": "any"
        },
        "item": {
          "description": "The item that was just expanded.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}