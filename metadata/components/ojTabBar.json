{
  "name": "oj-tab-bar",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Tab Bar",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-tabbar-stack-icon-label"
      ],
      "description": "Displays horizontal Tab Bar with icon and label stacked. Applicable only when \"edge\" is \"top\"."
    },
    {
      "styleGroup": [
        "oj-tabbar-category-divider"
      ],
      "description": "Use this class to add horizontal divider line between two categories of items."
    },
    {
      "styleGroup": [
        "oj-tabbar-item-icon"
      ],
      "description": "Use this class to add icon to list item."
    },
    {
      "styleGroup": [
        "oj-tabbar-item-title"
      ],
      "description": "When arbitrary content is placed inside item's content area, it's title text can be marked using this style class. This helps component in identifying the Item's label."
    },
    {
      "styleGroup": [
        "oj-tabbar-item-text-wrap"
      ],
      "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when \"overflow\" attribute is set to \"popup\"."
    },
    {
      "styleGroup": [
        "oj-tabbar-item-dividers"
      ],
      "description": "Use this class to show dividers between horizontal tab bar items."
    },
    {
      "styleGroup": [
        "oj-sm-condense"
      ],
      "description": "Use this class to condense horizontal tab bar items on small screens and larger."
    },
    {
      "styleGroup": [
        "oj-md-condense"
      ],
      "description": "Use this class to condense horizontal tab bar items on medium screens and larger."
    },
    {
      "styleGroup": [
        "oj-lg-condense"
      ],
      "description": "Use this class to condense horizontal tab bar items on large screens and larger."
    },
    {
      "styleGroup": [
        "oj-xl-condense"
      ],
      "description": "Use this class to condense horizontal tab bar items on extra large screens and larger."
    },
    {
      "styleGroup": [
        "oj-tabbar-nofollow-link"
      ],
      "description": "Use this class to prevent automatic navigation to the url specified on \"&lt;a\n\" tag's \"href\" attribute. In this case, navigation can be handled programmatically by using \"selectionChanged\" event. This is useful to execute some custom tasks before browser triggers navigation."
    },
    {
      "styleGroup": [
        "oj-removable"
      ],
      "description": "Use this class to make an item removable."
    },
    {
      "styleGroup": [
        "oj-tabbar-hide-remove-icon"
      ],
      "description": "Use this class to hide the remove icon. In this case, Item can be removed using context menu."
    },
    {
      "styleGroup": [
        "oj-focus-highlight"
      ],
      "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control.\nThe \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load.\nThe application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are:\n\"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value.\n\"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism.\n\"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result.\nTo change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
    }
  ],
  "description": "Displays tab bar with advanced interactive features.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojTabBar.html",
  "properties": {
    "as": {
      "description": "Gets and sets the alias for the current item when referenced inside the item template.",
      "type": "string",
      "displayName": "As",
      "value": "",
      "help": "as"
    },
    "currentItem": {
      "description": "Gets and sets the key of the item that should have keyboard focus.",
      "type": "any",
      "displayName": "Current Item",
      "value": null,
      "writeback": true,
      "help": "currentItem"
    },
    "data": {
      "description": "Gets and sets the data provider for tabbar.",
      "type": "oj.TableDataSource|oj.DataProvider|null",
      "displayName": "Data",
      "value": null,
      "help": "data"
    },
    "display": {
      "description": "Gets and sets whether all or only icons need to be displayed.",
      "type": "string",
      "displayName": "Display",
      "value": "all",
      "help": "display",
      "enumValues": [
        "all",
        "icons"
      ],
      "propertyEditorValues": {
        "all": {
          "description": "Display both the label and icons.",
          "displayName": "All"
        },
        "icons": {
          "description": "Display only the icons.",
          "displayName": "Icons"
        }
      }
    },
    "edge": {
      "description": "Gets and sets the edge position of the Tab Bar.",
      "type": "string",
      "displayName": "Edge",
      "value": "start",
      "help": "edge",
      "enumValues": [
        "bottom",
        "end",
        "start",
        "top"
      ],
      "propertyEditorValues": {
        "bottom": {
          "description": "This renders list items horizontally. Generally used when tab bar placed on bottom of content section.",
          "displayName": "Bottom"
        },
        "end": {
          "description": "This renders list items vertically. Generally used when tab bar placed on right/end of content section.",
          "displayName": "End"
        },
        "start": {
          "description": "This renders list items vertically. Generally used when tab bar placed on left/start of content section.",
          "displayName": "Start"
        },
        "top": {
          "description": "This renders list items horizontally. Generally used when tab bar placed on top of content section.",
          "displayName": "Top"
        }
      }
    },
    "item": {
      "description": "Customize the functionalities of each tab on Tab bar.",
      "type": "object",
      "displayName": "Item",
      "help": "item",
      "properties": {
        "renderer": {
          "description": "Gets and sets the renderer for the tab item.",
          "type": "function|null",
          "displayName": "Renderer",
          "value": null,
          "help": "item.renderer",
          "properties": {
            "componentElement": {
              "description": "oj-tab-bar element",
              "type": "Element"
            },
            "datasource": {
              "description": "A reference to the data source object. (Not available for static content)",
              "type": "oj.DataProvider<K, D>"
            },
            "index": {
              "description": "The index of the item, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The Key of the item.",
              "type": "K"
            },
            "data": {
              "description": "The data object for the item.",
              "type": "D"
            },
            "parentElement": {
              "description": "The list item element. The renderer can use this to directly append content.",
              "type": "Element"
            }
          }
        },
        "selectable": {
          "description": "Gets and sets whether the tab can be selected.",
          "type": "function|boolean",
          "displayName": "Selectable",
          "value": true,
          "help": "item.selectable",
          "properties": {
            "componentElement": {
              "description": "oj-tab-bar element",
              "type": "Element"
            },
            "datasource": {
              "description": "A reference to the data source object. (Not available for static content)",
              "type": "oj.DataProvider<K, D>"
            },
            "index": {
              "description": "The index of the item, where 0 is the index of the first item.",
              "type": "number"
            },
            "key": {
              "description": "The Key of the item.",
              "type": "K"
            },
            "data": {
              "description": "The data object for the item.",
              "type": "D"
            },
            "parentElement": {
              "description": "The list item element. The renderer can use this to directly append content.",
              "type": "Element"
            }
          }
        }
      }
    },
    "overflow": {
      "description": "Gets and sets overflow behaviour for Tab bar.",
      "type": "string",
      "displayName": "Overflow",
      "value": "hidden",
      "help": "overflow",
      "enumValues": [
        "hidden",
        "popup"
      ],
      "propertyEditorValues": {
        "hidden": {
          "description": "overflow is clipped, and the rest of the content will be invisible.",
          "displayName": "Hidden"
        },
        "popup": {
          "description": "popup menu will be shown with overflowed items. NOTE: Setting overflow to popup can trigger browser reflow, so only set it when it is actually required.",
          "displayName": "Popup"
        }
      }
    },
    "reorderable": {
      "description": "Enable or disable the item reordering functionalities.",
      "type": "string",
      "displayName": "Reorderable",
      "value": "disabled",
      "help": "reorderable",
      "enumValues": [
        "disabled",
        "enabled"
      ],
      "propertyEditorValues": {
        "disabled": {
          "description": "Disables reordering of items in tabbar.",
          "displayName": "Disabled"
        },
        "enabled": {
          "description": "Enables reordering of items in tabbar.",
          "displayName": "Enabled"
        }
      }
    },
    "selection": {
      "description": "Gets and sets the key of the selected item.",
      "type": "any",
      "displayName": "Selection",
      "value": null,
      "writeback": true,
      "help": "selection"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "accessibleReorderAfterItem": {
          "description": "Provides properties to customize the screen reader text when the tentative drop target is after a certain item.",
          "type": "string",
          "displayName": "Accessible Reorder After Item",
          "help": "translations.accessibleReorderAfterItem"
        },
        "accessibleReorderBeforeItem": {
          "description": "Provides properties to customize the screen reader text when the tentative drop target is before a certain item.",
          "type": "string",
          "displayName": "Accessible Reorder Before Item",
          "help": "translations.accessibleReorderBeforeItem"
        },
        "accessibleReorderTouchInstructionText": {
          "description": "Provides properties to customize the screen reader touch instructional text for reordering items.",
          "type": "string",
          "displayName": "Accessible Reorder Touch Instruction Text",
          "help": "translations.accessibleReorderTouchInstructionText"
        },
        "labelCut": {
          "description": "Provides properties to customize the context menu cut label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Cut",
          "help": "translations.labelCut"
        },
        "labelPasteAfter": {
          "description": "Provides properties to customize the context menu paste after label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Paste After",
          "help": "translations.labelPasteAfter"
        },
        "labelPasteBefore": {
          "description": "Provides properties to customize the context menu paste before label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Paste Before",
          "help": "translations.labelPasteBefore"
        },
        "labelRemove": {
          "description": "Provides properties to customize the context menu remove label.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Remove",
          "help": "translations.labelRemove"
        },
        "msgFetchingData": {
          "description": "Provides properties to customize the message text used by Tab Bar when waiting for data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg Fetching Data",
          "help": "translations.msgFetchingData"
        },
        "msgNoData": {
          "description": "Provides properties to customize the message text used by Tab Bar when there are no items.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Msg No Data",
          "help": "translations.msgNoData"
        },
        "overflowItemLabel": {
          "description": "Label for overflow menu button.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Overflow Item Label",
          "help": "translations.overflowItemLabel"
        },
        "removeCueText": {
          "description": "Text cue for the removable tab, used as the aria-label for the close icon.",
          "type": "string",
          "displayName": "Remove Cue Text",
          "help": "translations.removeCueText"
        },
        "selectedLabel": {
          "description": "Provides text to read to screen reader when an item is selected.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Selected Label",
          "help": "translations.selectedLabel"
        }
      }
    },
    "truncation": {
      "description": "Gets and sets whether truncation needs to be applied.",
      "type": "string",
      "displayName": "Truncation",
      "value": "none",
      "help": "truncation",
      "enumValues": [
        "none",
        "progressive"
      ],
      "propertyEditorValues": {
        "none": {
          "description": "tabs always take up the space needed by the title texts.",
          "displayName": "None"
        },
        "progressive": {
          "description": "If not enough space is available to display all of the tabs, then the width of each tab title is restricted just enough to allow all tabs to fit. All tab titles that are truncated are displayed with ellipses. However the width of each tab title will not be truncated below $tabBarTruncatedLabelMinWidth.",
          "displayName": "Progressive"
        }
      }
    }
  },
  "methods": {
    "getContextByNode": {
      "description": "Returns an object with context for the given child DOM node. This will always contain the subid for the node, defined as the 'subId' property on the context object. Additional component specific information may also be included. For more details on returned objects, see context objects.",
      "help": "getContextByNode",
      "params": [
        {
          "name": "node",
          "description": "The child DOM node",
          "type": "Element"
        }
      ],
      "return": "object|null"
    },
    "refresh": {
      "description": "Refreshes the visual state of the Tab Bar.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Event handler for when the default animation of a particular action is about to start.",
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "the action that starts the animation. See animation section for a list of actions.",
          "type": "string"
        },
        "element": {
          "description": "the target of animation.",
          "type": "Element"
        },
        "endCallback": {
          "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Event handler for when the default animation of a particular action has ended.",
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "the action that started the animation. See animation section for a list of actions.",
          "type": "string"
        },
        "element": {
          "description": "the target of animation.",
          "type": "Element"
        }
      }
    },
    "ojBeforeSelect": {
      "description": "Event handler for when before the selection is changed.",
      "cancelable": true,
      "help": "beforeSelect",
      "detail": {
        "key": {
          "description": "Selected list item Key.",
          "type": "any"
        },
        "item": {
          "description": "Selected list item.",
          "type": "Element"
        }
      }
    },
    "ojBeforeCurrentItem": {
      "description": "Event handler for when before the current item is changed.",
      "cancelable": true,
      "help": "beforeCurrentItem",
      "detail": {
        "previousKey": {
          "description": "the Key of the previous item",
          "type": "any"
        },
        "previousItem": {
          "description": "the previous item",
          "type": "Element"
        },
        "key": {
          "description": "the Key of the new current item",
          "type": "any"
        },
        "item": {
          "description": "the new current item",
          "type": "Element"
        }
      }
    },
    "ojBeforeDeselect": {
      "description": "Event handler for when before tab is deselected.",
      "cancelable": true,
      "help": "beforeDeselect",
      "detail": {
        "fromKey": {
          "description": "the Key of the tab item being navigated from",
          "type": "any"
        },
        "fromItem": {
          "description": "the tab item being navigated from",
          "type": "Element"
        },
        "toKey": {
          "description": "the Key of the tab item being navigated to",
          "type": "any"
        },
        "toItem": {
          "description": "the tab item being navigated to",
          "type": "Element"
        }
      }
    },
    "ojDeselect": {
      "description": "Event handler for when a tab is deselected.",
      "help": "deselect",
      "detail": {
        "fromKey": {
          "description": "the Key of the tab item being navigated from",
          "type": "any"
        },
        "fromItem": {
          "description": "the tab item being navigated from",
          "type": "Element"
        },
        "toKey": {
          "description": "the Key of the tab item being navigated to",
          "type": "any"
        },
        "toItem": {
          "description": "the tab item being navigated to",
          "type": "Element"
        }
      }
    },
    "ojBeforeRemove": {
      "description": "Event handler for when a tab is about to be removed.",
      "cancelable": true,
      "help": "beforeRemove",
      "detail": {
        "item": {
          "description": "Item being removed",
          "type": "Element"
        },
        "key": {
          "description": "Key of the item being removed",
          "type": "any"
        }
      }
    },
    "ojRemove": {
      "description": "Event handler for when a tab is removed.",
      "help": "remove",
      "detail": {
        "item": {
          "description": "Item removed",
          "type": "Element"
        },
        "key": {
          "description": "Key of the item removed",
          "type": "any"
        }
      }
    },
    "ojReorder": {
      "description": "Event handler for when a tab is reordered.",
      "help": "reorder",
      "detail": {
        "item": {
          "description": "Item to be moved",
          "type": "Element"
        },
        "position": {
          "description": "the drop position relative to the reference item. Possible values are \"before\" and \"after\".",
          "type": "'before'|'after'"
        },
        "reference": {
          "description": "the item where the moved items are drop on.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "itemTemplate": {
      "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. The slot must be a <template> element.\nThe content of the template could either include the <li> element, in which case that will be used as\nthe root of the item. Or it can be just the content which excludes the <li> element.\nWhen the template is executed for each item, it will have access to the binding context containing the following properties: $current - an object that contains information for the current item. (See the table below for a list of properties available on $current) alias - if as attribute was specified, the value will be used to provide an application-named alias for $current.\n",
      "maxItems": 1,
      "help": "itemTemplate",
      "data": {
        "componentElement": {
          "description": "The <oj-navigation-list> custom element",
          "type": "Element"
        },
        "data": {
          "description": "The data for the current item being rendered",
          "type": "object"
        },
        "index": {
          "description": "The zero-based index of the curent item",
          "type": "number"
        },
        "key": {
          "description": "The key of the current item being rendered",
          "type": "any"
        }
      }
    }
  }
}