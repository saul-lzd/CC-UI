{
  "name": "oj-combobox-one",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Single-select Combobox",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-form-control-text-align-right"
      ],
      "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
    },
    {
      "styleGroup": [
        "oj-form-control-text-align-start"
      ],
      "description": "Aligns the text to the left in ltr and to the right in rtl"
    },
    {
      "styleGroup": [
        "oj-form-control-text-align-end"
      ],
      "description": "Aligns the text to the right in ltr and to the left in rtl"
    }
  ],
  "description": "A dropdown list that supports single selection, text input, and search filtering.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojComboboxOne.html",
  "properties": {
    "asyncValidators": {
      "description": "Specifies a list of async validators for performing async validation by the element.",
      "type": "Array<Object>",
      "displayName": "Async Validators",
      "value": [],
      "help": "asyncValidators"
    },
    "converter": {
      "description": "An object to convert value.",
      "type": "object|null",
      "displayName": "Converter",
      "value": null,
      "help": "converter",
      "properties": {
        "type": {
          "description": "the conveter type registered with the oj.ConverterFactory. Supported types are 'number' and 'datetime'. See ConverterFactory for details. E.g., {converter: {type: 'number'}",
          "type": "'number'|'datetime'"
        },
        "options": {
          "description": "optional Object literal of options that the converter expects. See IntlNumberConverter for options supported by the number converter. E.g., {converter: {type: 'number', options: {style: 'decimal'}}",
          "type": "object"
        }
      }
    },
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By",
      "help": "describedBy"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false,
      "help": "disabled"
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "object",
      "displayName": "Display Options",
      "help": "displayOptions",
      "properties": {
        "converterHint": {
          "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Converter Hint",
          "value": [
            "placeholder",
            "notewindow"
          ],
          "help": "displayOptions.converterHint"
        },
        "helpInstruction": {
          "description": "Display options for auxilliary help instruction text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Help Instruction",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.helpInstruction"
        },
        "messages": {
          "description": "Display options for auxilliary message text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Messages",
          "value": [
            "inline"
          ],
          "help": "displayOptions.messages"
        },
        "validatorHint": {
          "description": "Display options for auxilliary validator hint text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Validator Hint",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.validatorHint"
        }
      }
    },
    "filterOnOpen": {
      "description": "Whether to filter the drop down list on open.",
      "type": "string",
      "displayName": "Filter On Open",
      "value": "none",
      "help": "filterOnOpen",
      "enumValues": [
        "none",
        "rawValue"
      ],
      "propertyEditorValues": {
        "none": {
          "description": "Show all available options without filtering on open.",
          "displayName": "None"
        },
        "rawValue": {
          "description": "Filter the drop down list on open with the rawValue (current display value).",
          "displayName": "Raw Value"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "object",
      "displayName": "Help",
      "help": "help",
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is \"\".",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
      "type": "object",
      "displayName": "Help Hints",
      "translatable": true,
      "help": "helpHints",
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label.",
          "type": "string",
          "displayName": "Definition",
          "value": "",
          "help": "helpHints.definition"
        },
        "source": {
          "description": "Hint for help source URL associated with the label.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "helpHints.source"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true,
      "help": "labelHint"
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true,
      "help": "messagesCustom"
    },
    "minLength": {
      "description": "The minimum number of characters a user must type before search filtering is performed.",
      "type": "number",
      "displayName": "Min Length",
      "value": 0,
      "minimum": 0,
      "help": "minLength"
    },
    "optionRenderer": {
      "description": "The renderer function that renders the content of each option.",
      "type": "null|function",
      "displayName": "Option Renderer",
      "value": null,
      "help": "optionRenderer",
      "properties": {
        "component": {
          "description": "A reference to the combobox element.",
          "type": "Element"
        },
        "parent": {
          "description": "The parent of the data item. The parent is null for root node.",
          "type": "Element"
        },
        "index": {
          "description": "The index of the option, where 0 is the index of the first option. In the hierarchical case the index is relative to its parent.",
          "type": "number"
        },
        "depth": {
          "description": "The depth of the option. The depth of the first level children under the invisible root is 0.",
          "type": "number"
        },
        "leaf": {
          "description": "Whether the option is a leaf or a group.",
          "type": "boolean"
        },
        "data": {
          "description": "The data object for the option.",
          "type": "object"
        },
        "parentElement": {
          "description": "The option label element. The renderer can use this to directly append content.",
          "type": "Element"
        }
      }
    },
    "options": {
      "description": "The option items for the Combobox.",
      "type": "Array<(oj.ojCombobox.Option|oj.ojCombobox.Optgroup)>|oj.DataProvider|null",
      "displayName": "Options",
      "value": null,
      "help": "options",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "disabled": {
              "description": "Option group is disabled.",
              "type": "boolean"
            },
            "label": {
              "description": "The display label for the option group.",
              "type": "string"
            },
            "children": {
              "description": "The Option or Optgroup children.",
              "type": "Array<(oj.ojCombobox.Option|oj.ojCombobox.Optgroup)>"
            }
          }
        }
      }
    },
    "optionsKeys": {
      "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
      "type": "oj.ojCombobox.OptionsKeys",
      "displayName": "Options Keys",
      "value": null,
      "help": "optionsKeys",
      "properties": {
        "childKeys": {
          "description": "The object for the child keys.",
          "type": "oj.ojCombobox.OptionsKeys",
          "displayName": "Child Keys",
          "value": null,
          "help": "optionsKeys.childKeys",
          "properties": {
            "label": {
              "description": "The key name for the label.",
              "type": "string"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string"
            },
            "children": {
              "description": "The key name for the children.",
              "type": "string"
            },
            "childKeys": {
              "description": "The object for the child keys.",
              "type": "oj.ojCombobox.OptionsKeys",
              "properties": {
                "label": {
                  "description": "The key name for the label.",
                  "type": "string"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string"
                },
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "oj.ojCombobox.OptionsKeys"
                }
              }
            }
          }
        },
        "children": {
          "description": "The key name for the children.",
          "type": "string",
          "displayName": "Children",
          "value": null,
          "help": "optionsKeys.children"
        },
        "label": {
          "description": "The key name for the label.",
          "type": "string",
          "displayName": "Label",
          "value": null,
          "help": "optionsKeys.label"
        },
        "value": {
          "description": "The key name for the value.",
          "type": "string",
          "displayName": "Value",
          "value": null,
          "help": "optionsKeys.value"
        }
      }
    },
    "pickerAttributes": {
      "description": "The style attributes for the drop down.",
      "type": "object",
      "displayName": "Picker Attributes",
      "value": null,
      "help": "pickerAttributes",
      "properties": {
        "style": {
          "description": "The css style to append to the picker.",
          "type": "string"
        },
        "class": {
          "description": "The css class to append to the picker.",
          "type": "string"
        }
      }
    },
    "placeholder": {
      "description": "A short hint that can be displayed before user selects or enters a value.",
      "type": "string|null",
      "displayName": "Placeholder",
      "value": null,
      "help": "placeholder"
    },
    "rawValue": {
      "description": "The currently displayed text retrieved from the input field.",
      "type": "string",
      "displayName": "Raw Value",
      "value": null,
      "writeback": true,
      "readOnly": true,
      "help": "rawValue"
    },
    "required": {
      "description": "Specifies whether a value is required.",
      "type": "boolean",
      "displayName": "Required",
      "value": false,
      "help": "required"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "filterFurther": {
          "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
          "type": "string",
          "displayName": "Filter Further",
          "help": "translations.filterFurther"
        },
        "noMatchesFound": {
          "description": "No options found text for drop down.",
          "type": "string",
          "displayName": "No Matches Found",
          "help": "translations.noMatchesFound"
        },
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "object",
          "displayName": "Required",
          "help": "translations.required",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Hint",
              "help": "translations.required.hint"
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail",
              "help": "translations.required.messageDetail"
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary",
              "help": "translations.required.messageSummary"
            }
          }
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "help": "valid",
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "validators": {
      "description": "Specifies a list of validators for performing validation by the element.",
      "type": "Array",
      "displayName": "Validators",
      "value": [],
      "help": "validators",
      "properties": {
        "type": {
          "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
          "type": "string"
        },
        "options": {
          "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
          "type": "object"
        }
      }
    },
    "value": {
      "description": "The value of the element.",
      "type": "any",
      "displayName": "Value",
      "value": null,
      "writeback": true,
      "help": "value"
    },
    "valueOption": {
      "description": "The current value of the element and its associated display label.",
      "type": "null|object",
      "displayName": "Value Option",
      "value": null,
      "writeback": true,
      "help": "valueOption",
      "properties": {
        "value": {
          "description": "current value of JET Combobox",
          "type": "any"
        },
        "label": {
          "description": "display label of value above. If missing, String(value) is used.",
          "type": "string"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the combobox. This method does not accept any arguments.",
      "help": "refresh",
      "return": "void"
    },
    "validate": {
      "description": " All messages are cleared, including custom messages added by the app. If no converter is present then processing continues to next step. If a converter is present, the UI value is first converted (i.e., parsed). If there is a parse error then the messages are shown. If there are no validators setup for the component the value option is updated using the display value. Otherwise all validators are run in sequence using the parsed value from the previous step. The implicit required validator is run first if the component is marked required. When a validation error is encountered it is remembered and the next validator in the sequence is run. At the end of validation if there are errors, the messages are shown. If there were no errors, then the value option is updated. ",
      "help": "validate",
      "return": "Promise"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes -\nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be\nerased when this method is called.",
      "help": "reset",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them.\nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages().\n\nIf there were no deferred messages this method simply returns.\n",
      "help": "showMessages",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojValueUpdated": {
      "description": "Event handler for when the value is submitted by the user.",
      "help": "valueUpdated",
      "detail": {
        "value": {
          "description": "the current value",
          "type": "any"
        },
        "previousValue": {
          "description": "the previous value",
          "type": "any"
        }
      }
    },
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "": {
      "description": "The oj-combobox-one element accepts oj-option elements as children.",
      "displayName": "default",
      "help": "Default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "end": {
      "description": "The end slot is for replacing combobox one's drop down arrow and the divider. For example, a magnifying glass icon for a search field can be provided in this slot. When the slot is provided with empty content, nothing will be rendered in the slot. When the slot is not provided, the default drop down arrow icon and the divider will be rendered.",
      "help": "end"
    }
  }
}