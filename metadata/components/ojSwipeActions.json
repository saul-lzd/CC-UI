{
  "name": "oj-swipe-actions",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Swipe Actions",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-swipeactions-container"
      ],
      "description": "Designed for use with item in oj-list-view that contains the oj-swipe-actions element, specifically this will remove the padding around the content of the item so that the swipe actions can take the full height.\nIs applied to the root of each item in oj-list-view containing the oj-swipe-actions element."
    },
    {
      "styleGroup": [
        "oj-swipeactions-neutral"
      ],
      "description": "Designed for use with an action item that shows more available actions that users can perform.\nIs applied to the \"oj-option\" element that represents the action item."
    },
    {
      "styleGroup": [
        "oj-swipeactions-attention"
      ],
      "description": "Designed for use with an action item that tags the associated item in oj-list-view.\nIs applied to the \"oj-option\" element that represents the action item."
    },
    {
      "styleGroup": [
        "oj-swipeactions-danger"
      ],
      "description": "Designed for use with an action item that performs an explicit action like deleting the associated item in oj-list-view.\nIs applied to the \"oj-option\" element that represents the action item."
    },
    {
      "styleGroup": [
        "oj-swipeactions-default"
      ],
      "description": "Designed for use with an action item that should get all the space when user swipes pass the threshold distance. This is usually the last item within the template.\nIs applied to the \"oj-option\" element that represents the default action item."
    }
  ],
  "description": "Adds swipe-to-reveal functionality to elements such as items in ListView.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojSwipeActions.html",
  "properties": {
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "ariaHideActionsDescription": {
          "description": "Label assigned to an anchor tag used for hidding start/end swipe actions using keyboard or accessibility agents such as VoiceOver.",
          "type": "string",
          "displayName": "Aria Hide Actions Description",
          "help": "translations.ariaHideActionsDescription"
        },
        "ariaShowEndActionsDescription": {
          "description": "Label assigned to an anchor tag used for showing end swipe actions using keyboard or accessibility agents such as VoiceOver.",
          "type": "string",
          "displayName": "Aria Show End Actions Description",
          "help": "translations.ariaShowEndActionsDescription"
        },
        "ariaShowStartActionsDescription": {
          "description": "Label assigned to an anchor tag used for showing start swipe actions using keyboard or accessibility agents such as VoiceOver.",
          "type": "string",
          "displayName": "Aria Show Start Actions Description",
          "help": "translations.ariaShowStartActionsDescription"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Re-initialize the swipe actions.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAction": {
      "description": "Triggered when an action item is selected or when the default action is triggered.",
      "help": "action"
    }
  },
  "slots": {
    "": {
      "description": "When using SwipeActions within ListView, any content for the item in ListView should be added as child element in SwipeActions.",
      "displayName": "default",
      "help": "Default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "end": {
      "description": "The end slot is used to specify the action bar that appears when user swipes from end to start on its container. The slot must be a <template> element.\n\nWhen the template is executed, it will have access to the parent binding context. For example, in the case of ListView, $current should return the data of the row containing the swipe actions.",
      "help": "end"
    },
    "start": {
      "description": "The start slot is used to specify the options to appears when user swipes from start to end on its container. The slot must be a <template> element.\n\nWhen the template is executed, it will have access to the parent binding context. For example, in the case of ListView, $current should return the data of the row containing the swipe actions.",
      "help": "start"
    }
  }
}