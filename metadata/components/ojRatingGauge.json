{
  "name": "oj-rating-gauge",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Rating Gauge",
  "type": "core",
  "description": "Displays information graphically, typically displaying or accepting user feedback on a product or service.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojRatingGauge.html",
  "properties": {
    "changed": {
      "description": "Whether there has been a value entered by the user.",
      "type": "boolean",
      "displayName": "Changed",
      "value": false,
      "writeback": true,
      "help": "changed"
    },
    "changedState": {
      "description": "The changed shape for the gauge. Displayed after the user has set a value, or when the changed attribute of the data object is set to true.",
      "type": "object",
      "displayName": "Changed State",
      "help": "changedState",
      "properties": {
        "borderColor": {
          "description": "The border color for changed state. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "changedState.borderColor"
        },
        "color": {
          "description": "The color for changed state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "changedState.color"
        },
        "shape": {
          "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Shape",
          "value": "star",
          "help": "changedState.shape"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape. For SVG images, the width and height must be defined on the SVG element as pixels.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "changedState.source"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the changed state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "changedState.svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the changed state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "changedState.svgStyle"
        }
      }
    },
    "hoverState": {
      "description": "The shape that displays on hover.",
      "type": "object",
      "displayName": "Hover State",
      "help": "hoverState",
      "properties": {
        "borderColor": {
          "description": "The border color for hover state. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "hoverState.borderColor"
        },
        "color": {
          "description": "The color for hover state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "hoverState.color"
        },
        "shape": {
          "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Shape",
          "value": "star",
          "help": "hoverState.shape"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape. For SVG images, the width and height must be defined on the SVG element as pixels.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "hoverState.source"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the hover state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "hoverState.svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the hover state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "hoverState.svgStyle"
        }
      }
    },
    "max": {
      "description": "Integer value specifying the maximum value of the gauge, which determines the number of shapes or images that are displayed.",
      "type": "number",
      "displayName": "Max",
      "value": 5,
      "minimum": 0,
      "help": "max"
    },
    "min": {
      "description": "The minimum value that can be set on the gauge by the end user. Does not affect the value set on the gauge by API.",
      "type": "number",
      "displayName": "Min",
      "value": 0,
      "minimum": 0,
      "help": "min"
    },
    "orientation": {
      "description": "Defines the type of rating gauge to be rendered.",
      "type": "string",
      "displayName": "Orientation",
      "value": "horizontal",
      "help": "orientation",
      "enumValues": [
        "horizontal",
        "vertical"
      ],
      "propertyEditorValues": {
        "horizontal": {
          "displayName": "Horizontal"
        },
        "vertical": {
          "displayName": "Vertical"
        }
      }
    },
    "preserveAspectRatio": {
      "description": "Specifies whether the images provided should show up at their defined aspect ratio. With 'none', the space is allocated evenly, and shapes could be stretched. With 'meet', The aspect ratio of the shape or image is taken into account when space is allocated. When aspect ratios conflict, the aspect ratio of the selectedState will be used.",
      "type": "string",
      "displayName": "Preserve Aspect Ratio",
      "value": "meet",
      "help": "preserveAspectRatio",
      "enumValues": [
        "meet",
        "none"
      ],
      "propertyEditorValues": {
        "meet": {
          "displayName": "Meet"
        },
        "none": {
          "displayName": "None"
        }
      }
    },
    "readonly": {
      "description": "Defines whether the value of the gauge can be changed by the end user.",
      "type": "boolean",
      "displayName": "Readonly",
      "value": false,
      "help": "readonly"
    },
    "selectedState": {
      "description": "The selected shape for the gauge.",
      "type": "object",
      "displayName": "Selected State",
      "help": "selectedState",
      "properties": {
        "borderColor": {
          "description": "The border color for selected state. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "selectedState.borderColor"
        },
        "color": {
          "description": "The color for selected state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "selectedState.color"
        },
        "shape": {
          "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Shape",
          "value": "star",
          "help": "selectedState.shape"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape. For SVG images, the width and height must be defined on the SVG element as pixels.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "selectedState.source"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the selected state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "selectedState.svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the selected state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "selectedState.svgStyle"
        }
      }
    },
    "step": {
      "description": "Specifies the increment by which values can be specified by the end user.",
      "type": "number",
      "displayName": "Step",
      "value": 1,
      "help": "step",
      "enumValues": [
        "0",
        "1",
        "5"
      ],
      "propertyEditorValues": {
        "0": {
          "displayName": "0"
        },
        "1": {
          "displayName": "1"
        },
        "5": {
          "displayName": "5"
        }
      }
    },
    "thresholds": {
      "description": "An array of objects with the following properties defining the thresholds for the gauge.",
      "type": "Array<Object>",
      "displayName": "Thresholds",
      "value": [],
      "help": "thresholds",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "borderColor": {
              "description": "The border color of the threshold.",
              "type": "string"
            },
            "color": {
              "description": "The color of the threshold.",
              "type": "string"
            },
            "max": {
              "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
              "type": "number"
            },
            "shortDesc": {
              "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
              "type": "string"
            }
          }
        }
      }
    },
    "tooltip": {
      "description": "An object containing an optional callback function for tooltip customization.",
      "type": "object",
      "displayName": "Tooltip",
      "help": "tooltip",
      "properties": {
        "renderer": {
          "description": "A function that returns a custom tooltip. The function takes a tooltip context argument,\nprovided by the gauge, and should return an object that contains only one of the two properties: insert: HTMLElement | string - An HTML element, which will be appended to the tooltip, or a tooltip string. preventDefault: true - Indicates that the tooltip should not be displayed. It is not necessary to return {preventDefault:false} to display tooltip, since this is a default behavior. ",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "tooltip.renderer",
          "properties": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The rating gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "trackResize": {
      "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
      "type": "string",
      "displayName": "Track Resize",
      "value": "on",
      "help": "trackResize",
      "enumValues": [
        "off",
        "on"
      ],
      "propertyEditorValues": {
        "off": {
          "displayName": "Off"
        },
        "on": {
          "displayName": "On"
        }
      }
    },
    "transientValue": {
      "description": "The transientValue is the read-only property for retrieving\nthe transient value from the rating gauge. It is triggered when hovering over the rating gauge.\n\nThis is a read-only property so page authors cannot set or change it directly.",
      "type": "number|null",
      "displayName": "Transient Value",
      "writeback": true,
      "readOnly": true,
      "help": "transientValue"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "componentName": {
          "description": "Used to describe the data visualization type for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Component Name",
          "help": "translations.componentName"
        },
        "labelAndValue": {
          "description": "Used to display a label and its value.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label And Value",
          "help": "translations.labelAndValue"
        },
        "labelClearSelection": {
          "description": "Text shown for clearing multiple selection on touch devices.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Clear Selection",
          "help": "translations.labelClearSelection"
        },
        "labelCountWithTotal": {
          "description": "Used to display a count out of a total.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Count With Total",
          "help": "translations.labelCountWithTotal"
        },
        "labelDataVisualization": {
          "description": "Label for data visualizations used for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Data Visualization",
          "help": "translations.labelDataVisualization"
        },
        "labelInvalidData": {
          "description": "Text shown when the component receives invalid data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label Invalid Data",
          "help": "translations.labelInvalidData"
        },
        "labelNoData": {
          "description": "Text shown when the component receives no data.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "Label No Data",
          "help": "translations.labelNoData"
        },
        "stateCollapsed": {
          "description": "Used to describe the collapsed state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Collapsed",
          "help": "translations.stateCollapsed"
        },
        "stateDrillable": {
          "description": "Used to describe a drillable object for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Drillable",
          "help": "translations.stateDrillable"
        },
        "stateExpanded": {
          "description": "Used to describe the expanded state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Expanded",
          "help": "translations.stateExpanded"
        },
        "stateHidden": {
          "description": "Used to describe the hidden state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Hidden",
          "help": "translations.stateHidden"
        },
        "stateIsolated": {
          "description": "Used to describe the isolated state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Isolated",
          "help": "translations.stateIsolated"
        },
        "stateMaximized": {
          "description": "Used to describe the maximized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Maximized",
          "help": "translations.stateMaximized"
        },
        "stateMinimized": {
          "description": "Used to describe the minimized state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Minimized",
          "help": "translations.stateMinimized"
        },
        "stateSelected": {
          "description": "Used to describe the selected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Selected",
          "help": "translations.stateSelected"
        },
        "stateUnselected": {
          "description": "Used to describe the unselected state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Unselected",
          "help": "translations.stateUnselected"
        },
        "stateVisible": {
          "description": "Used to describe the visible state for accessibility.\n\nSee the translations attribute for usage examples.",
          "type": "string",
          "displayName": "State Visible",
          "help": "translations.stateVisible"
        }
      }
    },
    "unselectedState": {
      "description": "The unselected shape for the gauge.",
      "type": "object",
      "displayName": "Unselected State",
      "help": "unselectedState",
      "properties": {
        "borderColor": {
          "description": "The border color for unselected state. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "unselectedState.borderColor"
        },
        "color": {
          "description": "The color for unselected state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "unselectedState.color"
        },
        "shape": {
          "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
          "type": "string",
          "displayName": "Shape",
          "value": "star",
          "help": "unselectedState.shape"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape. For SVG images, the width and height must be defined on the SVG element as pixels.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "unselectedState.source"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the unselected state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "unselectedState.svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the unselected state. The style class and inline style will override any other styling specified through the properties. Does not apply if custom image is specified.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "unselectedState.svgStyle"
        }
      }
    },
    "value": {
      "description": "The value set on the gauge.",
      "type": "number|null",
      "displayName": "Value",
      "writeback": true,
      "minimum": "0",
      "help": "value"
    },
    "visualEffects": {
      "description": "Defines whether visual effects such as overlays are applied to the gauge.",
      "type": "string",
      "displayName": "Visual Effects",
      "value": "auto",
      "help": "visualEffects",
      "enumValues": [
        "auto",
        "none"
      ],
      "propertyEditorValues": {
        "auto": {
          "displayName": "Auto"
        },
        "none": {
          "displayName": "None"
        }
      }
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}