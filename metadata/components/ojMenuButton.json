{
  "name": "oj-menu-button",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Menu Button",
  "type": "core",
  "styleClasses": [
    {
      "styleGroup": [
        "oj-button-sm",
        "oj-button-lg",
        "oj-button-xl"
      ],
      "description": "Makes the button small, large, or extra large. Is applied to the Button's root element."
    },
    {
      "styleGroup": [
        "oj-button-primary"
      ],
      "description": "Draws attention to the button, often identifying the primary action in a set of buttons. Designed for use with a push button. In some themes, this class does nothing. Is applied to the Button's root element."
    },
    {
      "styleGroup": [
        "oj-button-confirm"
      ],
      "description": "Identifies an action to confirm. Designed for use with a push button. Is applied to the Button's root element."
    },
    {
      "styleGroup": [
        "oj-focus-highlight"
      ],
      "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control.\nThe \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load.\nThe application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are:\n\"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value.\n\"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism.\n\"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result.\nTo change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
    }
  ],
  "description": "A button that launches a menu when clicked.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojMenuButton.html",
  "properties": {
    "chroming": {
      "description": "Indicates in what states the button has chrome (background and border).",
      "type": "string",
      "displayName": "Chroming",
      "help": "chroming",
      "enumValues": [
        "full",
        "half",
        "outlined"
      ],
      "propertyEditorValues": {
        "full": {
          "description": "In typical themes, full-chrome buttons always have chrome.",
          "displayName": "Full"
        },
        "half": {
          "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
          "displayName": "Half"
        },
        "outlined": {
          "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state.",
          "displayName": "Outlined"
        }
      }
    },
    "disabled": {
      "description": "Specifies that the button element should be disabled.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false,
      "help": "disabled"
    },
    "display": {
      "description": "Specifies whether the button displays label and icons, or just icons.",
      "type": "string",
      "displayName": "Display",
      "value": "all",
      "help": "display",
      "enumValues": [
        "all",
        "icons"
      ],
      "propertyEditorValues": {
        "all": {
          "description": "Display both the label and icons.",
          "displayName": "All"
        },
        "icons": {
          "description": "Display only the icons.",
          "displayName": "Icons"
        }
      }
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations"
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the component.",
      "help": "refresh",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAction": {
      "description": "Triggered when a button is clicked. This will be triggered by keyboard events as well as mouse/touch events. To ensure keyboard accessibility, the only correct, supported way to react to the click of a button is to listen for this event. Click listeners and href navigation should not be used.",
      "bubbles": true,
      "cancelable": true,
      "help": "action"
    }
  },
  "slots": {
    "": {
      "description": "The default slot is the menu button's text label. The <oj-menu-button> element accepts plain text or DOM nodes as children for the default slot. A default slot label is required for all menu buttons for accessibility purposes. The label can be hidden using the display attribute. If a text node is provided it will be wrapped in a span.",
      "displayName": "default",
      "help": "Default"
    },
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    },
    "endIcon": {
      "description": "The endIcon slot is the menu button's end icon. The <oj-menu-button> element accepts DOM nodes as children with the endIcon slot. If no end icon is provided, a default end icon is used.",
      "help": "endIcon"
    },
    "menu": {
      "description": "The menu menu associatied with the menu button. The oj-menu-button element accepts a single oj-menu element as a child with the menu slot. See the [JET Menu]ojMenu for more information on setting up a menu.",
      "maxItems": 1,
      "help": "menu"
    },
    "startIcon": {
      "description": "The startIcon slot is the menu button's start icon. The <oj-menu-button> element accepts DOM nodes as children with the startIcon slot.",
      "help": "startIcon"
    }
  }
}