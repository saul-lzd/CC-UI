{
  "name": "oj-text-area",
  "version": "6.0.0",
  "jetVersion": "6.0.0",
  "displayName": "Text Area",
  "type": "core",
  "description": "Provides basic support for specifying a multi-line text value.",
  "help": "https://docs.oracle.com/en/middleware/jet/6/reference-api/oj.ojTextArea.html",
  "properties": {
    "asyncValidators": {
      "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n",
      "type": "Array<Object>",
      "displayName": "Async Validators",
      "value": [],
      "help": "asyncValidators"
    },
    "autocomplete": {
      "description": "Dictates component's autocomplete state.",
      "type": "string",
      "displayName": "Autocomplete",
      "value": "on",
      "help": "autocomplete"
    },
    "autofocus": {
      "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document.",
      "type": "boolean",
      "displayName": "Autofocus",
      "value": false,
      "help": "autofocus"
    },
    "converter": {
      "description": "a converter instance that duck types Converter. Or an object literal containing\nthe following properties.\n\nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n",
      "type": "object|null",
      "displayName": "Converter",
      "value": null,
      "help": "converter",
      "properties": {
        "type": {
          "description": "the converter type registered with the oj.ConverterFactory.\nSupported types are 'number' and 'datetime'. See ConverterFactory for details.\n\nE.g., converter='{\"type\": \"number\"}'",
          "type": "string"
        },
        "options": {
          "description": "optional Object literal of options that the converter expects.\nSee IntlNumberConverter for options supported by the number converter. See\nIntlDateTimeConverter for options supported by the date time converter. \nE.g., converter='{\"type\": \"number\", \"options\": {\"style\": \"decimal\"}}'",
          "type": "object"
        }
      }
    },
    "describedBy": {
      "description": "described the relationship between this component and another element.",
      "type": "string",
      "displayName": "Described By",
      "help": "describedBy"
    },
    "disabled": {
      "description": "Whether the component is disabled. The default is false.",
      "type": "boolean",
      "displayName": "Disabled",
      "value": false,
      "help": "disabled"
    },
    "displayOptions": {
      "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text.",
      "type": "object",
      "displayName": "Display Options",
      "help": "displayOptions",
      "properties": {
        "converterHint": {
          "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Converter Hint",
          "value": [
            "placeholder",
            "notewindow"
          ],
          "help": "displayOptions.converterHint"
        },
        "helpInstruction": {
          "description": "Display options for auxilliary help instruction text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Help Instruction",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.helpInstruction"
        },
        "messages": {
          "description": "Display options for auxilliary message text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Messages",
          "value": [
            "inline"
          ],
          "help": "displayOptions.messages"
        },
        "validatorHint": {
          "description": "Display options for auxilliary validator hint text that determines where it should be displayed\nin relation to the component.",
          "type": "Array<string>|string",
          "displayName": "Validator Hint",
          "value": [
            "notewindow"
          ],
          "help": "displayOptions.validatorHint"
        }
      }
    },
    "help": {
      "description": "Form component help information.\n\nThe properties supported on the help option are:",
      "type": "object",
      "displayName": "Help",
      "help": "help",
      "properties": {
        "instruction": {
          "description": "this represents advisory information for the component\nThe default value is \"\".",
          "type": "string"
        }
      }
    },
    "helpHints": {
      "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
      "type": "object",
      "displayName": "Help Hints",
      "translatable": true,
      "help": "helpHints",
      "properties": {
        "definition": {
          "description": "Hint for help definition text associated with the label.",
          "type": "string",
          "displayName": "Definition",
          "value": "",
          "help": "helpHints.definition"
        },
        "source": {
          "description": "Hint for help source URL associated with the label.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "helpHints.source"
        }
      }
    },
    "labelHint": {
      "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
      "type": "string",
      "displayName": "Label Hint",
      "value": "",
      "translatable": true,
      "help": "labelHint"
    },
    "messagesCustom": {
      "description": "List of messages an app would add to the component",
      "type": "Array<Object>",
      "displayName": "Messages Custom",
      "value": [],
      "writeback": true,
      "help": "messagesCustom"
    },
    "name": {
      "description": "It indicates the name of the component.",
      "type": "string",
      "displayName": "Name",
      "value": "",
      "help": "name"
    },
    "placeholder": {
      "description": "The placeholder text to set on the element.",
      "type": "string",
      "displayName": "Placeholder",
      "help": "placeholder"
    },
    "rawValue": {
      "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly.",
      "type": "string",
      "displayName": "Raw Value",
      "writeback": true,
      "readOnly": true,
      "help": "rawValue"
    },
    "readonly": {
      "description": "Dictates component's readonly state.",
      "type": "boolean",
      "displayName": "Readonly",
      "value": false,
      "help": "readonly"
    },
    "required": {
      "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute.",
      "type": "boolean",
      "displayName": "Required",
      "value": false,
      "help": "required"
    },
    "rows": {
      "description": "The number of visible text lines in the textarea. It can also be used to\ngive specific height to the textarea.",
      "type": "number",
      "displayName": "Rows",
      "help": "rows"
    },
    "translations": {
      "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
      "type": "object|null",
      "displayName": "Translations",
      "value": {},
      "translatable": true,
      "help": "translations",
      "properties": {
        "regexp": {
          "description": "Provides properties to customize the message text used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
          "type": "object",
          "displayName": "Regexp",
          "help": "translations.regexp",
          "properties": {
            "messageDetail": {
              "description": "Provides properties to customize the error message detail used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail",
              "help": "translations.regexp.messageDetail"
            },
            "messageSummary": {
              "description": "Provides properties to customize the error message summary used by the\nimplicit regexp validator associated to the InputText and TextArea components.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary",
              "help": "translations.regexp.messageSummary"
            }
          }
        },
        "required": {
          "description": "Provides properties to customize the summary, detail and hint text used by the\nimplicit required validator associated to any editable component that supports the\nrequired option.\n\nSee the translations attribute and\nrequired option for usage examples.",
          "type": "object",
          "displayName": "Required",
          "help": "translations.required",
          "properties": {
            "hint": {
              "description": "Hint text used by required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Hint",
              "help": "translations.required.hint"
            },
            "messageDetail": {
              "description": "Message text that describes the details of the required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Detail",
              "help": "translations.required.messageDetail"
            },
            "messageSummary": {
              "description": "Message text for summarizing a required validation error.\n\nSee the translations attribute for usage examples.",
              "type": "string",
              "displayName": "Message Summary",
              "help": "translations.required.messageSummary"
            }
          }
        }
      }
    },
    "valid": {
      "description": "The validity state of the component",
      "type": "string",
      "displayName": "Valid",
      "writeback": true,
      "readOnly": true,
      "help": "valid",
      "enumValues": [
        "invalidHidden",
        "invalidShown",
        "pending",
        "valid"
      ],
      "propertyEditorValues": {
        "invalidHidden": {
          "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Hidden"
        },
        "invalidShown": {
          "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
          "displayName": "Invalid Shown"
        },
        "pending": {
          "description": "The component is waiting for the validation state to be determined.\nThe \"pending\" state is set at the start of the convert/validate process.",
          "displayName": "Pending"
        },
        "valid": {
          "description": "The component is valid",
          "displayName": "Valid"
        }
      }
    },
    "validators": {
      "description": "List of synchronous validators used by component along with asynchronous validators\nand the implicit component validators when performing validation. Each item is either an\ninstance that duck types Validator, or is an Object literal containing the\nproperties listed below.\n\nImplicit validators are created by the element when certain attributes are present.\nFor example, if the required attribute\nis set, an implicit RequiredValidator is created.\nAt runtime when the component runs validation, it\ncombines all the implicit validators with all the validators\nspecified through this validators attribute\nand the async-validators attribute, and\nruns all of them.\n\n\nHints exposed by validators are shown in the notewindow by default, or as determined by the\n'validatorHint' property set on the display-options\nattribute.\n\n\n\nWhen validators property changes due to programmatic\nintervention, the component may decide to clear messages and run validation, based on the\ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to\nmessaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif component is valid when validators changes, component does nothing other than the\nsteps it always performs.\nif component is invalid and is showing messages when\nvalidators or\nasync-validators changes then all component messages are cleared and full validation run using the display value on the component. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n",
      "type": "Array<Object>",
      "displayName": "Validators",
      "value": [],
      "help": "validators",
      "extension": {
        "vbcs": {
          "itemProperties": {
            "type": {
              "description": "the validator type that has a ValidatorFactory that can\nbe retrieved using the Validation module. For a list of supported validators refer\nto ValidatorFactory. \nE.g., {validators: [{type: 'regExp'}]}",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the validator expects.\n\nE.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
              "type": "object"
            }
          }
        }
      }
    },
    "value": {
      "description": "The value of the editablevalue component",
      "type": "any",
      "displayName": "Value",
      "value": null,
      "writeback": true,
      "help": "value"
    }
  },
  "methods": {
    "refresh": {
      "description": "Refreshes the component. Usually called after dom changes have been made.",
      "help": "refresh",
      "return": "void"
    },
    "validate": {
      "description": "Validates the component's display value using the converter and all validators registered on\nthe component and updates the value option by performing the\nfollowing steps.\n\n\n\nAll messages are cleared, including custom messages added by the app. \nIf no converter is present then processing continues to next step. If a converter is\npresent, the UI value is first converted (i.e., parsed). If there is a parse error then\nthe messages are shown.\nIf there are no validators setup for the component the value\noption is updated using the display value. Otherwise all\nvalidators are run in sequence using the parsed value from the previous step. The implicit\nrequired validator is run first if the component is marked required. When a validation error is\nencountered it is remembered and the next validator in the sequence is run. \nAt the end of validation if there are errors, the messages are shown.\nIf there were no errors, then the\nvalue option is updated.\n",
      "help": "validate",
      "return": "Promise<string>"
    },
    "reset": {
      "description": "Resets the component by clearing all messages and messages attributes -\nmessagesCustom -\nand updates the component's display value using the attribute value. User entered values will be\nerased when this method is called.",
      "help": "reset",
      "return": "void"
    },
    "showMessages": {
      "description": "Takes all deferred messages and shows them.\nIt then updates the valid property; e.g.,\nif the valid state was \"invalidHidden\"\nbefore showMessages(), the valid state will become \"invalidShown\" after showMessages().\n\nIf there were no deferred messages this method simply returns.\n",
      "help": "showMessages",
      "return": "void"
    },
    "setProperty": {
      "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
      "help": "setProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to set. Supports dot notation for subproperty access.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The new value to set the property to.",
          "type": "any"
        }
      ],
      "return": "void"
    },
    "getProperty": {
      "description": "Retrieves a value for a property or a single subproperty for complex properties.",
      "help": "getProperty",
      "params": [
        {
          "name": "property",
          "description": "The property name to get. Supports dot notation for subproperty access.",
          "type": "string"
        }
      ],
      "return": "any"
    },
    "setProperties": {
      "description": "Performs a batch set of properties.",
      "help": "setProperties",
      "params": [
        {
          "name": "properties",
          "description": "An object containing the property and value pairs to set.",
          "type": "object"
        }
      ],
      "return": "void"
    }
  },
  "events": {
    "ojAnimateStart": {
      "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateStart",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        },
        "endCallback": {
          "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
          "type": "function"
        }
      }
    },
    "ojAnimateEnd": {
      "description": "Triggered when a default animation has ended.",
      "bubbles": true,
      "cancelable": true,
      "help": "animateEnd",
      "detail": {
        "action": {
          "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
          "type": "string"
        },
        "element": {
          "description": "The element being animated.",
          "type": "Element"
        }
      }
    }
  },
  "slots": {
    "contextMenu": {
      "description": "The contextMenu slot is set on the <oj-menu> instance within this element. It designates the JET Menu that this component should launch as a context menu.",
      "maxItems": 1,
      "help": "contextMenu"
    }
  }
}